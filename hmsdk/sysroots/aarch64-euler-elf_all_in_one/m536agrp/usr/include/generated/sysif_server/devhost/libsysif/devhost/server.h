/*
* Automatically generated file; DO NOT EDIT.
* Automatically generated sysif apis for devhost
* Using command: ../recipe-sysroot-native/usr/bin/hm-dsl/hm-dsl sysif ../../../../../work-shared/hm-verif-kernel/git/ulibs/include/libsysif/devhost/api.sysif -I ../../../../../work-shared/hm-verif-kernel/git/ulibs/include --api-dest ../image/usr/include/generated/sysif_client/devhost/libsysif/devhost/api.h --server-dest ../image/usr/include/generated/sysif_server/devhost/libsysif/devhost/server.h --legacy-mode
* Create: Mon Nov 28 09:47:53 2022
*/
#ifndef LIBSYSIF_DEVHOST_SERVER_H
#define LIBSYSIF_DEVHOST_SERVER_H
#ifndef LIBSYSIF_DEVHOST_COMMON_H
#define LIBSYSIF_DEVHOST_COMMON_H
#include <libsysif/utils_common.h>
#include <hongmeng/compiler.h>
#include <hongmeng/types.h>
#include <asm/actv_rpc.h>
#ifndef LIBSYSIF_BASE_API_COMMON_H
#define LIBSYSIF_BASE_API_COMMON_H
#include <stddef.h>
#include <stdint.h>
#include <hmkernel/capability.h>
struct sysif_reply_header {
	int32_t retval;
	uint32_t msgsz;
};

#define SYSIF_REPLY_LEN_MAX 256UL
extern void* hm_actvpool_prepare_ret(unsigned long long sender, unsigned long credential, unsigned long size);


extern struct arch_actv_local* hm_actv_current_arch_actv_local(void);


#endif
#include <libhmpm/shutdown.h>
#include <libsysif/devmgr/types.h>


#define DEVHOST_ENTROPY_DATA_MAX_LEN	64
struct devhost_entropy_data {
	unsigned char buf[DEVHOST_ENTROPY_DATA_MAX_LEN];
	unsigned int len;
	/* health test fail count */
	unsigned int fail_count;
};



#include <stdint.h>

#include <hmkernel/types.h>
#include <hmkernel/capability.h>

#include <libsysif/devhost/bd_types.h>

raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_core_load_driver_arg_name_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_core_load_driver_arg_args_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_core_create_device_arg_devname_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_core_create_device_arg_dev_compat_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_core_unload_driver_arg_drvname_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_core_bind_device_arg_dev_compat_is_too_large);
raw_static_assert(sizeof(rref_t) <= 96,
                    drvcall_devhost_fops_open_arg_tgt_rref_is_too_large);
raw_static_assert(sizeof(uref_t) <= 96,
                    drvcall_devhost_block_register_bio_notify_arg_uref_is_too_large);
raw_static_assert(sizeof(rref_t) <= 96,
                    drvcall_devhost_net_init_arg_tgt_rref_is_too_large);
raw_static_assert(sizeof(struct reboot_cmd) <= 96,
                    drvcall_devhost_pm_prepare_arg_cmd_is_too_large);
raw_static_assert(sizeof(struct reboot_cmd) <= 96,
                    drvcall_devhost_pm_reboot_arg_cmd_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_procfs_read_arg_ubuf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_procfs_write_arg_ubuf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_sysfs_read_arg_ubuf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_sysfs_write_arg_ubuf_is_too_large);
raw_static_assert(sizeof(dev_t) <= 96,
                    drvcall_devhost_transfs_mounted_arg_dev_id_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_mounted_arg_fs_name_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_mounted_arg_mount_opts_is_too_large);
raw_static_assert(sizeof(mode_t) <= 96,
                    drvcall_devhost_transfs_mkdir_arg_mode_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_mkdir_arg_actv_dname_is_too_large);
raw_static_assert(sizeof(mode_t) <= 96,
                    drvcall_devhost_transfs_create_arg_mode_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_create_arg_actv_dname_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_mknod_arg_actv_dname_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_link_arg_actv_dname_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_symlink_arg_actv_dname_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_symlink_arg_actv_path_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_rename_arg_actv_dname_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_lookup_arg_actv_dname_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_getxattr_arg_actv_name_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_setxattr_arg_actv_name_is_too_large);
raw_static_assert(sizeof(mode_t) <= 96,
                    drvcall_devhost_transfs_tmpfile_arg_mode_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    drvcall_devhost_transfs_tmpfile_arg_actv_dname_is_too_large);
struct __actvret_drvcall_devhost_core_load_driver {
};

struct __actvret_drvcall_devhost_core_create_device {
	int devid;
};

struct __actvret_drvcall_devhost_core_unload_driver {
};

struct __actvret_drvcall_devhost_core_bind_device {
};

struct __actvret_drvcall_devhost_core_entropy_read {
	struct devhost_entropy_data data;
};

struct __actvret_drvcall_devhost_rpc_export {
	uref_t uref;
};

struct __actvret_drvcall_devhost_rpc_invoke {
	unsigned long long resp_size;
};

struct __actvret_drvcall_devhost_fops_open {
	unsigned long long filp;
};

struct __actvret_drvcall_devhost_fops_close {
};

struct __actvret_drvcall_devhost_fops_read {
	unsigned long long nread;
};

struct __actvret_drvcall_devhost_fops_write {
	unsigned long long nwrite;
};

struct __actvret_drvcall_devhost_fops_ioctl {
};

struct __actvret_drvcall_devhost_fops_llseek {
	long long pos;
};

struct __actvret_drvcall_devhost_fops_mmap {
	unsigned long long rvaddr;
};

struct __actvret_drvcall_devhost_fops_munmap {
};

struct __actvret_drvcall_devhost_fops_sysfs_read {
};

struct __actvret_drvcall_devhost_fops_sysfs_write {
};

struct __actvret_drvcall_devhost_fops_epoll_ctl {
};

struct __actvret_drvcall_devhost_fops_epoll_close {
};

struct __actvret_drvcall_devhost_fops_epoll_et {
	unsigned int revents;
};

struct __actvret_drvcall_devhost_fops_epoll_reinit_add {
};

struct __actvret_drvcall_devhost_block_check_feature {
	unsigned long long supported_features;
};

struct __actvret_drvcall_devhost_block_run_queue {
};

struct __actvret_drvcall_devhost_block_direct_access {
	unsigned long long paddr;
	unsigned long long ret_size;
};

struct __actvret_drvcall_devhost_block_register_bio_notify {
	unsigned long long submit_fd;
	unsigned long long end_fd;
	unsigned long long shm_id;
	unsigned long long obj_cnt;
};

struct __actvret_drvcall_devhost_net_send {
};

struct __actvret_drvcall_devhost_net_ioctl {
};

struct __actvret_drvcall_devhost_net_status {
	struct netdev_status status;
};

struct __actvret_drvcall_devhost_net_prepare {
	unsigned int pool_size;
	unsigned int unit_size;
	unsigned long long shm_id;
	unsigned long long rx_uring_shm_id;
};

struct __actvret_drvcall_devhost_net_init {
};

struct __actvret_drvcall_devhost_net_netlink_recv {
};

struct __actvret_drvcall_devhost_pm_action {
};

struct __actvret_drvcall_devhost_pm_prepare {
};

struct __actvret_drvcall_devhost_pm_power_off {
};

struct __actvret_drvcall_devhost_pm_reboot {
};

struct __actvret_drvcall_devhost_pm_cpuhp_action {
};

struct __actvret_drvcall_devhost_procfs_read {
	unsigned long long rsize;
};

struct __actvret_drvcall_devhost_procfs_write {
	unsigned long long wsize;
};

struct __actvret_drvcall_devhost_sysfs_read {
	unsigned long long rsize;
};

struct __actvret_drvcall_devhost_sysfs_write {
	unsigned long long wsize;
};

struct __actvret_drvcall_devhost_sysfs_poll {
};

struct __actvret_drvcall_devhost_clock_settime {
};

struct __actvret_drvcall_devhost_clock_gettime {
};

struct __actvret_drvcall_devhost_clock_getres {
};

struct __actvret_drvcall_devhost_clock_adjtime {
};

struct __actvret_drvcall_devhost_transfs_mounted {
	struct transfs_m_info_t m_info;
};

struct __actvret_drvcall_devhost_transfs_unmounted {
};

struct __actvret_drvcall_devhost_transfs_drop_caches {
};

struct __actvret_drvcall_devhost_transfs_mkdir {
	struct transfs_dn_info_t dn_info_out;
};

struct __actvret_drvcall_devhost_transfs_rmdir {
};

struct __actvret_drvcall_devhost_transfs_create {
	struct transfs_dn_info_t dn_info_out;
};

struct __actvret_drvcall_devhost_transfs_unlink {
};

struct __actvret_drvcall_devhost_transfs_mknod {
	struct transfs_dn_info_t dn_info_out;
};

struct __actvret_drvcall_devhost_transfs_link {
	struct transfs_dn_info_t dn_info_out;
};

struct __actvret_drvcall_devhost_transfs_symlink {
	struct transfs_dn_info_t dn_info_out;
};

struct __actvret_drvcall_devhost_transfs_statfs {
};

struct __actvret_drvcall_devhost_transfs_rename {
};

struct __actvret_drvcall_devhost_transfs_lookup {
	struct transfs_dn_info_t dn_info_out;
};

struct __actvret_drvcall_devhost_transfs_setattr {
};

struct __actvret_drvcall_devhost_transfs_readlink {
};

struct __actvret_drvcall_devhost_transfs_getattr {
};

struct __actvret_drvcall_devhost_transfs_listxattr {
	long long written;
};

struct __actvret_drvcall_devhost_transfs_getxattr {
	long long nbytes;
};

struct __actvret_drvcall_devhost_transfs_setxattr {
};

struct __actvret_drvcall_devhost_transfs_tmpfile {
	struct transfs_dn_info_t dn_info_out;
};

struct __actvret_drvcall_devhost_transfs_kill_dentry {
};

struct __actvret_drvcall_devhost_transfs_node_put {
};

struct __actvret_drvcall_devhost_transfs_sync {
};

struct __actvret_drvcall_devhost_transfs_write {
	long long nwritten;
};

struct __actvret_drvcall_devhost_transfs_fsync {
};

struct __actvret_drvcall_devhost_transfs_readdir {
};

struct __actvret_drvcall_devhost_transfs_open {
	unsigned int f_index;
};

struct __actvret_drvcall_devhost_transfs_fallocate {
};

struct __actvret_drvcall_devhost_transfs_close {
};

struct __actvret_drvcall_devhost_transfs_ioctl {
};

struct __actvret_drvcall_devhost_transfs_direct_IO {
	long long nbytes;
};

struct __actvret_drvcall_devhost_transfs_update_opts {
};

union __actvret_drvcall_devhost {
	struct __actvret_drvcall_devhost_core_load_driver core_load_driver;
	struct __actvret_drvcall_devhost_core_create_device core_create_device;
	struct __actvret_drvcall_devhost_core_unload_driver core_unload_driver;
	struct __actvret_drvcall_devhost_core_bind_device core_bind_device;
	struct __actvret_drvcall_devhost_core_entropy_read core_entropy_read;
	struct __actvret_drvcall_devhost_rpc_export rpc_export;
	struct __actvret_drvcall_devhost_rpc_invoke rpc_invoke;
	struct __actvret_drvcall_devhost_fops_open fops_open;
	struct __actvret_drvcall_devhost_fops_close fops_close;
	struct __actvret_drvcall_devhost_fops_read fops_read;
	struct __actvret_drvcall_devhost_fops_write fops_write;
	struct __actvret_drvcall_devhost_fops_ioctl fops_ioctl;
	struct __actvret_drvcall_devhost_fops_llseek fops_llseek;
	struct __actvret_drvcall_devhost_fops_mmap fops_mmap;
	struct __actvret_drvcall_devhost_fops_munmap fops_munmap;
	struct __actvret_drvcall_devhost_fops_sysfs_read fops_sysfs_read;
	struct __actvret_drvcall_devhost_fops_sysfs_write fops_sysfs_write;
	struct __actvret_drvcall_devhost_fops_epoll_ctl fops_epoll_ctl;
	struct __actvret_drvcall_devhost_fops_epoll_close fops_epoll_close;
	struct __actvret_drvcall_devhost_fops_epoll_et fops_epoll_et;
	struct __actvret_drvcall_devhost_fops_epoll_reinit_add fops_epoll_reinit_add;
	struct __actvret_drvcall_devhost_block_check_feature block_check_feature;
	struct __actvret_drvcall_devhost_block_run_queue block_run_queue;
	struct __actvret_drvcall_devhost_block_direct_access block_direct_access;
	struct __actvret_drvcall_devhost_block_register_bio_notify block_register_bio_notify;
	struct __actvret_drvcall_devhost_net_send net_send;
	struct __actvret_drvcall_devhost_net_ioctl net_ioctl;
	struct __actvret_drvcall_devhost_net_status net_status;
	struct __actvret_drvcall_devhost_net_prepare net_prepare;
	struct __actvret_drvcall_devhost_net_init net_init;
	struct __actvret_drvcall_devhost_net_netlink_recv net_netlink_recv;
	struct __actvret_drvcall_devhost_pm_action pm_action;
	struct __actvret_drvcall_devhost_pm_prepare pm_prepare;
	struct __actvret_drvcall_devhost_pm_power_off pm_power_off;
	struct __actvret_drvcall_devhost_pm_reboot pm_reboot;
	struct __actvret_drvcall_devhost_pm_cpuhp_action pm_cpuhp_action;
	struct __actvret_drvcall_devhost_procfs_read procfs_read;
	struct __actvret_drvcall_devhost_procfs_write procfs_write;
	struct __actvret_drvcall_devhost_sysfs_read sysfs_read;
	struct __actvret_drvcall_devhost_sysfs_write sysfs_write;
	struct __actvret_drvcall_devhost_sysfs_poll sysfs_poll;
	struct __actvret_drvcall_devhost_clock_settime clock_settime;
	struct __actvret_drvcall_devhost_clock_gettime clock_gettime;
	struct __actvret_drvcall_devhost_clock_getres clock_getres;
	struct __actvret_drvcall_devhost_clock_adjtime clock_adjtime;
	struct __actvret_drvcall_devhost_transfs_mounted transfs_mounted;
	struct __actvret_drvcall_devhost_transfs_unmounted transfs_unmounted;
	struct __actvret_drvcall_devhost_transfs_drop_caches transfs_drop_caches;
	struct __actvret_drvcall_devhost_transfs_mkdir transfs_mkdir;
	struct __actvret_drvcall_devhost_transfs_rmdir transfs_rmdir;
	struct __actvret_drvcall_devhost_transfs_create transfs_create;
	struct __actvret_drvcall_devhost_transfs_unlink transfs_unlink;
	struct __actvret_drvcall_devhost_transfs_mknod transfs_mknod;
	struct __actvret_drvcall_devhost_transfs_link transfs_link;
	struct __actvret_drvcall_devhost_transfs_symlink transfs_symlink;
	struct __actvret_drvcall_devhost_transfs_statfs transfs_statfs;
	struct __actvret_drvcall_devhost_transfs_rename transfs_rename;
	struct __actvret_drvcall_devhost_transfs_lookup transfs_lookup;
	struct __actvret_drvcall_devhost_transfs_setattr transfs_setattr;
	struct __actvret_drvcall_devhost_transfs_readlink transfs_readlink;
	struct __actvret_drvcall_devhost_transfs_getattr transfs_getattr;
	struct __actvret_drvcall_devhost_transfs_listxattr transfs_listxattr;
	struct __actvret_drvcall_devhost_transfs_getxattr transfs_getxattr;
	struct __actvret_drvcall_devhost_transfs_setxattr transfs_setxattr;
	struct __actvret_drvcall_devhost_transfs_tmpfile transfs_tmpfile;
	struct __actvret_drvcall_devhost_transfs_kill_dentry transfs_kill_dentry;
	struct __actvret_drvcall_devhost_transfs_node_put transfs_node_put;
	struct __actvret_drvcall_devhost_transfs_sync transfs_sync;
	struct __actvret_drvcall_devhost_transfs_write transfs_write;
	struct __actvret_drvcall_devhost_transfs_fsync transfs_fsync;
	struct __actvret_drvcall_devhost_transfs_readdir transfs_readdir;
	struct __actvret_drvcall_devhost_transfs_open transfs_open;
	struct __actvret_drvcall_devhost_transfs_fallocate transfs_fallocate;
	struct __actvret_drvcall_devhost_transfs_close transfs_close;
	struct __actvret_drvcall_devhost_transfs_ioctl transfs_ioctl;
	struct __actvret_drvcall_devhost_transfs_direct_IO transfs_direct_IO;
	struct __actvret_drvcall_devhost_transfs_update_opts transfs_update_opts;
};

enum __devhost_mgr {
	__devhost_INVAL_mgr=0,
	__devhost_core_mgr,
	__devhost_rpc_mgr,
	__devhost_fops_mgr,
	__devhost_block_mgr,
	__devhost_net_mgr,
	__devhost_pm_mgr,
	__devhost_procfs_mgr,
	__devhost_sysfs_mgr,
	__devhost_clock_mgr,
	__devhost_transfs_mgr,
	__devhost_MAX_mgr,
};

#define __devhost_method_MIN __ACTV_HIGHTABLE_START
#define __devhost_method_core_load_driver (__ACTV_HIGHTABLE_START + 1)
#define __devhost_method_core_create_device (__ACTV_HIGHTABLE_START + 2)
#define __devhost_method_core_unload_driver (__ACTV_HIGHTABLE_START + 3)
#define __devhost_method_core_bind_device (__ACTV_HIGHTABLE_START + 4)
#define __devhost_method_core_entropy_read (__ACTV_HIGHTABLE_START + 5)
#define __devhost_method_core_rsvd_3 (__ACTV_HIGHTABLE_START + 6)
#define __devhost_method_core_rsvd_2 (__ACTV_HIGHTABLE_START + 7)
#define __devhost_method_core_rsvd_1 (__ACTV_HIGHTABLE_START + 8)
#define __devhost_method_rpc_export (__ACTV_HIGHTABLE_START + 9)
#define __devhost_method_rpc_invoke (__ACTV_HIGHTABLE_START + 10)
#define __devhost_method_rpc_rsvd_2 (__ACTV_HIGHTABLE_START + 11)
#define __devhost_method_rpc_rsvd_1 (__ACTV_HIGHTABLE_START + 12)
#define __devhost_method_fops_open (__ACTV_HIGHTABLE_START + 13)
#define __devhost_method_fops_close (__ACTV_HIGHTABLE_START + 14)
#define __devhost_method_fops_read (__ACTV_HIGHTABLE_START + 15)
#define __devhost_method_fops_write (__ACTV_HIGHTABLE_START + 16)
#define __devhost_method_fops_ioctl (__ACTV_HIGHTABLE_START + 17)
#define __devhost_method_fops_llseek (__ACTV_HIGHTABLE_START + 18)
#define __devhost_method_fops_mmap (__ACTV_HIGHTABLE_START + 19)
#define __devhost_method_fops_munmap (__ACTV_HIGHTABLE_START + 20)
#define __devhost_method_fops_sysfs_read (__ACTV_HIGHTABLE_START + 21)
#define __devhost_method_fops_sysfs_write (__ACTV_HIGHTABLE_START + 22)
#define __devhost_method_fops_epoll_ctl (__ACTV_HIGHTABLE_START + 23)
#define __devhost_method_fops_epoll_close (__ACTV_HIGHTABLE_START + 24)
#define __devhost_method_fops_epoll_et (__ACTV_HIGHTABLE_START + 25)
#define __devhost_method_fops_epoll_reinit_add (__ACTV_HIGHTABLE_START + 26)
#define __devhost_method_fops_rsvd_2 (__ACTV_HIGHTABLE_START + 27)
#define __devhost_method_fops_rsvd_1 (__ACTV_HIGHTABLE_START + 28)
#define __devhost_method_block_check_feature (__ACTV_HIGHTABLE_START + 29)
#define __devhost_method_block_run_queue (__ACTV_HIGHTABLE_START + 30)
#define __devhost_method_block_direct_access (__ACTV_HIGHTABLE_START + 31)
#define __devhost_method_block_register_bio_notify (__ACTV_HIGHTABLE_START + 32)
#define __devhost_method_block_rsvd_4 (__ACTV_HIGHTABLE_START + 33)
#define __devhost_method_block_rsvd_3 (__ACTV_HIGHTABLE_START + 34)
#define __devhost_method_block_rsvd_2 (__ACTV_HIGHTABLE_START + 35)
#define __devhost_method_block_rsvd_1 (__ACTV_HIGHTABLE_START + 36)
#define __devhost_method_net_send (__ACTV_HIGHTABLE_START + 37)
#define __devhost_method_net_ioctl (__ACTV_HIGHTABLE_START + 38)
#define __devhost_method_net_status (__ACTV_HIGHTABLE_START + 39)
#define __devhost_method_net_prepare (__ACTV_HIGHTABLE_START + 40)
#define __devhost_method_net_init (__ACTV_HIGHTABLE_START + 41)
#define __devhost_method_net_netlink_recv (__ACTV_HIGHTABLE_START + 42)
#define __devhost_method_net_rsvd_2 (__ACTV_HIGHTABLE_START + 43)
#define __devhost_method_net_rsvd_1 (__ACTV_HIGHTABLE_START + 44)
#define __devhost_method_pm_action (__ACTV_HIGHTABLE_START + 45)
#define __devhost_method_pm_prepare (__ACTV_HIGHTABLE_START + 46)
#define __devhost_method_pm_power_off (__ACTV_HIGHTABLE_START + 47)
#define __devhost_method_pm_reboot (__ACTV_HIGHTABLE_START + 48)
#define __devhost_method_pm_cpuhp_action (__ACTV_HIGHTABLE_START + 49)
#define __devhost_method_pm_rsvd_3 (__ACTV_HIGHTABLE_START + 50)
#define __devhost_method_pm_rsvd_2 (__ACTV_HIGHTABLE_START + 51)
#define __devhost_method_pm_rsvd_1 (__ACTV_HIGHTABLE_START + 52)
#define __devhost_method_procfs_read (__ACTV_HIGHTABLE_START + 53)
#define __devhost_method_procfs_write (__ACTV_HIGHTABLE_START + 54)
#define __devhost_method_procfs_rsvd_2 (__ACTV_HIGHTABLE_START + 55)
#define __devhost_method_procfs_rsvd_1 (__ACTV_HIGHTABLE_START + 56)
#define __devhost_method_sysfs_read (__ACTV_HIGHTABLE_START + 57)
#define __devhost_method_sysfs_write (__ACTV_HIGHTABLE_START + 58)
#define __devhost_method_sysfs_poll (__ACTV_HIGHTABLE_START + 59)
#define __devhost_method_sysfs_rsvd_1 (__ACTV_HIGHTABLE_START + 60)
#define __devhost_method_clock_settime (__ACTV_HIGHTABLE_START + 61)
#define __devhost_method_clock_gettime (__ACTV_HIGHTABLE_START + 62)
#define __devhost_method_clock_getres (__ACTV_HIGHTABLE_START + 63)
#define __devhost_method_clock_adjtime (__ACTV_HIGHTABLE_START + 64)
#define __devhost_method_clock_rsvd_4 (__ACTV_HIGHTABLE_START + 65)
#define __devhost_method_clock_rsvd_3 (__ACTV_HIGHTABLE_START + 66)
#define __devhost_method_clock_rsvd_2 (__ACTV_HIGHTABLE_START + 67)
#define __devhost_method_clock_rsvd_1 (__ACTV_HIGHTABLE_START + 68)
#define __devhost_method_transfs_mounted (__ACTV_HIGHTABLE_START + 69)
#define __devhost_method_transfs_unmounted (__ACTV_HIGHTABLE_START + 70)
#define __devhost_method_transfs_drop_caches (__ACTV_HIGHTABLE_START + 71)
#define __devhost_method_transfs_mkdir (__ACTV_HIGHTABLE_START + 72)
#define __devhost_method_transfs_rmdir (__ACTV_HIGHTABLE_START + 73)
#define __devhost_method_transfs_create (__ACTV_HIGHTABLE_START + 74)
#define __devhost_method_transfs_unlink (__ACTV_HIGHTABLE_START + 75)
#define __devhost_method_transfs_mknod (__ACTV_HIGHTABLE_START + 76)
#define __devhost_method_transfs_link (__ACTV_HIGHTABLE_START + 77)
#define __devhost_method_transfs_symlink (__ACTV_HIGHTABLE_START + 78)
#define __devhost_method_transfs_statfs (__ACTV_HIGHTABLE_START + 79)
#define __devhost_method_transfs_rename (__ACTV_HIGHTABLE_START + 80)
#define __devhost_method_transfs_lookup (__ACTV_HIGHTABLE_START + 81)
#define __devhost_method_transfs_setattr (__ACTV_HIGHTABLE_START + 82)
#define __devhost_method_transfs_readlink (__ACTV_HIGHTABLE_START + 83)
#define __devhost_method_transfs_getattr (__ACTV_HIGHTABLE_START + 84)
#define __devhost_method_transfs_listxattr (__ACTV_HIGHTABLE_START + 85)
#define __devhost_method_transfs_getxattr (__ACTV_HIGHTABLE_START + 86)
#define __devhost_method_transfs_setxattr (__ACTV_HIGHTABLE_START + 87)
#define __devhost_method_transfs_tmpfile (__ACTV_HIGHTABLE_START + 88)
#define __devhost_method_transfs_kill_dentry (__ACTV_HIGHTABLE_START + 89)
#define __devhost_method_transfs_node_put (__ACTV_HIGHTABLE_START + 90)
#define __devhost_method_transfs_sync (__ACTV_HIGHTABLE_START + 91)
#define __devhost_method_transfs_write (__ACTV_HIGHTABLE_START + 92)
#define __devhost_method_transfs_fsync (__ACTV_HIGHTABLE_START + 93)
#define __devhost_method_transfs_readdir (__ACTV_HIGHTABLE_START + 94)
#define __devhost_method_transfs_open (__ACTV_HIGHTABLE_START + 95)
#define __devhost_method_transfs_fallocate (__ACTV_HIGHTABLE_START + 96)
#define __devhost_method_transfs_close (__ACTV_HIGHTABLE_START + 97)
#define __devhost_method_transfs_ioctl (__ACTV_HIGHTABLE_START + 98)
#define __devhost_method_transfs_direct_IO (__ACTV_HIGHTABLE_START + 99)
#define __devhost_method_transfs_update_opts (__ACTV_HIGHTABLE_START + 100)
#define __devhost_method_MAX_NOCOMPAT (__ACTV_HIGHTABLE_START + 101)
#define __devhost_method_MAX_COMPAT ((__ACTV_HIGHTABLE_START + 101) * 2)
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_core_load_driver) < 512,
                drvcall_devhost_core_load_driver_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_core_create_device) < 512,
                drvcall_devhost_core_create_device_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_core_unload_driver) < 512,
                drvcall_devhost_core_unload_driver_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_core_bind_device) < 512,
                drvcall_devhost_core_bind_device_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_core_entropy_read) < 512,
                drvcall_devhost_core_entropy_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_rpc_export) < 512,
                drvcall_devhost_rpc_export_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_rpc_invoke) < 512,
                drvcall_devhost_rpc_invoke_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_open) < 512,
                drvcall_devhost_fops_open_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_close) < 512,
                drvcall_devhost_fops_close_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_read) < 512,
                drvcall_devhost_fops_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_write) < 512,
                drvcall_devhost_fops_write_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_ioctl) < 512,
                drvcall_devhost_fops_ioctl_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_llseek) < 512,
                drvcall_devhost_fops_llseek_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_mmap) < 512,
                drvcall_devhost_fops_mmap_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_munmap) < 512,
                drvcall_devhost_fops_munmap_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_sysfs_read) < 512,
                drvcall_devhost_fops_sysfs_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_sysfs_write) < 512,
                drvcall_devhost_fops_sysfs_write_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_epoll_ctl) < 512,
                drvcall_devhost_fops_epoll_ctl_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_epoll_close) < 512,
                drvcall_devhost_fops_epoll_close_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_epoll_et) < 512,
                drvcall_devhost_fops_epoll_et_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_fops_epoll_reinit_add) < 512,
                drvcall_devhost_fops_epoll_reinit_add_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_block_check_feature) < 512,
                drvcall_devhost_block_check_feature_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_block_run_queue) < 512,
                drvcall_devhost_block_run_queue_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_block_direct_access) < 512,
                drvcall_devhost_block_direct_access_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_block_register_bio_notify) < 512,
                drvcall_devhost_block_register_bio_notify_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_net_send) < 512,
                drvcall_devhost_net_send_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_net_ioctl) < 512,
                drvcall_devhost_net_ioctl_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_net_status) < 512,
                drvcall_devhost_net_status_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_net_prepare) < 512,
                drvcall_devhost_net_prepare_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_net_init) < 512,
                drvcall_devhost_net_init_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_net_netlink_recv) < 512,
                drvcall_devhost_net_netlink_recv_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_pm_action) < 512,
                drvcall_devhost_pm_action_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_pm_prepare) < 512,
                drvcall_devhost_pm_prepare_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_pm_power_off) < 512,
                drvcall_devhost_pm_power_off_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_pm_reboot) < 512,
                drvcall_devhost_pm_reboot_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_pm_cpuhp_action) < 512,
                drvcall_devhost_pm_cpuhp_action_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_procfs_read) < 512,
                drvcall_devhost_procfs_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_procfs_write) < 512,
                drvcall_devhost_procfs_write_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_sysfs_read) < 512,
                drvcall_devhost_sysfs_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_sysfs_write) < 512,
                drvcall_devhost_sysfs_write_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_sysfs_poll) < 512,
                drvcall_devhost_sysfs_poll_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_clock_settime) < 512,
                drvcall_devhost_clock_settime_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_clock_gettime) < 512,
                drvcall_devhost_clock_gettime_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_clock_getres) < 512,
                drvcall_devhost_clock_getres_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_clock_adjtime) < 512,
                drvcall_devhost_clock_adjtime_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_mounted) < 512,
                drvcall_devhost_transfs_mounted_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_unmounted) < 512,
                drvcall_devhost_transfs_unmounted_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_drop_caches) < 512,
                drvcall_devhost_transfs_drop_caches_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_mkdir) < 512,
                drvcall_devhost_transfs_mkdir_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_rmdir) < 512,
                drvcall_devhost_transfs_rmdir_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_create) < 512,
                drvcall_devhost_transfs_create_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_unlink) < 512,
                drvcall_devhost_transfs_unlink_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_mknod) < 512,
                drvcall_devhost_transfs_mknod_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_link) < 512,
                drvcall_devhost_transfs_link_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_symlink) < 512,
                drvcall_devhost_transfs_symlink_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_statfs) < 512,
                drvcall_devhost_transfs_statfs_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_rename) < 512,
                drvcall_devhost_transfs_rename_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_lookup) < 512,
                drvcall_devhost_transfs_lookup_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_setattr) < 512,
                drvcall_devhost_transfs_setattr_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_readlink) < 512,
                drvcall_devhost_transfs_readlink_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_getattr) < 512,
                drvcall_devhost_transfs_getattr_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_listxattr) < 512,
                drvcall_devhost_transfs_listxattr_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_getxattr) < 512,
                drvcall_devhost_transfs_getxattr_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_setxattr) < 512,
                drvcall_devhost_transfs_setxattr_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_tmpfile) < 512,
                drvcall_devhost_transfs_tmpfile_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_kill_dentry) < 512,
                drvcall_devhost_transfs_kill_dentry_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_node_put) < 512,
                drvcall_devhost_transfs_node_put_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_sync) < 512,
                drvcall_devhost_transfs_sync_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_write) < 512,
                drvcall_devhost_transfs_write_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_fsync) < 512,
                drvcall_devhost_transfs_fsync_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_readdir) < 512,
                drvcall_devhost_transfs_readdir_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_open) < 512,
                drvcall_devhost_transfs_open_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_fallocate) < 512,
                drvcall_devhost_transfs_fallocate_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_close) < 512,
                drvcall_devhost_transfs_close_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_ioctl) < 512,
                drvcall_devhost_transfs_ioctl_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_direct_IO) < 512,
                drvcall_devhost_transfs_direct_IO_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_drvcall_devhost_transfs_update_opts) < 512,
                drvcall_devhost_transfs_update_opts_too_many_actvret_data);
raw_static_assert(sizeof(union __actvret_drvcall_devhost) < 512,
        drvcall_devhost_too_many_actvret_data);
extern int __actvcall_drvcall_devhost_core_load_driver(unsigned long long __rpc_info, void *__buf, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);


extern int __actvcapcall_drvcall_devhost_core_load_driver(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_core_load_driver(bool is_xact_fwd, bool is_xact_allow_refwd, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size)
{
	const unsigned long __callno = __devhost_method_core_load_driver;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_core_load_driver(rpc_info, NULL, name, args, mpool_id, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_core_load_driver(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size)
{
	const unsigned long __callno = __devhost_method_core_load_driver;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_core_load_driver(__rref, rpc_info, NULL, name, args, mpool_id, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_core_load_driver(struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size)
{
	return actvxactcall_drvcall_devhost_core_load_driver(false, false, name, args, mpool_id, size);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_core_load_driver(rref_t __rref, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size)
{
	return actvxactcapcall_drvcall_devhost_core_load_driver(false, false, __rref, name, args, mpool_id, size);
}

extern int __actvcall_drvcall_devhost_core_create_device(unsigned long long __rpc_info, void *__buf, void *__rply_buf, unsigned long rply_buf_sz, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);


extern int __actvcapcall_drvcall_devhost_core_create_device(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *__rply_buf, unsigned long rply_buf_sz, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_core_create_device(bool is_xact_fwd, bool is_xact_allow_refwd, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count, void *___void_buf, unsigned long ___void_buf_sz, struct __actvret_drvcall_devhost_core_create_device *__ret)
{
	const unsigned long __callno = __devhost_method_core_create_device;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 1);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, ___void_buf_sz, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_core_create_device(rpc_info, ___void_buf, ptr_to_void(__ret), sizeof*__ret, devname, dev_compat, parent_devid, resource_count);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_core_create_device(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count, void *___void_buf, unsigned long ___void_buf_sz, struct __actvret_drvcall_devhost_core_create_device *__ret)
{
	const unsigned long __callno = __devhost_method_core_create_device;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 1);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, ___void_buf_sz, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_core_create_device(__rref, rpc_info, ___void_buf, ptr_to_void(__ret), sizeof*__ret, devname, dev_compat, parent_devid, resource_count);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_core_create_device(struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count, void *___void_buf, unsigned long ___void_buf_sz, struct __actvret_drvcall_devhost_core_create_device *__ret)
{
	return actvxactcall_drvcall_devhost_core_create_device(false, false, devname, dev_compat, parent_devid, resource_count, ___void_buf, ___void_buf_sz, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_core_create_device(rref_t __rref, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count, void *___void_buf, unsigned long ___void_buf_sz, struct __actvret_drvcall_devhost_core_create_device *__ret)
{
	return actvxactcapcall_drvcall_devhost_core_create_device(false, false, __rref, devname, dev_compat, parent_devid, resource_count, ___void_buf, ___void_buf_sz, __ret);
}

extern int __actvcall_drvcall_devhost_core_unload_driver(unsigned long long __rpc_info, void *__buf, struct hm_actv_buf drvname);


extern int __actvcapcall_drvcall_devhost_core_unload_driver(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_actv_buf drvname);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_core_unload_driver(bool is_xact_fwd, bool is_xact_allow_refwd, struct hm_actv_buf drvname)
{
	const unsigned long __callno = __devhost_method_core_unload_driver;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_core_unload_driver(rpc_info, NULL, drvname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_core_unload_driver(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct hm_actv_buf drvname)
{
	const unsigned long __callno = __devhost_method_core_unload_driver;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_core_unload_driver(__rref, rpc_info, NULL, drvname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_core_unload_driver(struct hm_actv_buf drvname)
{
	return actvxactcall_drvcall_devhost_core_unload_driver(false, false, drvname);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_core_unload_driver(rref_t __rref, struct hm_actv_buf drvname)
{
	return actvxactcapcall_drvcall_devhost_core_unload_driver(false, false, __rref, drvname);
}

extern int __actvcall_drvcall_devhost_core_bind_device(unsigned long long __rpc_info, void *__buf, int devid, struct hm_actv_buf dev_compat);


extern int __actvcapcall_drvcall_devhost_core_bind_device(rref_t __rref, unsigned long long __rpc_info, void *__buf, int devid, struct hm_actv_buf dev_compat);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_core_bind_device(bool is_xact_fwd, bool is_xact_allow_refwd, int devid, struct hm_actv_buf dev_compat)
{
	const unsigned long __callno = __devhost_method_core_bind_device;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_core_bind_device(rpc_info, NULL, devid, dev_compat);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_core_bind_device(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int devid, struct hm_actv_buf dev_compat)
{
	const unsigned long __callno = __devhost_method_core_bind_device;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_core_bind_device(__rref, rpc_info, NULL, devid, dev_compat);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_core_bind_device(int devid, struct hm_actv_buf dev_compat)
{
	return actvxactcall_drvcall_devhost_core_bind_device(false, false, devid, dev_compat);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_core_bind_device(rref_t __rref, int devid, struct hm_actv_buf dev_compat)
{
	return actvxactcapcall_drvcall_devhost_core_bind_device(false, false, __rref, devid, dev_compat);
}

extern int __actvcall_drvcall_devhost_core_entropy_read(unsigned long long __rpc_info, void *__buf, unsigned int num);


extern int __actvcapcall_drvcall_devhost_core_entropy_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int num);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_core_entropy_read(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int num, struct __actvret_drvcall_devhost_core_entropy_read *__ret)
{
	const unsigned long __callno = __devhost_method_core_entropy_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_core_entropy_read(rpc_info, __ret, num);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_core_entropy_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int num, struct __actvret_drvcall_devhost_core_entropy_read *__ret)
{
	const unsigned long __callno = __devhost_method_core_entropy_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_core_entropy_read(__rref, rpc_info, __ret, num);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_core_entropy_read(unsigned int num, struct __actvret_drvcall_devhost_core_entropy_read *__ret)
{
	return actvxactcall_drvcall_devhost_core_entropy_read(false, false, num, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_core_entropy_read(rref_t __rref, unsigned int num, struct __actvret_drvcall_devhost_core_entropy_read *__ret)
{
	return actvxactcapcall_drvcall_devhost_core_entropy_read(false, false, __rref, num, __ret);
}

extern int __actvcall_drvcall_devhost_rpc_export(unsigned long long __rpc_info, void *__buf, int devid, unsigned int cnode_idx);


extern int __actvcapcall_drvcall_devhost_rpc_export(rref_t __rref, unsigned long long __rpc_info, void *__buf, int devid, unsigned int cnode_idx);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_rpc_export(bool is_xact_fwd, bool is_xact_allow_refwd, int devid, unsigned int cnode_idx, struct __actvret_drvcall_devhost_rpc_export *__ret)
{
	const unsigned long __callno = __devhost_method_rpc_export;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_rpc_export(rpc_info, __ret, devid, cnode_idx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_rpc_export(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int devid, unsigned int cnode_idx, struct __actvret_drvcall_devhost_rpc_export *__ret)
{
	const unsigned long __callno = __devhost_method_rpc_export;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_rpc_export(__rref, rpc_info, __ret, devid, cnode_idx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_rpc_export(int devid, unsigned int cnode_idx, struct __actvret_drvcall_devhost_rpc_export *__ret)
{
	return actvxactcall_drvcall_devhost_rpc_export(false, false, devid, cnode_idx, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_rpc_export(rref_t __rref, int devid, unsigned int cnode_idx, struct __actvret_drvcall_devhost_rpc_export *__ret)
{
	return actvxactcapcall_drvcall_devhost_rpc_export(false, false, __rref, devid, cnode_idx, __ret);
}

extern int __actvcall_drvcall_devhost_rpc_invoke(unsigned long long __rpc_info, void *__buf, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);


extern int __actvcapcall_drvcall_devhost_rpc_invoke(rref_t __rref, unsigned long long __rpc_info, void *__buf, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_rpc_invoke(bool is_xact_fwd, bool is_xact_allow_refwd, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size, struct __actvret_drvcall_devhost_rpc_invoke *__ret)
{
	const unsigned long __callno = __devhost_method_rpc_invoke;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_rpc_invoke(rpc_info, __ret, devid, req_ubuf, req_size, resp_ubuf, resp_size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_rpc_invoke(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size, struct __actvret_drvcall_devhost_rpc_invoke *__ret)
{
	const unsigned long __callno = __devhost_method_rpc_invoke;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_rpc_invoke(__rref, rpc_info, __ret, devid, req_ubuf, req_size, resp_ubuf, resp_size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_rpc_invoke(int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size, struct __actvret_drvcall_devhost_rpc_invoke *__ret)
{
	return actvxactcall_drvcall_devhost_rpc_invoke(false, false, devid, req_ubuf, req_size, resp_ubuf, resp_size, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_rpc_invoke(rref_t __rref, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size, struct __actvret_drvcall_devhost_rpc_invoke *__ret)
{
	return actvxactcapcall_drvcall_devhost_rpc_invoke(false, false, __rref, devid, req_ubuf, req_size, resp_ubuf, resp_size, __ret);
}

extern int __actvcall_drvcall_devhost_fops_open(unsigned long long __rpc_info, void *__buf, int devid, rref_t tgt_rref, unsigned int vfs_flags);


extern int __actvcapcall_drvcall_devhost_fops_open(rref_t __rref, unsigned long long __rpc_info, void *__buf, int devid, rref_t tgt_rref, unsigned int vfs_flags);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_open(bool is_xact_fwd, bool is_xact_allow_refwd, int devid, rref_t tgt_rref, unsigned int vfs_flags, struct __actvret_drvcall_devhost_fops_open *__ret)
{
	const unsigned long __callno = __devhost_method_fops_open;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_open(rpc_info, __ret, devid, tgt_rref, vfs_flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_open(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int devid, rref_t tgt_rref, unsigned int vfs_flags, struct __actvret_drvcall_devhost_fops_open *__ret)
{
	const unsigned long __callno = __devhost_method_fops_open;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_open(__rref, rpc_info, __ret, devid, tgt_rref, vfs_flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_open(int devid, rref_t tgt_rref, unsigned int vfs_flags, struct __actvret_drvcall_devhost_fops_open *__ret)
{
	return actvxactcall_drvcall_devhost_fops_open(false, false, devid, tgt_rref, vfs_flags, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_open(rref_t __rref, int devid, rref_t tgt_rref, unsigned int vfs_flags, struct __actvret_drvcall_devhost_fops_open *__ret)
{
	return actvxactcapcall_drvcall_devhost_fops_open(false, false, __rref, devid, tgt_rref, vfs_flags, __ret);
}

extern int __actvcall_drvcall_devhost_fops_close(unsigned long long __rpc_info, void *__buf, int padding, unsigned long long file_id);


extern int __actvcapcall_drvcall_devhost_fops_close(rref_t __rref, unsigned long long __rpc_info, void *__buf, int padding, unsigned long long file_id);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_close(bool is_xact_fwd, bool is_xact_allow_refwd, int padding, unsigned long long file_id)
{
	const unsigned long __callno = __devhost_method_fops_close;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_close(rpc_info, NULL, padding, file_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_close(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int padding, unsigned long long file_id)
{
	const unsigned long __callno = __devhost_method_fops_close;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_close(__rref, rpc_info, NULL, padding, file_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_close(int padding, unsigned long long file_id)
{
	return actvxactcall_drvcall_devhost_fops_close(false, false, padding, file_id);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_close(rref_t __rref, int padding, unsigned long long file_id)
{
	return actvxactcapcall_drvcall_devhost_fops_close(false, false, __rref, padding, file_id);
}

extern int __actvcall_drvcall_devhost_fops_read(unsigned long long __rpc_info, void *__buf, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);


extern int __actvcapcall_drvcall_devhost_fops_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_read(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count, struct __actvret_drvcall_devhost_fops_read *__ret)
{
	const unsigned long __callno = __devhost_method_fops_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_read(rpc_info, __ret, buf, filep, offset, count);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count, struct __actvret_drvcall_devhost_fops_read *__ret)
{
	const unsigned long __callno = __devhost_method_fops_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_read(__rref, rpc_info, __ret, buf, filep, offset, count);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_read(unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count, struct __actvret_drvcall_devhost_fops_read *__ret)
{
	return actvxactcall_drvcall_devhost_fops_read(false, false, buf, filep, offset, count, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_read(rref_t __rref, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count, struct __actvret_drvcall_devhost_fops_read *__ret)
{
	return actvxactcapcall_drvcall_devhost_fops_read(false, false, __rref, buf, filep, offset, count, __ret);
}

extern int __actvcall_drvcall_devhost_fops_write(unsigned long long __rpc_info, void *__buf, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);


extern int __actvcapcall_drvcall_devhost_fops_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_write(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count, struct __actvret_drvcall_devhost_fops_write *__ret)
{
	const unsigned long __callno = __devhost_method_fops_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_write(rpc_info, __ret, buf, file_id, offset, count);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_write(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count, struct __actvret_drvcall_devhost_fops_write *__ret)
{
	const unsigned long __callno = __devhost_method_fops_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_write(__rref, rpc_info, __ret, buf, file_id, offset, count);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_write(unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count, struct __actvret_drvcall_devhost_fops_write *__ret)
{
	return actvxactcall_drvcall_devhost_fops_write(false, false, buf, file_id, offset, count, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_write(rref_t __rref, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count, struct __actvret_drvcall_devhost_fops_write *__ret)
{
	return actvxactcapcall_drvcall_devhost_fops_write(false, false, __rref, buf, file_id, offset, count, __ret);
}

extern int __actvcall_drvcall_devhost_fops_ioctl(unsigned long long __rpc_info, void *__buf, int request, unsigned long long file_id, unsigned long arg);


extern int __actvcapcall_drvcall_devhost_fops_ioctl(rref_t __rref, unsigned long long __rpc_info, void *__buf, int request, unsigned long long file_id, unsigned long arg);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_ioctl(bool is_xact_fwd, bool is_xact_allow_refwd, int request, unsigned long long file_id, unsigned long arg)
{
	const unsigned long __callno = __devhost_method_fops_ioctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_ioctl(rpc_info, NULL, request, file_id, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_ioctl(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int request, unsigned long long file_id, unsigned long arg)
{
	const unsigned long __callno = __devhost_method_fops_ioctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_ioctl(__rref, rpc_info, NULL, request, file_id, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_ioctl(int request, unsigned long long file_id, unsigned long arg)
{
	return actvxactcall_drvcall_devhost_fops_ioctl(false, false, request, file_id, arg);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_ioctl(rref_t __rref, int request, unsigned long long file_id, unsigned long arg)
{
	return actvxactcapcall_drvcall_devhost_fops_ioctl(false, false, __rref, request, file_id, arg);
}

extern int __actvcall_drvcall_devhost_fops_llseek(unsigned long long __rpc_info, void *__buf, int whence, unsigned long long file_id, long long offset);


extern int __actvcapcall_drvcall_devhost_fops_llseek(rref_t __rref, unsigned long long __rpc_info, void *__buf, int whence, unsigned long long file_id, long long offset);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_llseek(bool is_xact_fwd, bool is_xact_allow_refwd, int whence, unsigned long long file_id, long long offset, struct __actvret_drvcall_devhost_fops_llseek *__ret)
{
	const unsigned long __callno = __devhost_method_fops_llseek;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long long), __arch_actv_rpc_stksz_alignment(long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_llseek(rpc_info, __ret, whence, file_id, offset);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_llseek(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int whence, unsigned long long file_id, long long offset, struct __actvret_drvcall_devhost_fops_llseek *__ret)
{
	const unsigned long __callno = __devhost_method_fops_llseek;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long long), __arch_actv_rpc_stksz_alignment(long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_llseek(__rref, rpc_info, __ret, whence, file_id, offset);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_llseek(int whence, unsigned long long file_id, long long offset, struct __actvret_drvcall_devhost_fops_llseek *__ret)
{
	return actvxactcall_drvcall_devhost_fops_llseek(false, false, whence, file_id, offset, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_llseek(rref_t __rref, int whence, unsigned long long file_id, long long offset, struct __actvret_drvcall_devhost_fops_llseek *__ret)
{
	return actvxactcapcall_drvcall_devhost_fops_llseek(false, false, __rref, whence, file_id, offset, __ret);
}

extern int __actvcall_drvcall_devhost_fops_mmap(unsigned long long __rpc_info, void *__buf, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);


extern int __actvcapcall_drvcall_devhost_fops_mmap(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_mmap(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset, struct __actvret_drvcall_devhost_fops_mmap *__ret)
{
	const unsigned long __callno = __devhost_method_fops_mmap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_mmap(rpc_info, __ret, addr, file_id, vspace_rref, length, prot, flags, offset);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_mmap(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset, struct __actvret_drvcall_devhost_fops_mmap *__ret)
{
	const unsigned long __callno = __devhost_method_fops_mmap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_mmap(__rref, rpc_info, __ret, addr, file_id, vspace_rref, length, prot, flags, offset);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_mmap(unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset, struct __actvret_drvcall_devhost_fops_mmap *__ret)
{
	return actvxactcall_drvcall_devhost_fops_mmap(false, false, addr, file_id, vspace_rref, length, prot, flags, offset, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_mmap(rref_t __rref, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset, struct __actvret_drvcall_devhost_fops_mmap *__ret)
{
	return actvxactcapcall_drvcall_devhost_fops_mmap(false, false, __rref, addr, file_id, vspace_rref, length, prot, flags, offset, __ret);
}

extern int __actvcall_drvcall_devhost_fops_munmap(unsigned long long __rpc_info, void *__buf, unsigned int key, unsigned long len);


extern int __actvcapcall_drvcall_devhost_fops_munmap(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int key, unsigned long len);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_munmap(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int key, unsigned long len)
{
	const unsigned long __callno = __devhost_method_fops_munmap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_munmap(rpc_info, NULL, key, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_munmap(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int key, unsigned long len)
{
	const unsigned long __callno = __devhost_method_fops_munmap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_munmap(__rref, rpc_info, NULL, key, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_munmap(unsigned int key, unsigned long len)
{
	return actvxactcall_drvcall_devhost_fops_munmap(false, false, key, len);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_munmap(rref_t __rref, unsigned int key, unsigned long len)
{
	return actvxactcapcall_drvcall_devhost_fops_munmap(false, false, __rref, key, len);
}

extern int __actvcall_drvcall_devhost_fops_sysfs_read(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_drvcall_devhost_fops_sysfs_read(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_sysfs_read(bool is_xact_fwd, bool is_xact_allow_refwd, void *___void_buf, unsigned long ___void_buf_sz)
{
	const unsigned long __callno = __devhost_method_fops_sysfs_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, ___void_buf_sz, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_sysfs_read(rpc_info, ___void_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_sysfs_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, void *___void_buf, unsigned long ___void_buf_sz)
{
	const unsigned long __callno = __devhost_method_fops_sysfs_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, ___void_buf_sz, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_sysfs_read(__rref, rpc_info, ___void_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_sysfs_read(void *___void_buf, unsigned long ___void_buf_sz)
{
	return actvxactcall_drvcall_devhost_fops_sysfs_read(false, false, ___void_buf, ___void_buf_sz);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_sysfs_read(rref_t __rref, void *___void_buf, unsigned long ___void_buf_sz)
{
	return actvxactcapcall_drvcall_devhost_fops_sysfs_read(false, false, __rref, ___void_buf, ___void_buf_sz);
}

extern int __actvcall_drvcall_devhost_fops_sysfs_write(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_drvcall_devhost_fops_sysfs_write(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_sysfs_write(bool is_xact_fwd, bool is_xact_allow_refwd, void *___void_buf, unsigned long ___void_buf_sz)
{
	const unsigned long __callno = __devhost_method_fops_sysfs_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, ___void_buf_sz, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_sysfs_write(rpc_info, ___void_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_sysfs_write(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, void *___void_buf, unsigned long ___void_buf_sz)
{
	const unsigned long __callno = __devhost_method_fops_sysfs_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, ___void_buf_sz, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_sysfs_write(__rref, rpc_info, ___void_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_sysfs_write(void *___void_buf, unsigned long ___void_buf_sz)
{
	return actvxactcall_drvcall_devhost_fops_sysfs_write(false, false, ___void_buf, ___void_buf_sz);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_sysfs_write(rref_t __rref, void *___void_buf, unsigned long ___void_buf_sz)
{
	return actvxactcapcall_drvcall_devhost_fops_sysfs_write(false, false, __rref, ___void_buf, ___void_buf_sz);
}

extern int __actvcall_drvcall_devhost_fops_epoll_ctl(unsigned long long __rpc_info, void *__buf, unsigned long long file_id, int fd, int op, const void *reg_info);


extern int __actvcapcall_drvcall_devhost_fops_epoll_ctl(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long file_id, int fd, int op, const void *reg_info);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_epoll_ctl(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long file_id, int fd, int op, const void *reg_info)
{
	const unsigned long __callno = __devhost_method_fops_epoll_ctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_epoll_ctl(rpc_info, NULL, file_id, fd, op, reg_info);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_epoll_ctl(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long file_id, int fd, int op, const void *reg_info)
{
	const unsigned long __callno = __devhost_method_fops_epoll_ctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_epoll_ctl(__rref, rpc_info, NULL, file_id, fd, op, reg_info);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_epoll_ctl(unsigned long long file_id, int fd, int op, const void *reg_info)
{
	return actvxactcall_drvcall_devhost_fops_epoll_ctl(false, false, file_id, fd, op, reg_info);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_epoll_ctl(rref_t __rref, unsigned long long file_id, int fd, int op, const void *reg_info)
{
	return actvxactcapcall_drvcall_devhost_fops_epoll_ctl(false, false, __rref, file_id, fd, op, reg_info);
}

extern int __actvcall_drvcall_devhost_fops_epoll_close(unsigned long long __rpc_info, void *__buf, unsigned int app_cnode_idx, unsigned long long file_id, int fd);


extern int __actvcapcall_drvcall_devhost_fops_epoll_close(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int app_cnode_idx, unsigned long long file_id, int fd);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_epoll_close(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int app_cnode_idx, unsigned long long file_id, int fd)
{
	const unsigned long __callno = __devhost_method_fops_epoll_close;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_epoll_close(rpc_info, NULL, app_cnode_idx, file_id, fd);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_epoll_close(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int app_cnode_idx, unsigned long long file_id, int fd)
{
	const unsigned long __callno = __devhost_method_fops_epoll_close;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_epoll_close(__rref, rpc_info, NULL, app_cnode_idx, file_id, fd);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_epoll_close(unsigned int app_cnode_idx, unsigned long long file_id, int fd)
{
	return actvxactcall_drvcall_devhost_fops_epoll_close(false, false, app_cnode_idx, file_id, fd);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_epoll_close(rref_t __rref, unsigned int app_cnode_idx, unsigned long long file_id, int fd)
{
	return actvxactcapcall_drvcall_devhost_fops_epoll_close(false, false, __rref, app_cnode_idx, file_id, fd);
}

extern int __actvcall_drvcall_devhost_fops_epoll_et(unsigned long long __rpc_info, void *__buf, unsigned long long file_id, const void *pre_info);


extern int __actvcapcall_drvcall_devhost_fops_epoll_et(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long file_id, const void *pre_info);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_epoll_et(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long file_id, const void *pre_info, struct __actvret_drvcall_devhost_fops_epoll_et *__ret)
{
	const unsigned long __callno = __devhost_method_fops_epoll_et;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_epoll_et(rpc_info, __ret, file_id, pre_info);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_epoll_et(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long file_id, const void *pre_info, struct __actvret_drvcall_devhost_fops_epoll_et *__ret)
{
	const unsigned long __callno = __devhost_method_fops_epoll_et;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_epoll_et(__rref, rpc_info, __ret, file_id, pre_info);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_epoll_et(unsigned long long file_id, const void *pre_info, struct __actvret_drvcall_devhost_fops_epoll_et *__ret)
{
	return actvxactcall_drvcall_devhost_fops_epoll_et(false, false, file_id, pre_info, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_epoll_et(rref_t __rref, unsigned long long file_id, const void *pre_info, struct __actvret_drvcall_devhost_fops_epoll_et *__ret)
{
	return actvxactcapcall_drvcall_devhost_fops_epoll_et(false, false, __rref, file_id, pre_info, __ret);
}

extern int __actvcall_drvcall_devhost_fops_epoll_reinit_add(unsigned long long __rpc_info, void *__buf, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);


extern int __actvcapcall_drvcall_devhost_fops_epoll_reinit_add(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_fops_epoll_reinit_add(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info)
{
	const unsigned long __callno = __devhost_method_fops_epoll_reinit_add;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_fops_epoll_reinit_add(rpc_info, NULL, file_id, fd, pre_reg_info, reg_info);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_fops_epoll_reinit_add(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info)
{
	const unsigned long __callno = __devhost_method_fops_epoll_reinit_add;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_fops_epoll_reinit_add(__rref, rpc_info, NULL, file_id, fd, pre_reg_info, reg_info);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_fops_epoll_reinit_add(unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info)
{
	return actvxactcall_drvcall_devhost_fops_epoll_reinit_add(false, false, file_id, fd, pre_reg_info, reg_info);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_fops_epoll_reinit_add(rref_t __rref, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info)
{
	return actvxactcapcall_drvcall_devhost_fops_epoll_reinit_add(false, false, __rref, file_id, fd, pre_reg_info, reg_info);
}

extern int __actvcall_drvcall_devhost_block_check_feature(unsigned long long __rpc_info, void *__buf, int idx, unsigned long long file_id, unsigned long long features);


extern int __actvcapcall_drvcall_devhost_block_check_feature(rref_t __rref, unsigned long long __rpc_info, void *__buf, int idx, unsigned long long file_id, unsigned long long features);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_block_check_feature(bool is_xact_fwd, bool is_xact_allow_refwd, int idx, unsigned long long file_id, unsigned long long features, struct __actvret_drvcall_devhost_block_check_feature *__ret)
{
	const unsigned long __callno = __devhost_method_block_check_feature;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_block_check_feature(rpc_info, __ret, idx, file_id, features);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_block_check_feature(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int idx, unsigned long long file_id, unsigned long long features, struct __actvret_drvcall_devhost_block_check_feature *__ret)
{
	const unsigned long __callno = __devhost_method_block_check_feature;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_block_check_feature(__rref, rpc_info, __ret, idx, file_id, features);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_block_check_feature(int idx, unsigned long long file_id, unsigned long long features, struct __actvret_drvcall_devhost_block_check_feature *__ret)
{
	return actvxactcall_drvcall_devhost_block_check_feature(false, false, idx, file_id, features, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_block_check_feature(rref_t __rref, int idx, unsigned long long file_id, unsigned long long features, struct __actvret_drvcall_devhost_block_check_feature *__ret)
{
	return actvxactcapcall_drvcall_devhost_block_check_feature(false, false, __rref, idx, file_id, features, __ret);
}

extern int __actvcall_drvcall_devhost_block_run_queue(unsigned long long __rpc_info, void *__buf, unsigned long file_id, unsigned int flags, unsigned int idx);


extern int __actvcapcall_drvcall_devhost_block_run_queue(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long file_id, unsigned int flags, unsigned int idx);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_block_run_queue(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long file_id, unsigned int flags, unsigned int idx)
{
	const unsigned long __callno = __devhost_method_block_run_queue;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_block_run_queue(rpc_info, NULL, file_id, flags, idx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_block_run_queue(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long file_id, unsigned int flags, unsigned int idx)
{
	const unsigned long __callno = __devhost_method_block_run_queue;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_block_run_queue(__rref, rpc_info, NULL, file_id, flags, idx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_block_run_queue(unsigned long file_id, unsigned int flags, unsigned int idx)
{
	return actvxactcall_drvcall_devhost_block_run_queue(false, false, file_id, flags, idx);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_block_run_queue(rref_t __rref, unsigned long file_id, unsigned int flags, unsigned int idx)
{
	return actvxactcapcall_drvcall_devhost_block_run_queue(false, false, __rref, file_id, flags, idx);
}

extern int __actvcall_drvcall_devhost_block_direct_access(unsigned long long __rpc_info, void *__buf, unsigned long file_id, unsigned long offset, unsigned long size);


extern int __actvcapcall_drvcall_devhost_block_direct_access(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long file_id, unsigned long offset, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_block_direct_access(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long file_id, unsigned long offset, unsigned long size, struct __actvret_drvcall_devhost_block_direct_access *__ret)
{
	const unsigned long __callno = __devhost_method_block_direct_access;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_block_direct_access(rpc_info, __ret, file_id, offset, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_block_direct_access(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long file_id, unsigned long offset, unsigned long size, struct __actvret_drvcall_devhost_block_direct_access *__ret)
{
	const unsigned long __callno = __devhost_method_block_direct_access;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_block_direct_access(__rref, rpc_info, __ret, file_id, offset, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_block_direct_access(unsigned long file_id, unsigned long offset, unsigned long size, struct __actvret_drvcall_devhost_block_direct_access *__ret)
{
	return actvxactcall_drvcall_devhost_block_direct_access(false, false, file_id, offset, size, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_block_direct_access(rref_t __rref, unsigned long file_id, unsigned long offset, unsigned long size, struct __actvret_drvcall_devhost_block_direct_access *__ret)
{
	return actvxactcapcall_drvcall_devhost_block_direct_access(false, false, __rref, file_id, offset, size, __ret);
}

extern int __actvcall_drvcall_devhost_block_register_bio_notify(unsigned long long __rpc_info, void *__buf, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);


extern int __actvcapcall_drvcall_devhost_block_register_bio_notify(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_block_register_bio_notify(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size, struct __actvret_drvcall_devhost_block_register_bio_notify *__ret)
{
	const unsigned long __callno = __devhost_method_block_register_bio_notify;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uref_t), __arch_actv_rpc_stksz_alignment(uref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_block_register_bio_notify(rpc_info, __ret, file_id, uref, method, bd_shm_size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_block_register_bio_notify(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size, struct __actvret_drvcall_devhost_block_register_bio_notify *__ret)
{
	const unsigned long __callno = __devhost_method_block_register_bio_notify;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uref_t), __arch_actv_rpc_stksz_alignment(uref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_block_register_bio_notify(__rref, rpc_info, __ret, file_id, uref, method, bd_shm_size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_block_register_bio_notify(unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size, struct __actvret_drvcall_devhost_block_register_bio_notify *__ret)
{
	return actvxactcall_drvcall_devhost_block_register_bio_notify(false, false, file_id, uref, method, bd_shm_size, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_block_register_bio_notify(rref_t __rref, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size, struct __actvret_drvcall_devhost_block_register_bio_notify *__ret)
{
	return actvxactcapcall_drvcall_devhost_block_register_bio_notify(false, false, __rref, file_id, uref, method, bd_shm_size, __ret);
}

extern int __actvcall_drvcall_devhost_net_send(unsigned long long __rpc_info, void *__buf, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);


extern int __actvcapcall_drvcall_devhost_net_send(rref_t __rref, unsigned long long __rpc_info, void *__buf, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_net_send(bool is_xact_fwd, bool is_xact_allow_refwd, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags)
{
	const unsigned long __callno = __devhost_method_net_send;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_net_send(rpc_info, NULL, ifindex, offset, size, payload_len, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_net_send(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags)
{
	const unsigned long __callno = __devhost_method_net_send;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_net_send(__rref, rpc_info, NULL, ifindex, offset, size, payload_len, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_net_send(int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags)
{
	return actvxactcall_drvcall_devhost_net_send(false, false, ifindex, offset, size, payload_len, flags);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_net_send(rref_t __rref, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags)
{
	return actvxactcapcall_drvcall_devhost_net_send(false, false, __rref, ifindex, offset, size, payload_len, flags);
}

extern int __actvcall_drvcall_devhost_net_ioctl(unsigned long long __rpc_info, void *__buf, int ifindex, int request, unsigned long args);


extern int __actvcapcall_drvcall_devhost_net_ioctl(rref_t __rref, unsigned long long __rpc_info, void *__buf, int ifindex, int request, unsigned long args);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_net_ioctl(bool is_xact_fwd, bool is_xact_allow_refwd, int ifindex, int request, unsigned long args)
{
	const unsigned long __callno = __devhost_method_net_ioctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_net_ioctl(rpc_info, NULL, ifindex, request, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_net_ioctl(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int ifindex, int request, unsigned long args)
{
	const unsigned long __callno = __devhost_method_net_ioctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_net_ioctl(__rref, rpc_info, NULL, ifindex, request, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_net_ioctl(int ifindex, int request, unsigned long args)
{
	return actvxactcall_drvcall_devhost_net_ioctl(false, false, ifindex, request, args);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_net_ioctl(rref_t __rref, int ifindex, int request, unsigned long args)
{
	return actvxactcapcall_drvcall_devhost_net_ioctl(false, false, __rref, ifindex, request, args);
}

extern int __actvcall_drvcall_devhost_net_status(unsigned long long __rpc_info, void *__buf, int ifindex);


extern int __actvcapcall_drvcall_devhost_net_status(rref_t __rref, unsigned long long __rpc_info, void *__buf, int ifindex);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_net_status(bool is_xact_fwd, bool is_xact_allow_refwd, int ifindex, struct __actvret_drvcall_devhost_net_status *__ret)
{
	const unsigned long __callno = __devhost_method_net_status;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_net_status(rpc_info, __ret, ifindex);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_net_status(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int ifindex, struct __actvret_drvcall_devhost_net_status *__ret)
{
	const unsigned long __callno = __devhost_method_net_status;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_net_status(__rref, rpc_info, __ret, ifindex);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_net_status(int ifindex, struct __actvret_drvcall_devhost_net_status *__ret)
{
	return actvxactcall_drvcall_devhost_net_status(false, false, ifindex, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_net_status(rref_t __rref, int ifindex, struct __actvret_drvcall_devhost_net_status *__ret)
{
	return actvxactcapcall_drvcall_devhost_net_status(false, false, __rref, ifindex, __ret);
}

extern int __actvcall_drvcall_devhost_net_prepare(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_drvcall_devhost_net_prepare(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_net_prepare(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_drvcall_devhost_net_prepare *__ret)
{
	const unsigned long __callno = __devhost_method_net_prepare;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_net_prepare(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_net_prepare(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_drvcall_devhost_net_prepare *__ret)
{
	const unsigned long __callno = __devhost_method_net_prepare;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_net_prepare(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_net_prepare(struct __actvret_drvcall_devhost_net_prepare *__ret)
{
	return actvxactcall_drvcall_devhost_net_prepare(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_net_prepare(rref_t __rref, struct __actvret_drvcall_devhost_net_prepare *__ret)
{
	return actvxactcapcall_drvcall_devhost_net_prepare(false, false, __rref, __ret);
}

extern int __actvcall_drvcall_devhost_net_init(unsigned long long __rpc_info, void *__buf, int ifindex, rref_t tgt_rref);


extern int __actvcapcall_drvcall_devhost_net_init(rref_t __rref, unsigned long long __rpc_info, void *__buf, int ifindex, rref_t tgt_rref);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_net_init(bool is_xact_fwd, bool is_xact_allow_refwd, int ifindex, rref_t tgt_rref)
{
	const unsigned long __callno = __devhost_method_net_init;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_net_init(rpc_info, NULL, ifindex, tgt_rref);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_net_init(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int ifindex, rref_t tgt_rref)
{
	const unsigned long __callno = __devhost_method_net_init;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_net_init(__rref, rpc_info, NULL, ifindex, tgt_rref);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_net_init(int ifindex, rref_t tgt_rref)
{
	return actvxactcall_drvcall_devhost_net_init(false, false, ifindex, tgt_rref);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_net_init(rref_t __rref, int ifindex, rref_t tgt_rref)
{
	return actvxactcapcall_drvcall_devhost_net_init(false, false, __rref, ifindex, tgt_rref);
}

extern int __actvcall_drvcall_devhost_net_netlink_recv(unsigned long long __rpc_info, void *__buf, int protocol, unsigned int src_portid);


extern int __actvcapcall_drvcall_devhost_net_netlink_recv(rref_t __rref, unsigned long long __rpc_info, void *__buf, int protocol, unsigned int src_portid);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_net_netlink_recv(bool is_xact_fwd, bool is_xact_allow_refwd, int protocol, unsigned int src_portid, void *___void_buf, unsigned long ___void_buf_sz)
{
	const unsigned long __callno = __devhost_method_net_netlink_recv;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, ___void_buf_sz, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_net_netlink_recv(rpc_info, ___void_buf, protocol, src_portid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_net_netlink_recv(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int protocol, unsigned int src_portid, void *___void_buf, unsigned long ___void_buf_sz)
{
	const unsigned long __callno = __devhost_method_net_netlink_recv;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, ___void_buf_sz, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_net_netlink_recv(__rref, rpc_info, ___void_buf, protocol, src_portid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_net_netlink_recv(int protocol, unsigned int src_portid, void *___void_buf, unsigned long ___void_buf_sz)
{
	return actvxactcall_drvcall_devhost_net_netlink_recv(false, false, protocol, src_portid, ___void_buf, ___void_buf_sz);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_net_netlink_recv(rref_t __rref, int protocol, unsigned int src_portid, void *___void_buf, unsigned long ___void_buf_sz)
{
	return actvxactcapcall_drvcall_devhost_net_netlink_recv(false, false, __rref, protocol, src_portid, ___void_buf, ___void_buf_sz);
}

extern int __actvcall_drvcall_devhost_pm_action(unsigned long long __rpc_info, void *__buf, unsigned int action);


extern int __actvcapcall_drvcall_devhost_pm_action(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int action);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_pm_action(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int action)
{
	const unsigned long __callno = __devhost_method_pm_action;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_pm_action(rpc_info, NULL, action);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_pm_action(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int action)
{
	const unsigned long __callno = __devhost_method_pm_action;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_pm_action(__rref, rpc_info, NULL, action);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_pm_action(unsigned int action)
{
	return actvxactcall_drvcall_devhost_pm_action(false, false, action);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_pm_action(rref_t __rref, unsigned int action)
{
	return actvxactcapcall_drvcall_devhost_pm_action(false, false, __rref, action);
}

extern int __actvcall_drvcall_devhost_pm_prepare(unsigned long long __rpc_info, void *__buf, unsigned int type, struct reboot_cmd cmd);


extern int __actvcapcall_drvcall_devhost_pm_prepare(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int type, struct reboot_cmd cmd);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_pm_prepare(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int type, struct reboot_cmd cmd)
{
	const unsigned long __callno = __devhost_method_pm_prepare;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct reboot_cmd), __arch_actv_rpc_stksz_alignment(struct reboot_cmd));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_pm_prepare(rpc_info, NULL, type, cmd);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_pm_prepare(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int type, struct reboot_cmd cmd)
{
	const unsigned long __callno = __devhost_method_pm_prepare;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct reboot_cmd), __arch_actv_rpc_stksz_alignment(struct reboot_cmd));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_pm_prepare(__rref, rpc_info, NULL, type, cmd);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_pm_prepare(unsigned int type, struct reboot_cmd cmd)
{
	return actvxactcall_drvcall_devhost_pm_prepare(false, false, type, cmd);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_pm_prepare(rref_t __rref, unsigned int type, struct reboot_cmd cmd)
{
	return actvxactcapcall_drvcall_devhost_pm_prepare(false, false, __rref, type, cmd);
}

extern int __actvcall_drvcall_devhost_pm_power_off(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_drvcall_devhost_pm_power_off(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_pm_power_off(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __devhost_method_pm_power_off;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_pm_power_off(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_pm_power_off(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __devhost_method_pm_power_off;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_pm_power_off(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_pm_power_off(void)
{
	return actvxactcall_drvcall_devhost_pm_power_off(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_pm_power_off(rref_t __rref)
{
	return actvxactcapcall_drvcall_devhost_pm_power_off(false, false, __rref);
}

extern int __actvcall_drvcall_devhost_pm_reboot(unsigned long long __rpc_info, void *__buf, struct reboot_cmd cmd);


extern int __actvcapcall_drvcall_devhost_pm_reboot(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct reboot_cmd cmd);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_pm_reboot(bool is_xact_fwd, bool is_xact_allow_refwd, struct reboot_cmd cmd)
{
	const unsigned long __callno = __devhost_method_pm_reboot;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct reboot_cmd), __arch_actv_rpc_stksz_alignment(struct reboot_cmd));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_pm_reboot(rpc_info, NULL, cmd);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_pm_reboot(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct reboot_cmd cmd)
{
	const unsigned long __callno = __devhost_method_pm_reboot;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct reboot_cmd), __arch_actv_rpc_stksz_alignment(struct reboot_cmd));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_pm_reboot(__rref, rpc_info, NULL, cmd);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_pm_reboot(struct reboot_cmd cmd)
{
	return actvxactcall_drvcall_devhost_pm_reboot(false, false, cmd);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_pm_reboot(rref_t __rref, struct reboot_cmd cmd)
{
	return actvxactcapcall_drvcall_devhost_pm_reboot(false, false, __rref, cmd);
}

extern int __actvcall_drvcall_devhost_pm_cpuhp_action(unsigned long long __rpc_info, void *__buf, unsigned int cpu, unsigned int action);


extern int __actvcapcall_drvcall_devhost_pm_cpuhp_action(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int cpu, unsigned int action);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_pm_cpuhp_action(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int cpu, unsigned int action)
{
	const unsigned long __callno = __devhost_method_pm_cpuhp_action;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_pm_cpuhp_action(rpc_info, NULL, cpu, action);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_pm_cpuhp_action(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int cpu, unsigned int action)
{
	const unsigned long __callno = __devhost_method_pm_cpuhp_action;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_pm_cpuhp_action(__rref, rpc_info, NULL, cpu, action);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_pm_cpuhp_action(unsigned int cpu, unsigned int action)
{
	return actvxactcall_drvcall_devhost_pm_cpuhp_action(false, false, cpu, action);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_pm_cpuhp_action(rref_t __rref, unsigned int cpu, unsigned int action)
{
	return actvxactcapcall_drvcall_devhost_pm_cpuhp_action(false, false, __rref, cpu, action);
}

extern int __actvcall_drvcall_devhost_procfs_read(unsigned long long __rpc_info, void *__buf, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


extern int __actvcapcall_drvcall_devhost_procfs_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_procfs_read(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_procfs_read *__ret)
{
	const unsigned long __callno = __devhost_method_procfs_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_procfs_read(rpc_info, __ret, tagid, pos, ubuf, ctx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_procfs_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_procfs_read *__ret)
{
	const unsigned long __callno = __devhost_method_procfs_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_procfs_read(__rref, rpc_info, __ret, tagid, pos, ubuf, ctx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_procfs_read(unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_procfs_read *__ret)
{
	return actvxactcall_drvcall_devhost_procfs_read(false, false, tagid, pos, ubuf, ctx, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_procfs_read(rref_t __rref, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_procfs_read *__ret)
{
	return actvxactcapcall_drvcall_devhost_procfs_read(false, false, __rref, tagid, pos, ubuf, ctx, __ret);
}

extern int __actvcall_drvcall_devhost_procfs_write(unsigned long long __rpc_info, void *__buf, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


extern int __actvcapcall_drvcall_devhost_procfs_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_procfs_write(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_procfs_write *__ret)
{
	const unsigned long __callno = __devhost_method_procfs_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_procfs_write(rpc_info, __ret, tagid, pos, ubuf, ctx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_procfs_write(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_procfs_write *__ret)
{
	const unsigned long __callno = __devhost_method_procfs_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_procfs_write(__rref, rpc_info, __ret, tagid, pos, ubuf, ctx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_procfs_write(unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_procfs_write *__ret)
{
	return actvxactcall_drvcall_devhost_procfs_write(false, false, tagid, pos, ubuf, ctx, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_procfs_write(rref_t __rref, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_procfs_write *__ret)
{
	return actvxactcapcall_drvcall_devhost_procfs_write(false, false, __rref, tagid, pos, ubuf, ctx, __ret);
}

extern int __actvcall_drvcall_devhost_sysfs_read(unsigned long long __rpc_info, void *__buf, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


extern int __actvcapcall_drvcall_devhost_sysfs_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_sysfs_read(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_sysfs_read *__ret)
{
	const unsigned long __callno = __devhost_method_sysfs_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_sysfs_read(rpc_info, __ret, tagid, pos, ubuf, ctx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_sysfs_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_sysfs_read *__ret)
{
	const unsigned long __callno = __devhost_method_sysfs_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_sysfs_read(__rref, rpc_info, __ret, tagid, pos, ubuf, ctx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_sysfs_read(unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_sysfs_read *__ret)
{
	return actvxactcall_drvcall_devhost_sysfs_read(false, false, tagid, pos, ubuf, ctx, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_sysfs_read(rref_t __rref, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_sysfs_read *__ret)
{
	return actvxactcapcall_drvcall_devhost_sysfs_read(false, false, __rref, tagid, pos, ubuf, ctx, __ret);
}

extern int __actvcall_drvcall_devhost_sysfs_write(unsigned long long __rpc_info, void *__buf, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


extern int __actvcapcall_drvcall_devhost_sysfs_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_sysfs_write(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_sysfs_write *__ret)
{
	const unsigned long __callno = __devhost_method_sysfs_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_sysfs_write(rpc_info, __ret, tagid, pos, ubuf, ctx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_sysfs_write(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_sysfs_write *__ret)
{
	const unsigned long __callno = __devhost_method_sysfs_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_sysfs_write(__rref, rpc_info, __ret, tagid, pos, ubuf, ctx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_sysfs_write(unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_sysfs_write *__ret)
{
	return actvxactcall_drvcall_devhost_sysfs_write(false, false, tagid, pos, ubuf, ctx, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_sysfs_write(rref_t __rref, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx, struct __actvret_drvcall_devhost_sysfs_write *__ret)
{
	return actvxactcapcall_drvcall_devhost_sysfs_write(false, false, __rref, tagid, pos, ubuf, ctx, __ret);
}

extern int __actvcall_drvcall_devhost_sysfs_poll(unsigned long long __rpc_info, void *__buf, unsigned int tagid, uintptr_t ctx, bool pollable);


extern int __actvcapcall_drvcall_devhost_sysfs_poll(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int tagid, uintptr_t ctx, bool pollable);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_sysfs_poll(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int tagid, uintptr_t ctx, bool pollable)
{
	const unsigned long __callno = __devhost_method_sysfs_poll;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_sysfs_poll(rpc_info, NULL, tagid, ctx, pollable);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_sysfs_poll(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int tagid, uintptr_t ctx, bool pollable)
{
	const unsigned long __callno = __devhost_method_sysfs_poll;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_sysfs_poll(__rref, rpc_info, NULL, tagid, ctx, pollable);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_sysfs_poll(unsigned int tagid, uintptr_t ctx, bool pollable)
{
	return actvxactcall_drvcall_devhost_sysfs_poll(false, false, tagid, ctx, pollable);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_sysfs_poll(rref_t __rref, unsigned int tagid, uintptr_t ctx, bool pollable)
{
	return actvxactcapcall_drvcall_devhost_sysfs_poll(false, false, __rref, tagid, ctx, pollable);
}

extern int __actvcall_drvcall_devhost_clock_settime(unsigned long long __rpc_info, void *__buf, unsigned long tp, unsigned long long file_id);


extern int __actvcapcall_drvcall_devhost_clock_settime(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long tp, unsigned long long file_id);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_clock_settime(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long tp, unsigned long long file_id)
{
	const unsigned long __callno = __devhost_method_clock_settime;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_clock_settime(rpc_info, NULL, tp, file_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_clock_settime(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long tp, unsigned long long file_id)
{
	const unsigned long __callno = __devhost_method_clock_settime;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_clock_settime(__rref, rpc_info, NULL, tp, file_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_clock_settime(unsigned long tp, unsigned long long file_id)
{
	return actvxactcall_drvcall_devhost_clock_settime(false, false, tp, file_id);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_clock_settime(rref_t __rref, unsigned long tp, unsigned long long file_id)
{
	return actvxactcapcall_drvcall_devhost_clock_settime(false, false, __rref, tp, file_id);
}

extern int __actvcall_drvcall_devhost_clock_gettime(unsigned long long __rpc_info, void *__buf, unsigned long tp, unsigned long long file_id);


extern int __actvcapcall_drvcall_devhost_clock_gettime(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long tp, unsigned long long file_id);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_clock_gettime(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long tp, unsigned long long file_id)
{
	const unsigned long __callno = __devhost_method_clock_gettime;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_clock_gettime(rpc_info, NULL, tp, file_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_clock_gettime(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long tp, unsigned long long file_id)
{
	const unsigned long __callno = __devhost_method_clock_gettime;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_clock_gettime(__rref, rpc_info, NULL, tp, file_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_clock_gettime(unsigned long tp, unsigned long long file_id)
{
	return actvxactcall_drvcall_devhost_clock_gettime(false, false, tp, file_id);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_clock_gettime(rref_t __rref, unsigned long tp, unsigned long long file_id)
{
	return actvxactcapcall_drvcall_devhost_clock_gettime(false, false, __rref, tp, file_id);
}

extern int __actvcall_drvcall_devhost_clock_getres(unsigned long long __rpc_info, void *__buf, unsigned long tp, unsigned long long file_id);


extern int __actvcapcall_drvcall_devhost_clock_getres(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long tp, unsigned long long file_id);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_clock_getres(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long tp, unsigned long long file_id)
{
	const unsigned long __callno = __devhost_method_clock_getres;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_clock_getres(rpc_info, NULL, tp, file_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_clock_getres(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long tp, unsigned long long file_id)
{
	const unsigned long __callno = __devhost_method_clock_getres;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_clock_getres(__rref, rpc_info, NULL, tp, file_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_clock_getres(unsigned long tp, unsigned long long file_id)
{
	return actvxactcall_drvcall_devhost_clock_getres(false, false, tp, file_id);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_clock_getres(rref_t __rref, unsigned long tp, unsigned long long file_id)
{
	return actvxactcapcall_drvcall_devhost_clock_getres(false, false, __rref, tp, file_id);
}

extern int __actvcall_drvcall_devhost_clock_adjtime(unsigned long long __rpc_info, void *__buf, unsigned long tx, unsigned long long file_id);


extern int __actvcapcall_drvcall_devhost_clock_adjtime(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long tx, unsigned long long file_id);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_clock_adjtime(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long tx, unsigned long long file_id)
{
	const unsigned long __callno = __devhost_method_clock_adjtime;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_clock_adjtime(rpc_info, NULL, tx, file_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_clock_adjtime(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long tx, unsigned long long file_id)
{
	const unsigned long __callno = __devhost_method_clock_adjtime;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_clock_adjtime(__rref, rpc_info, NULL, tx, file_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_clock_adjtime(unsigned long tx, unsigned long long file_id)
{
	return actvxactcall_drvcall_devhost_clock_adjtime(false, false, tx, file_id);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_clock_adjtime(rref_t __rref, unsigned long tx, unsigned long long file_id)
{
	return actvxactcapcall_drvcall_devhost_clock_adjtime(false, false, __rref, tx, file_id);
}

extern int __actvcall_drvcall_devhost_transfs_mounted(unsigned long long __rpc_info, void *__buf, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);


extern int __actvcapcall_drvcall_devhost_transfs_mounted(rref_t __rref, unsigned long long __rpc_info, void *__buf, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_mounted(bool is_xact_fwd, bool is_xact_allow_refwd, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits, struct __actvret_drvcall_devhost_transfs_mounted *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_mounted;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(dev_t), __arch_actv_rpc_stksz_alignment(dev_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_mounted(rpc_info, __ret, dev_id, dev_mode, fs_name, mount_opts, per_write_size, sector_dentry_bits);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_mounted(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits, struct __actvret_drvcall_devhost_transfs_mounted *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_mounted;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(dev_t), __arch_actv_rpc_stksz_alignment(dev_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_mounted(__rref, rpc_info, __ret, dev_id, dev_mode, fs_name, mount_opts, per_write_size, sector_dentry_bits);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_mounted(dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits, struct __actvret_drvcall_devhost_transfs_mounted *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_mounted(false, false, dev_id, dev_mode, fs_name, mount_opts, per_write_size, sector_dentry_bits, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_mounted(rref_t __rref, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits, struct __actvret_drvcall_devhost_transfs_mounted *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_mounted(false, false, __rref, dev_id, dev_mode, fs_name, mount_opts, per_write_size, sector_dentry_bits, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_unmounted(unsigned long long __rpc_info, void *__buf, unsigned int s_index, int flags, unsigned long long file_id);


extern int __actvcapcall_drvcall_devhost_transfs_unmounted(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, int flags, unsigned long long file_id);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_unmounted(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, int flags, unsigned long long file_id)
{
	const unsigned long __callno = __devhost_method_transfs_unmounted;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_unmounted(rpc_info, NULL, s_index, flags, file_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_unmounted(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, int flags, unsigned long long file_id)
{
	const unsigned long __callno = __devhost_method_transfs_unmounted;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_unmounted(__rref, rpc_info, NULL, s_index, flags, file_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_unmounted(unsigned int s_index, int flags, unsigned long long file_id)
{
	return actvxactcall_drvcall_devhost_transfs_unmounted(false, false, s_index, flags, file_id);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_unmounted(rref_t __rref, unsigned int s_index, int flags, unsigned long long file_id)
{
	return actvxactcapcall_drvcall_devhost_transfs_unmounted(false, false, __rref, s_index, flags, file_id);
}

extern int __actvcall_drvcall_devhost_transfs_drop_caches(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int mode, int max_nr);


extern int __actvcapcall_drvcall_devhost_transfs_drop_caches(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int mode, int max_nr);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_drop_caches(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int mode, int max_nr)
{
	const unsigned long __callno = __devhost_method_transfs_drop_caches;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_drop_caches(rpc_info, NULL, s_index, mode, max_nr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_drop_caches(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int mode, int max_nr)
{
	const unsigned long __callno = __devhost_method_transfs_drop_caches;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_drop_caches(__rref, rpc_info, NULL, s_index, mode, max_nr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_drop_caches(unsigned int s_index, unsigned int mode, int max_nr)
{
	return actvxactcall_drvcall_devhost_transfs_drop_caches(false, false, s_index, mode, max_nr);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_drop_caches(rref_t __rref, unsigned int s_index, unsigned int mode, int max_nr)
{
	return actvxactcapcall_drvcall_devhost_transfs_drop_caches(false, false, __rref, s_index, mode, max_nr);
}

extern int __actvcall_drvcall_devhost_transfs_mkdir(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);


extern int __actvcapcall_drvcall_devhost_transfs_mkdir(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_mkdir(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_mkdir *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_mkdir;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_mkdir(rpc_info, __ret, s_index, pd_index, mode, actv_dname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_mkdir(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_mkdir *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_mkdir;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_mkdir(__rref, rpc_info, __ret, s_index, pd_index, mode, actv_dname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_mkdir(unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_mkdir *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_mkdir(false, false, s_index, pd_index, mode, actv_dname, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_mkdir(rref_t __rref, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_mkdir *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_mkdir(false, false, __rref, s_index, pd_index, mode, actv_dname, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_rmdir(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_index, unsigned int d_index);


extern int __actvcapcall_drvcall_devhost_transfs_rmdir(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_index, unsigned int d_index);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_rmdir(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	const unsigned long __callno = __devhost_method_transfs_rmdir;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_rmdir(rpc_info, NULL, s_index, pd_index, d_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_rmdir(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	const unsigned long __callno = __devhost_method_transfs_rmdir;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_rmdir(__rref, rpc_info, NULL, s_index, pd_index, d_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_rmdir(unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	return actvxactcall_drvcall_devhost_transfs_rmdir(false, false, s_index, pd_index, d_index);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_rmdir(rref_t __rref, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	return actvxactcapcall_drvcall_devhost_transfs_rmdir(false, false, __rref, s_index, pd_index, d_index);
}

extern int __actvcall_drvcall_devhost_transfs_create(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);


extern int __actvcapcall_drvcall_devhost_transfs_create(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_create(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_create *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_create;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_create(rpc_info, __ret, s_index, pd_index, mode, actv_dname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_create(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_create *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_create;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_create(__rref, rpc_info, __ret, s_index, pd_index, mode, actv_dname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_create(unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_create *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_create(false, false, s_index, pd_index, mode, actv_dname, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_create(rref_t __rref, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_create *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_create(false, false, __rref, s_index, pd_index, mode, actv_dname, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_unlink(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_index, unsigned int d_index);


extern int __actvcapcall_drvcall_devhost_transfs_unlink(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_index, unsigned int d_index);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_unlink(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	const unsigned long __callno = __devhost_method_transfs_unlink;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_unlink(rpc_info, NULL, s_index, pd_index, d_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_unlink(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	const unsigned long __callno = __devhost_method_transfs_unlink;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_unlink(__rref, rpc_info, NULL, s_index, pd_index, d_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_unlink(unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	return actvxactcall_drvcall_devhost_transfs_unlink(false, false, s_index, pd_index, d_index);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_unlink(rref_t __rref, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	return actvxactcapcall_drvcall_devhost_transfs_unlink(false, false, __rref, s_index, pd_index, d_index);
}

extern int __actvcall_drvcall_devhost_transfs_mknod(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);


extern int __actvcapcall_drvcall_devhost_transfs_mknod(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_mknod(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_mknod *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_mknod;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_mknod(rpc_info, __ret, s_index, pd_index, mode, devno, actv_dname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_mknod(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_mknod *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_mknod;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_mknod(__rref, rpc_info, __ret, s_index, pd_index, mode, devno, actv_dname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_mknod(unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_mknod *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_mknod(false, false, s_index, pd_index, mode, devno, actv_dname, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_mknod(rref_t __rref, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_mknod *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_mknod(false, false, __rref, s_index, pd_index, mode, devno, actv_dname, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_link(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);


extern int __actvcapcall_drvcall_devhost_transfs_link(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_link(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_link *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_link;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_link(rpc_info, __ret, s_index, old_d_index, new_pd_index, actv_dname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_link(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_link *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_link;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_link(__rref, rpc_info, __ret, s_index, old_d_index, new_pd_index, actv_dname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_link(unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_link *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_link(false, false, s_index, old_d_index, new_pd_index, actv_dname, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_link(rref_t __rref, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_link *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_link(false, false, __rref, s_index, old_d_index, new_pd_index, actv_dname, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_symlink(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);


extern int __actvcapcall_drvcall_devhost_transfs_symlink(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_symlink(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path, struct __actvret_drvcall_devhost_transfs_symlink *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_symlink;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_symlink(rpc_info, __ret, s_index, pd_index, actv_dname, actv_path);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_symlink(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path, struct __actvret_drvcall_devhost_transfs_symlink *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_symlink;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_symlink(__rref, rpc_info, __ret, s_index, pd_index, actv_dname, actv_path);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_symlink(unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path, struct __actvret_drvcall_devhost_transfs_symlink *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_symlink(false, false, s_index, pd_index, actv_dname, actv_path, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_symlink(rref_t __rref, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path, struct __actvret_drvcall_devhost_transfs_symlink *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_symlink(false, false, __rref, s_index, pd_index, actv_dname, actv_path, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_statfs(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int d_index, void *buf);


extern int __actvcapcall_drvcall_devhost_transfs_statfs(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int d_index, void *buf);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_statfs(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int d_index, void *buf)
{
	const unsigned long __callno = __devhost_method_transfs_statfs;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_statfs(rpc_info, NULL, s_index, d_index, buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_statfs(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int d_index, void *buf)
{
	const unsigned long __callno = __devhost_method_transfs_statfs;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_statfs(__rref, rpc_info, NULL, s_index, d_index, buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_statfs(unsigned int s_index, unsigned int d_index, void *buf)
{
	return actvxactcall_drvcall_devhost_transfs_statfs(false, false, s_index, d_index, buf);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_statfs(rref_t __rref, unsigned int s_index, unsigned int d_index, void *buf)
{
	return actvxactcapcall_drvcall_devhost_transfs_statfs(false, false, __rref, s_index, d_index, buf);
}

extern int __actvcall_drvcall_devhost_transfs_rename(unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);


extern int __actvcapcall_drvcall_devhost_transfs_rename(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_rename(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	const unsigned long __callno = __devhost_method_transfs_rename;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_rename(rpc_info, NULL, sb_index, old_pd_index, old_d_index, new_pd_index, actv_dname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_rename(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	const unsigned long __callno = __devhost_method_transfs_rename;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_rename(__rref, rpc_info, NULL, sb_index, old_pd_index, old_d_index, new_pd_index, actv_dname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_rename(unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	return actvxactcall_drvcall_devhost_transfs_rename(false, false, sb_index, old_pd_index, old_d_index, new_pd_index, actv_dname);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_rename(rref_t __rref, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	return actvxactcapcall_drvcall_devhost_transfs_rename(false, false, __rref, sb_index, old_pd_index, old_d_index, new_pd_index, actv_dname);
}

extern int __actvcall_drvcall_devhost_transfs_lookup(unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);


extern int __actvcapcall_drvcall_devhost_transfs_lookup(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_lookup(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta, struct __actvret_drvcall_devhost_transfs_lookup *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_lookup;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_lookup(rpc_info, __ret, sb_index, pd_index, actv_dname, meta);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_lookup(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta, struct __actvret_drvcall_devhost_transfs_lookup *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_lookup;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_lookup(__rref, rpc_info, __ret, sb_index, pd_index, actv_dname, meta);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_lookup(unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta, struct __actvret_drvcall_devhost_transfs_lookup *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_lookup(false, false, sb_index, pd_index, actv_dname, meta, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_lookup(rref_t __rref, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta, struct __actvret_drvcall_devhost_transfs_lookup *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_lookup(false, false, __rref, sb_index, pd_index, actv_dname, meta, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_setattr(unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);


extern int __actvcapcall_drvcall_devhost_transfs_setattr(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_setattr(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size)
{
	const unsigned long __callno = __devhost_method_transfs_setattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_setattr(rpc_info, NULL, sb_index, d_index, attr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_setattr(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size)
{
	const unsigned long __callno = __devhost_method_transfs_setattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_setattr(__rref, rpc_info, NULL, sb_index, d_index, attr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_setattr(unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size)
{
	return actvxactcall_drvcall_devhost_transfs_setattr(false, false, sb_index, d_index, attr, size);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_setattr(rref_t __rref, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size)
{
	return actvxactcapcall_drvcall_devhost_transfs_setattr(false, false, __rref, sb_index, d_index, attr, size);
}

extern int __actvcall_drvcall_devhost_transfs_readlink(unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);


extern int __actvcapcall_drvcall_devhost_transfs_readlink(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_readlink(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize)
{
	const unsigned long __callno = __devhost_method_transfs_readlink;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_readlink(rpc_info, NULL, sb_index, d_index, buf, bufsize);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_readlink(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize)
{
	const unsigned long __callno = __devhost_method_transfs_readlink;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_readlink(__rref, rpc_info, NULL, sb_index, d_index, buf, bufsize);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_readlink(unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize)
{
	return actvxactcall_drvcall_devhost_transfs_readlink(false, false, sb_index, d_index, buf, bufsize);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_readlink(rref_t __rref, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize)
{
	return actvxactcapcall_drvcall_devhost_transfs_readlink(false, false, __rref, sb_index, d_index, buf, bufsize);
}

extern int __actvcall_drvcall_devhost_transfs_getattr(unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int d_index, void *meta);


extern int __actvcapcall_drvcall_devhost_transfs_getattr(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int d_index, void *meta);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_getattr(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int sb_index, unsigned int d_index, void *meta)
{
	const unsigned long __callno = __devhost_method_transfs_getattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_getattr(rpc_info, NULL, sb_index, d_index, meta);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_getattr(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int sb_index, unsigned int d_index, void *meta)
{
	const unsigned long __callno = __devhost_method_transfs_getattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_getattr(__rref, rpc_info, NULL, sb_index, d_index, meta);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_getattr(unsigned int sb_index, unsigned int d_index, void *meta)
{
	return actvxactcall_drvcall_devhost_transfs_getattr(false, false, sb_index, d_index, meta);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_getattr(rref_t __rref, unsigned int sb_index, unsigned int d_index, void *meta)
{
	return actvxactcapcall_drvcall_devhost_transfs_getattr(false, false, __rref, sb_index, d_index, meta);
}

extern int __actvcall_drvcall_devhost_transfs_listxattr(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);


extern int __actvcapcall_drvcall_devhost_transfs_listxattr(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_listxattr(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int d_index, char *buffer, size_t size, struct __actvret_drvcall_devhost_transfs_listxattr *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_listxattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_listxattr(rpc_info, __ret, s_index, d_index, buffer, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_listxattr(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int d_index, char *buffer, size_t size, struct __actvret_drvcall_devhost_transfs_listxattr *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_listxattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_listxattr(__rref, rpc_info, __ret, s_index, d_index, buffer, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_listxattr(unsigned int s_index, unsigned int d_index, char *buffer, size_t size, struct __actvret_drvcall_devhost_transfs_listxattr *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_listxattr(false, false, s_index, d_index, buffer, size, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_listxattr(rref_t __rref, unsigned int s_index, unsigned int d_index, char *buffer, size_t size, struct __actvret_drvcall_devhost_transfs_listxattr *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_listxattr(false, false, __rref, s_index, d_index, buffer, size, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_getxattr(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);


extern int __actvcapcall_drvcall_devhost_transfs_getxattr(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_getxattr(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size, struct __actvret_drvcall_devhost_transfs_getxattr *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_getxattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_getxattr(rpc_info, __ret, s_index, d_index, prefix, actv_name, value, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_getxattr(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size, struct __actvret_drvcall_devhost_transfs_getxattr *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_getxattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_getxattr(__rref, rpc_info, __ret, s_index, d_index, prefix, actv_name, value, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_getxattr(unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size, struct __actvret_drvcall_devhost_transfs_getxattr *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_getxattr(false, false, s_index, d_index, prefix, actv_name, value, size, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_getxattr(rref_t __rref, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size, struct __actvret_drvcall_devhost_transfs_getxattr *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_getxattr(false, false, __rref, s_index, d_index, prefix, actv_name, value, size, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_setxattr(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);


extern int __actvcapcall_drvcall_devhost_transfs_setxattr(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_setxattr(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags)
{
	const unsigned long __callno = __devhost_method_transfs_setxattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_setxattr(rpc_info, NULL, s_index, d_index, prefix, actv_name, value, size, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_setxattr(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags)
{
	const unsigned long __callno = __devhost_method_transfs_setxattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_setxattr(__rref, rpc_info, NULL, s_index, d_index, prefix, actv_name, value, size, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_setxattr(unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags)
{
	return actvxactcall_drvcall_devhost_transfs_setxattr(false, false, s_index, d_index, prefix, actv_name, value, size, flags);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_setxattr(rref_t __rref, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags)
{
	return actvxactcapcall_drvcall_devhost_transfs_setxattr(false, false, __rref, s_index, d_index, prefix, actv_name, value, size, flags);
}

extern int __actvcall_drvcall_devhost_transfs_tmpfile(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);


extern int __actvcapcall_drvcall_devhost_transfs_tmpfile(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_tmpfile(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_tmpfile *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_tmpfile;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_tmpfile(rpc_info, __ret, s_index, pd_addr, mode, actv_dname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_tmpfile(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_tmpfile *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_tmpfile;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_tmpfile(__rref, rpc_info, __ret, s_index, pd_addr, mode, actv_dname);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_tmpfile(unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_tmpfile *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_tmpfile(false, false, s_index, pd_addr, mode, actv_dname, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_tmpfile(rref_t __rref, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname, struct __actvret_drvcall_devhost_transfs_tmpfile *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_tmpfile(false, false, __rref, s_index, pd_addr, mode, actv_dname, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_kill_dentry(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int d_index);


extern int __actvcapcall_drvcall_devhost_transfs_kill_dentry(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int d_index);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_kill_dentry(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int d_index)
{
	const unsigned long __callno = __devhost_method_transfs_kill_dentry;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_kill_dentry(rpc_info, NULL, s_index, d_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_kill_dentry(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int d_index)
{
	const unsigned long __callno = __devhost_method_transfs_kill_dentry;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_kill_dentry(__rref, rpc_info, NULL, s_index, d_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_kill_dentry(unsigned int s_index, unsigned int d_index)
{
	return actvxactcall_drvcall_devhost_transfs_kill_dentry(false, false, s_index, d_index);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_kill_dentry(rref_t __rref, unsigned int s_index, unsigned int d_index)
{
	return actvxactcapcall_drvcall_devhost_transfs_kill_dentry(false, false, __rref, s_index, d_index);
}

extern int __actvcall_drvcall_devhost_transfs_node_put(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int v_index);


extern int __actvcapcall_drvcall_devhost_transfs_node_put(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int v_index);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_node_put(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int v_index)
{
	const unsigned long __callno = __devhost_method_transfs_node_put;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_node_put(rpc_info, NULL, s_index, v_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_node_put(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int v_index)
{
	const unsigned long __callno = __devhost_method_transfs_node_put;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_node_put(__rref, rpc_info, NULL, s_index, v_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_node_put(unsigned int s_index, unsigned int v_index)
{
	return actvxactcall_drvcall_devhost_transfs_node_put(false, false, s_index, v_index);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_node_put(rref_t __rref, unsigned int s_index, unsigned int v_index)
{
	return actvxactcapcall_drvcall_devhost_transfs_node_put(false, false, __rref, s_index, v_index);
}

extern int __actvcall_drvcall_devhost_transfs_sync(unsigned long long __rpc_info, void *__buf, unsigned int s_index);


extern int __actvcapcall_drvcall_devhost_transfs_sync(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_sync(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index)
{
	const unsigned long __callno = __devhost_method_transfs_sync;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_sync(rpc_info, NULL, s_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_sync(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index)
{
	const unsigned long __callno = __devhost_method_transfs_sync;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_sync(__rref, rpc_info, NULL, s_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_sync(unsigned int s_index)
{
	return actvxactcall_drvcall_devhost_transfs_sync(false, false, s_index);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_sync(rref_t __rref, unsigned int s_index)
{
	return actvxactcapcall_drvcall_devhost_transfs_sync(false, false, __rref, s_index);
}

extern int __actvcall_drvcall_devhost_transfs_write(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);


extern int __actvcapcall_drvcall_devhost_transfs_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_write(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len, struct __actvret_drvcall_devhost_transfs_write *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_write(rpc_info, __ret, s_index, f_index, pos, src, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_write(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len, struct __actvret_drvcall_devhost_transfs_write *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_write(__rref, rpc_info, __ret, s_index, f_index, pos, src, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_write(unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len, struct __actvret_drvcall_devhost_transfs_write *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_write(false, false, s_index, f_index, pos, src, len, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_write(rref_t __rref, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len, struct __actvret_drvcall_devhost_transfs_write *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_write(false, false, __rref, s_index, f_index, pos, src, len, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_fsync(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int f_index);


extern int __actvcapcall_drvcall_devhost_transfs_fsync(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int f_index);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_fsync(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int f_index)
{
	const unsigned long __callno = __devhost_method_transfs_fsync;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_fsync(rpc_info, NULL, s_index, f_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_fsync(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int f_index)
{
	const unsigned long __callno = __devhost_method_transfs_fsync;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_fsync(__rref, rpc_info, NULL, s_index, f_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_fsync(unsigned int s_index, unsigned int f_index)
{
	return actvxactcall_drvcall_devhost_transfs_fsync(false, false, s_index, f_index);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_fsync(rref_t __rref, unsigned int s_index, unsigned int f_index)
{
	return actvxactcapcall_drvcall_devhost_transfs_fsync(false, false, __rref, s_index, f_index);
}

extern int __actvcall_drvcall_devhost_transfs_readdir(unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);


extern int __actvcapcall_drvcall_devhost_transfs_readdir(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_readdir(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size)
{
	const unsigned long __callno = __devhost_method_transfs_readdir;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_readdir(rpc_info, NULL, sb_index, f_index, pos, buf, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_readdir(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size)
{
	const unsigned long __callno = __devhost_method_transfs_readdir;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_readdir(__rref, rpc_info, NULL, sb_index, f_index, pos, buf, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_readdir(unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size)
{
	return actvxactcall_drvcall_devhost_transfs_readdir(false, false, sb_index, f_index, pos, buf, size);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_readdir(rref_t __rref, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size)
{
	return actvxactcapcall_drvcall_devhost_transfs_readdir(false, false, __rref, sb_index, f_index, pos, buf, size);
}

extern int __actvcall_drvcall_devhost_transfs_open(unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);


extern int __actvcapcall_drvcall_devhost_transfs_open(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_open(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags, struct __actvret_drvcall_devhost_transfs_open *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_open;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_open(rpc_info, __ret, sb_index, d_index, f_modes, f_flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_open(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags, struct __actvret_drvcall_devhost_transfs_open *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_open;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_open(__rref, rpc_info, __ret, sb_index, d_index, f_modes, f_flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_open(unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags, struct __actvret_drvcall_devhost_transfs_open *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_open(false, false, sb_index, d_index, f_modes, f_flags, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_open(rref_t __rref, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags, struct __actvret_drvcall_devhost_transfs_open *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_open(false, false, __rref, sb_index, d_index, f_modes, f_flags, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_fallocate(unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);


extern int __actvcapcall_drvcall_devhost_transfs_fallocate(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_fallocate(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len)
{
	const unsigned long __callno = __devhost_method_transfs_fallocate;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_fallocate(rpc_info, NULL, sb_index, f_index, mode, pos, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_fallocate(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len)
{
	const unsigned long __callno = __devhost_method_transfs_fallocate;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_fallocate(__rref, rpc_info, NULL, sb_index, f_index, mode, pos, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_fallocate(unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len)
{
	return actvxactcall_drvcall_devhost_transfs_fallocate(false, false, sb_index, f_index, mode, pos, len);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_fallocate(rref_t __rref, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len)
{
	return actvxactcapcall_drvcall_devhost_transfs_fallocate(false, false, __rref, sb_index, f_index, mode, pos, len);
}

extern int __actvcall_drvcall_devhost_transfs_close(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int f_index);


extern int __actvcapcall_drvcall_devhost_transfs_close(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int f_index);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_close(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int f_index)
{
	const unsigned long __callno = __devhost_method_transfs_close;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_close(rpc_info, NULL, s_index, f_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_close(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int f_index)
{
	const unsigned long __callno = __devhost_method_transfs_close;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_close(__rref, rpc_info, NULL, s_index, f_index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_close(unsigned int s_index, unsigned int f_index)
{
	return actvxactcall_drvcall_devhost_transfs_close(false, false, s_index, f_index);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_close(rref_t __rref, unsigned int s_index, unsigned int f_index)
{
	return actvxactcapcall_drvcall_devhost_transfs_close(false, false, __rref, s_index, f_index);
}

extern int __actvcall_drvcall_devhost_transfs_ioctl(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);


extern int __actvcapcall_drvcall_devhost_transfs_ioctl(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_ioctl(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg)
{
	const unsigned long __callno = __devhost_method_transfs_ioctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_ioctl(rpc_info, NULL, s_index, f_index, cmd, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_ioctl(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg)
{
	const unsigned long __callno = __devhost_method_transfs_ioctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_ioctl(__rref, rpc_info, NULL, s_index, f_index, cmd, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_ioctl(unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg)
{
	return actvxactcall_drvcall_devhost_transfs_ioctl(false, false, s_index, f_index, cmd, arg);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_ioctl(rref_t __rref, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg)
{
	return actvxactcapcall_drvcall_devhost_transfs_ioctl(false, false, __rref, s_index, f_index, cmd, arg);
}

extern int __actvcall_drvcall_devhost_transfs_direct_IO(unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);


extern int __actvcapcall_drvcall_devhost_transfs_direct_IO(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_direct_IO(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type, struct __actvret_drvcall_devhost_transfs_direct_IO *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_direct_IO;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_direct_IO(rpc_info, __ret, s_index, f_index, offset, buf, len, type);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_direct_IO(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type, struct __actvret_drvcall_devhost_transfs_direct_IO *__ret)
{
	const unsigned long __callno = __devhost_method_transfs_direct_IO;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_direct_IO(__rref, rpc_info, __ret, s_index, f_index, offset, buf, len, type);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_direct_IO(unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type, struct __actvret_drvcall_devhost_transfs_direct_IO *__ret)
{
	return actvxactcall_drvcall_devhost_transfs_direct_IO(false, false, s_index, f_index, offset, buf, len, type, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_direct_IO(rref_t __rref, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type, struct __actvret_drvcall_devhost_transfs_direct_IO *__ret)
{
	return actvxactcapcall_drvcall_devhost_transfs_direct_IO(false, false, __rref, s_index, f_index, offset, buf, len, type, __ret);
}

extern int __actvcall_drvcall_devhost_transfs_update_opts(unsigned long long __rpc_info, void *__buf, unsigned int s_index, char *ubuf, size_t buflen);


extern int __actvcapcall_drvcall_devhost_transfs_update_opts(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int s_index, char *ubuf, size_t buflen);


static inline int __attribute__((always_inline)) actvxactcall_drvcall_devhost_transfs_update_opts(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int s_index, char *ubuf, size_t buflen)
{
	const unsigned long __callno = __devhost_method_transfs_update_opts;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_drvcall_devhost_transfs_update_opts(rpc_info, NULL, s_index, ubuf, buflen);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_drvcall_devhost_transfs_update_opts(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int s_index, char *ubuf, size_t buflen)
{
	const unsigned long __callno = __devhost_method_transfs_update_opts;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_drvcall_devhost_transfs_update_opts(__rref, rpc_info, NULL, s_index, ubuf, buflen);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_drvcall_devhost_transfs_update_opts(unsigned int s_index, char *ubuf, size_t buflen)
{
	return actvxactcall_drvcall_devhost_transfs_update_opts(false, false, s_index, ubuf, buflen);
}

static inline int __attribute__((always_inline)) actvcapcall_drvcall_devhost_transfs_update_opts(rref_t __rref, unsigned int s_index, char *ubuf, size_t buflen)
{
	return actvxactcapcall_drvcall_devhost_transfs_update_opts(false, false, __rref, s_index, ubuf, buflen);
}

#endif
#ifdef __sysif_server_devhost_no_compat32_handlers__
# define __devhost_method_MAX __devhost_method_MAX_NOCOMPAT
#else
# define __devhost_method_MAX __devhost_method_MAX_COMPAT
#endif
#include <libsysif/utils.h>
#include <asm/actv_rpc.h>
#include <asm/types.h>
#ifndef __ARCH_RPC_REQUIRE_BRIDGE_HDLR
extern int actvhdlr_drvhandler_devhost_core_load_driver(unsigned long long sender, unsigned long credential, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);


extern int actvhdlr_drvhandler_devhost_core_create_device(unsigned long long sender, unsigned long credential, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);


extern int actvhdlr_drvhandler_devhost_core_unload_driver(unsigned long long sender, unsigned long credential, struct hm_actv_buf drvname);


extern int actvhdlr_drvhandler_devhost_core_bind_device(unsigned long long sender, unsigned long credential, int devid, struct hm_actv_buf dev_compat);


extern int actvhdlr_drvhandler_devhost_core_entropy_read(unsigned long long sender, unsigned long credential, unsigned int num);


extern int actvhdlr_drvhandler_devhost_rpc_export(unsigned long long sender, unsigned long credential, int devid, unsigned int cnode_idx);


extern int actvhdlr_drvhandler_devhost_rpc_invoke(unsigned long long sender, unsigned long credential, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);


extern int actvhdlr_drvhandler_devhost_fops_open(unsigned long long sender, unsigned long credential, int devid, rref_t tgt_rref, unsigned int vfs_flags);


extern int actvhdlr_drvhandler_devhost_fops_close(unsigned long long sender, unsigned long credential, int padding, unsigned long long file_id);


extern int actvhdlr_drvhandler_devhost_fops_read(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);


extern int actvhdlr_drvhandler_devhost_fops_write(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);


extern int actvhdlr_drvhandler_devhost_fops_ioctl(unsigned long long sender, unsigned long credential, int request, unsigned long long file_id, unsigned long arg);


extern int actvhdlr_drvhandler_devhost_fops_llseek(unsigned long long sender, unsigned long credential, int whence, unsigned long long file_id, long long offset);


extern int actvhdlr_drvhandler_devhost_fops_mmap(unsigned long long sender, unsigned long credential, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);


extern int actvhdlr_drvhandler_devhost_fops_munmap(unsigned long long sender, unsigned long credential, unsigned int key, unsigned long len);


extern int actvhdlr_drvhandler_devhost_fops_sysfs_read(unsigned long long sender, unsigned long credential);


extern int actvhdlr_drvhandler_devhost_fops_sysfs_write(unsigned long long sender, unsigned long credential);


extern int actvhdlr_drvhandler_devhost_fops_epoll_ctl(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, int op, const void *reg_info);


extern int actvhdlr_drvhandler_devhost_fops_epoll_close(unsigned long long sender, unsigned long credential, unsigned int app_cnode_idx, unsigned long long file_id, int fd);


extern int actvhdlr_drvhandler_devhost_fops_epoll_et(unsigned long long sender, unsigned long credential, unsigned long long file_id, const void *pre_info);


extern int actvhdlr_drvhandler_devhost_fops_epoll_reinit_add(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);


extern int actvhdlr_drvhandler_devhost_block_check_feature(unsigned long long sender, unsigned long credential, int idx, unsigned long long file_id, unsigned long long features);


extern int actvhdlr_drvhandler_devhost_block_run_queue(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned int flags, unsigned int idx);


extern int actvhdlr_drvhandler_devhost_block_direct_access(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned long offset, unsigned long size);


extern int actvhdlr_drvhandler_devhost_block_register_bio_notify(unsigned long long sender, unsigned long credential, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);


extern int actvhdlr_drvhandler_devhost_net_send(unsigned long long sender, unsigned long credential, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);


extern int actvhdlr_drvhandler_devhost_net_ioctl(unsigned long long sender, unsigned long credential, int ifindex, int request, unsigned long args);


extern int actvhdlr_drvhandler_devhost_net_status(unsigned long long sender, unsigned long credential, int ifindex);


extern int actvhdlr_drvhandler_devhost_net_prepare(unsigned long long sender, unsigned long credential);


extern int actvhdlr_drvhandler_devhost_net_init(unsigned long long sender, unsigned long credential, int ifindex, rref_t tgt_rref);


extern int actvhdlr_drvhandler_devhost_net_netlink_recv(unsigned long long sender, unsigned long credential, int protocol, unsigned int src_portid);


extern int actvhdlr_drvhandler_devhost_pm_action(unsigned long long sender, unsigned long credential, unsigned int action);


extern int actvhdlr_drvhandler_devhost_pm_prepare(unsigned long long sender, unsigned long credential, unsigned int type, struct reboot_cmd cmd);


extern int actvhdlr_drvhandler_devhost_pm_power_off(unsigned long long sender, unsigned long credential);


extern int actvhdlr_drvhandler_devhost_pm_reboot(unsigned long long sender, unsigned long credential, struct reboot_cmd cmd);


extern int actvhdlr_drvhandler_devhost_pm_cpuhp_action(unsigned long long sender, unsigned long credential, unsigned int cpu, unsigned int action);


extern int actvhdlr_drvhandler_devhost_procfs_read(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


extern int actvhdlr_drvhandler_devhost_procfs_write(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


extern int actvhdlr_drvhandler_devhost_sysfs_read(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


extern int actvhdlr_drvhandler_devhost_sysfs_write(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


extern int actvhdlr_drvhandler_devhost_sysfs_poll(unsigned long long sender, unsigned long credential, unsigned int tagid, uintptr_t ctx, bool pollable);


extern int actvhdlr_drvhandler_devhost_clock_settime(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);


extern int actvhdlr_drvhandler_devhost_clock_gettime(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);


extern int actvhdlr_drvhandler_devhost_clock_getres(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);


extern int actvhdlr_drvhandler_devhost_clock_adjtime(unsigned long long sender, unsigned long credential, unsigned long tx, unsigned long long file_id);


extern int actvhdlr_drvhandler_devhost_transfs_mounted(unsigned long long sender, unsigned long credential, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);


extern int actvhdlr_drvhandler_devhost_transfs_unmounted(unsigned long long sender, unsigned long credential, unsigned int s_index, int flags, unsigned long long file_id);


extern int actvhdlr_drvhandler_devhost_transfs_drop_caches(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int mode, int max_nr);


extern int actvhdlr_drvhandler_devhost_transfs_mkdir(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);


extern int actvhdlr_drvhandler_devhost_transfs_rmdir(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);


extern int actvhdlr_drvhandler_devhost_transfs_create(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);


extern int actvhdlr_drvhandler_devhost_transfs_unlink(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);


extern int actvhdlr_drvhandler_devhost_transfs_mknod(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);


extern int actvhdlr_drvhandler_devhost_transfs_link(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);


extern int actvhdlr_drvhandler_devhost_transfs_symlink(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);


extern int actvhdlr_drvhandler_devhost_transfs_statfs(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, void *buf);


extern int actvhdlr_drvhandler_devhost_transfs_rename(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);


extern int actvhdlr_drvhandler_devhost_transfs_lookup(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);


extern int actvhdlr_drvhandler_devhost_transfs_setattr(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);


extern int actvhdlr_drvhandler_devhost_transfs_readlink(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);


extern int actvhdlr_drvhandler_devhost_transfs_getattr(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, void *meta);


extern int actvhdlr_drvhandler_devhost_transfs_listxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);


extern int actvhdlr_drvhandler_devhost_transfs_getxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);


extern int actvhdlr_drvhandler_devhost_transfs_setxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);


extern int actvhdlr_drvhandler_devhost_transfs_tmpfile(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);


extern int actvhdlr_drvhandler_devhost_transfs_kill_dentry(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index);


extern int actvhdlr_drvhandler_devhost_transfs_node_put(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int v_index);


extern int actvhdlr_drvhandler_devhost_transfs_sync(unsigned long long sender, unsigned long credential, unsigned int s_index);


extern int actvhdlr_drvhandler_devhost_transfs_write(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);


extern int actvhdlr_drvhandler_devhost_transfs_fsync(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);


extern int actvhdlr_drvhandler_devhost_transfs_readdir(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);


extern int actvhdlr_drvhandler_devhost_transfs_open(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);


extern int actvhdlr_drvhandler_devhost_transfs_fallocate(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);


extern int actvhdlr_drvhandler_devhost_transfs_close(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);


extern int actvhdlr_drvhandler_devhost_transfs_ioctl(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);


extern int actvhdlr_drvhandler_devhost_transfs_direct_IO(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);


extern int actvhdlr_drvhandler_devhost_transfs_update_opts(unsigned long long sender, unsigned long credential, unsigned int s_index, char *ubuf, size_t buflen);


#else
extern int actvhdlr_drvhandler_devhost_core_load_driver(unsigned long long sender, unsigned long credential, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);


extern int __actvshadowhdlr_drvhandler_devhost_core_load_driver(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_core_create_device(unsigned long long sender, unsigned long credential, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);


extern int __actvshadowhdlr_drvhandler_devhost_core_create_device(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_core_unload_driver(unsigned long long sender, unsigned long credential, struct hm_actv_buf drvname);


extern int __actvshadowhdlr_drvhandler_devhost_core_unload_driver(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_core_bind_device(unsigned long long sender, unsigned long credential, int devid, struct hm_actv_buf dev_compat);


extern int __actvshadowhdlr_drvhandler_devhost_core_bind_device(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_core_entropy_read(unsigned long long sender, unsigned long credential, unsigned int num);


extern int __actvshadowhdlr_drvhandler_devhost_core_entropy_read(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_rpc_export(unsigned long long sender, unsigned long credential, int devid, unsigned int cnode_idx);


extern int __actvshadowhdlr_drvhandler_devhost_rpc_export(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_rpc_invoke(unsigned long long sender, unsigned long credential, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);


extern int __actvshadowhdlr_drvhandler_devhost_rpc_invoke(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_open(unsigned long long sender, unsigned long credential, int devid, rref_t tgt_rref, unsigned int vfs_flags);


extern int __actvshadowhdlr_drvhandler_devhost_fops_open(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_close(unsigned long long sender, unsigned long credential, int padding, unsigned long long file_id);


extern int __actvshadowhdlr_drvhandler_devhost_fops_close(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_read(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);


extern int __actvshadowhdlr_drvhandler_devhost_fops_read(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_write(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);


extern int __actvshadowhdlr_drvhandler_devhost_fops_write(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_ioctl(unsigned long long sender, unsigned long credential, int request, unsigned long long file_id, unsigned long arg);


extern int __actvshadowhdlr_drvhandler_devhost_fops_ioctl(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_llseek(unsigned long long sender, unsigned long credential, int whence, unsigned long long file_id, long long offset);


extern int __actvshadowhdlr_drvhandler_devhost_fops_llseek(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_mmap(unsigned long long sender, unsigned long credential, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);


extern int __actvshadowhdlr_drvhandler_devhost_fops_mmap(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_munmap(unsigned long long sender, unsigned long credential, unsigned int key, unsigned long len);


extern int __actvshadowhdlr_drvhandler_devhost_fops_munmap(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_sysfs_read(unsigned long long sender, unsigned long credential);


extern int __actvshadowhdlr_drvhandler_devhost_fops_sysfs_read(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_sysfs_write(unsigned long long sender, unsigned long credential);


extern int __actvshadowhdlr_drvhandler_devhost_fops_sysfs_write(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_epoll_ctl(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, int op, const void *reg_info);


extern int __actvshadowhdlr_drvhandler_devhost_fops_epoll_ctl(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_epoll_close(unsigned long long sender, unsigned long credential, unsigned int app_cnode_idx, unsigned long long file_id, int fd);


extern int __actvshadowhdlr_drvhandler_devhost_fops_epoll_close(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_epoll_et(unsigned long long sender, unsigned long credential, unsigned long long file_id, const void *pre_info);


extern int __actvshadowhdlr_drvhandler_devhost_fops_epoll_et(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_fops_epoll_reinit_add(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);


extern int __actvshadowhdlr_drvhandler_devhost_fops_epoll_reinit_add(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_block_check_feature(unsigned long long sender, unsigned long credential, int idx, unsigned long long file_id, unsigned long long features);


extern int __actvshadowhdlr_drvhandler_devhost_block_check_feature(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_block_run_queue(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned int flags, unsigned int idx);


extern int __actvshadowhdlr_drvhandler_devhost_block_run_queue(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_block_direct_access(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned long offset, unsigned long size);


extern int __actvshadowhdlr_drvhandler_devhost_block_direct_access(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_block_register_bio_notify(unsigned long long sender, unsigned long credential, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);


extern int __actvshadowhdlr_drvhandler_devhost_block_register_bio_notify(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_net_send(unsigned long long sender, unsigned long credential, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);


extern int __actvshadowhdlr_drvhandler_devhost_net_send(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_net_ioctl(unsigned long long sender, unsigned long credential, int ifindex, int request, unsigned long args);


extern int __actvshadowhdlr_drvhandler_devhost_net_ioctl(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_net_status(unsigned long long sender, unsigned long credential, int ifindex);


extern int __actvshadowhdlr_drvhandler_devhost_net_status(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_net_prepare(unsigned long long sender, unsigned long credential);


extern int __actvshadowhdlr_drvhandler_devhost_net_prepare(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_net_init(unsigned long long sender, unsigned long credential, int ifindex, rref_t tgt_rref);


extern int __actvshadowhdlr_drvhandler_devhost_net_init(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_net_netlink_recv(unsigned long long sender, unsigned long credential, int protocol, unsigned int src_portid);


extern int __actvshadowhdlr_drvhandler_devhost_net_netlink_recv(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_pm_action(unsigned long long sender, unsigned long credential, unsigned int action);


extern int __actvshadowhdlr_drvhandler_devhost_pm_action(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_pm_prepare(unsigned long long sender, unsigned long credential, unsigned int type, struct reboot_cmd cmd);


extern int __actvshadowhdlr_drvhandler_devhost_pm_prepare(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_pm_power_off(unsigned long long sender, unsigned long credential);


extern int __actvshadowhdlr_drvhandler_devhost_pm_power_off(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_pm_reboot(unsigned long long sender, unsigned long credential, struct reboot_cmd cmd);


extern int __actvshadowhdlr_drvhandler_devhost_pm_reboot(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_pm_cpuhp_action(unsigned long long sender, unsigned long credential, unsigned int cpu, unsigned int action);


extern int __actvshadowhdlr_drvhandler_devhost_pm_cpuhp_action(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_procfs_read(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


extern int __actvshadowhdlr_drvhandler_devhost_procfs_read(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_procfs_write(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


extern int __actvshadowhdlr_drvhandler_devhost_procfs_write(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_sysfs_read(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


extern int __actvshadowhdlr_drvhandler_devhost_sysfs_read(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_sysfs_write(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);


extern int __actvshadowhdlr_drvhandler_devhost_sysfs_write(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_sysfs_poll(unsigned long long sender, unsigned long credential, unsigned int tagid, uintptr_t ctx, bool pollable);


extern int __actvshadowhdlr_drvhandler_devhost_sysfs_poll(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_clock_settime(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);


extern int __actvshadowhdlr_drvhandler_devhost_clock_settime(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_clock_gettime(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);


extern int __actvshadowhdlr_drvhandler_devhost_clock_gettime(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_clock_getres(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);


extern int __actvshadowhdlr_drvhandler_devhost_clock_getres(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_clock_adjtime(unsigned long long sender, unsigned long credential, unsigned long tx, unsigned long long file_id);


extern int __actvshadowhdlr_drvhandler_devhost_clock_adjtime(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_mounted(unsigned long long sender, unsigned long credential, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_mounted(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_unmounted(unsigned long long sender, unsigned long credential, unsigned int s_index, int flags, unsigned long long file_id);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_unmounted(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_drop_caches(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int mode, int max_nr);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_drop_caches(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_mkdir(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_mkdir(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_rmdir(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_rmdir(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_create(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_create(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_unlink(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_unlink(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_mknod(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_mknod(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_link(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_link(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_symlink(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_symlink(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_statfs(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, void *buf);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_statfs(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_rename(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_rename(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_lookup(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_lookup(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_setattr(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_setattr(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_readlink(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_readlink(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_getattr(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, void *meta);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_getattr(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_listxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_listxattr(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_getxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_getxattr(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_setxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_setxattr(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_tmpfile(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_tmpfile(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_kill_dentry(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_kill_dentry(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_node_put(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int v_index);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_node_put(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_sync(unsigned long long sender, unsigned long credential, unsigned int s_index);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_sync(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_write(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_write(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_fsync(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_fsync(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_readdir(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_readdir(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_open(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_open(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_fallocate(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_fallocate(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_close(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_close(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_ioctl(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_ioctl(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_direct_IO(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_direct_IO(unsigned long long sender, unsigned long credential, ...);


extern int actvhdlr_drvhandler_devhost_transfs_update_opts(unsigned long long sender, unsigned long credential, unsigned int s_index, char *ubuf, size_t buflen);


extern int __actvshadowhdlr_drvhandler_devhost_transfs_update_opts(unsigned long long sender, unsigned long credential, ...);


#endif
static inline struct __actvret_drvcall_devhost_core_load_driver* actvhdlr_drvhandler_devhost_core_load_driver_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_core_load_driver));
	return (struct __actvret_drvcall_devhost_core_load_driver*)__ret;
}

static inline struct __actvret_drvcall_devhost_core_create_device* actvhdlr_drvhandler_devhost_core_create_device_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_core_create_device));
	return (struct __actvret_drvcall_devhost_core_create_device*)__ret;
}

static inline struct __actvret_drvcall_devhost_core_unload_driver* actvhdlr_drvhandler_devhost_core_unload_driver_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_core_unload_driver));
	return (struct __actvret_drvcall_devhost_core_unload_driver*)__ret;
}

static inline struct __actvret_drvcall_devhost_core_bind_device* actvhdlr_drvhandler_devhost_core_bind_device_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_core_bind_device));
	return (struct __actvret_drvcall_devhost_core_bind_device*)__ret;
}

static inline struct __actvret_drvcall_devhost_core_entropy_read* actvhdlr_drvhandler_devhost_core_entropy_read_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_core_entropy_read));
	return (struct __actvret_drvcall_devhost_core_entropy_read*)__ret;
}

static inline struct __actvret_drvcall_devhost_rpc_export* actvhdlr_drvhandler_devhost_rpc_export_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_rpc_export));
	return (struct __actvret_drvcall_devhost_rpc_export*)__ret;
}

static inline struct __actvret_drvcall_devhost_rpc_invoke* actvhdlr_drvhandler_devhost_rpc_invoke_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_rpc_invoke));
	return (struct __actvret_drvcall_devhost_rpc_invoke*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_open* actvhdlr_drvhandler_devhost_fops_open_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_open));
	return (struct __actvret_drvcall_devhost_fops_open*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_close* actvhdlr_drvhandler_devhost_fops_close_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_close));
	return (struct __actvret_drvcall_devhost_fops_close*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_read* actvhdlr_drvhandler_devhost_fops_read_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_read));
	return (struct __actvret_drvcall_devhost_fops_read*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_write* actvhdlr_drvhandler_devhost_fops_write_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_write));
	return (struct __actvret_drvcall_devhost_fops_write*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_ioctl* actvhdlr_drvhandler_devhost_fops_ioctl_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_ioctl));
	return (struct __actvret_drvcall_devhost_fops_ioctl*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_llseek* actvhdlr_drvhandler_devhost_fops_llseek_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_llseek));
	return (struct __actvret_drvcall_devhost_fops_llseek*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_mmap* actvhdlr_drvhandler_devhost_fops_mmap_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_mmap));
	return (struct __actvret_drvcall_devhost_fops_mmap*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_munmap* actvhdlr_drvhandler_devhost_fops_munmap_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_munmap));
	return (struct __actvret_drvcall_devhost_fops_munmap*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_sysfs_read* actvhdlr_drvhandler_devhost_fops_sysfs_read_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_sysfs_read));
	return (struct __actvret_drvcall_devhost_fops_sysfs_read*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_sysfs_write* actvhdlr_drvhandler_devhost_fops_sysfs_write_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_sysfs_write));
	return (struct __actvret_drvcall_devhost_fops_sysfs_write*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_epoll_ctl* actvhdlr_drvhandler_devhost_fops_epoll_ctl_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_epoll_ctl));
	return (struct __actvret_drvcall_devhost_fops_epoll_ctl*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_epoll_close* actvhdlr_drvhandler_devhost_fops_epoll_close_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_epoll_close));
	return (struct __actvret_drvcall_devhost_fops_epoll_close*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_epoll_et* actvhdlr_drvhandler_devhost_fops_epoll_et_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_epoll_et));
	return (struct __actvret_drvcall_devhost_fops_epoll_et*)__ret;
}

static inline struct __actvret_drvcall_devhost_fops_epoll_reinit_add* actvhdlr_drvhandler_devhost_fops_epoll_reinit_add_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_fops_epoll_reinit_add));
	return (struct __actvret_drvcall_devhost_fops_epoll_reinit_add*)__ret;
}

static inline struct __actvret_drvcall_devhost_block_check_feature* actvhdlr_drvhandler_devhost_block_check_feature_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_block_check_feature));
	return (struct __actvret_drvcall_devhost_block_check_feature*)__ret;
}

static inline struct __actvret_drvcall_devhost_block_run_queue* actvhdlr_drvhandler_devhost_block_run_queue_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_block_run_queue));
	return (struct __actvret_drvcall_devhost_block_run_queue*)__ret;
}

static inline struct __actvret_drvcall_devhost_block_direct_access* actvhdlr_drvhandler_devhost_block_direct_access_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_block_direct_access));
	return (struct __actvret_drvcall_devhost_block_direct_access*)__ret;
}

static inline struct __actvret_drvcall_devhost_block_register_bio_notify* actvhdlr_drvhandler_devhost_block_register_bio_notify_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_block_register_bio_notify));
	return (struct __actvret_drvcall_devhost_block_register_bio_notify*)__ret;
}

static inline struct __actvret_drvcall_devhost_net_send* actvhdlr_drvhandler_devhost_net_send_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_net_send));
	return (struct __actvret_drvcall_devhost_net_send*)__ret;
}

static inline struct __actvret_drvcall_devhost_net_ioctl* actvhdlr_drvhandler_devhost_net_ioctl_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_net_ioctl));
	return (struct __actvret_drvcall_devhost_net_ioctl*)__ret;
}

static inline struct __actvret_drvcall_devhost_net_status* actvhdlr_drvhandler_devhost_net_status_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_net_status));
	return (struct __actvret_drvcall_devhost_net_status*)__ret;
}

static inline struct __actvret_drvcall_devhost_net_prepare* actvhdlr_drvhandler_devhost_net_prepare_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_net_prepare));
	return (struct __actvret_drvcall_devhost_net_prepare*)__ret;
}

static inline struct __actvret_drvcall_devhost_net_init* actvhdlr_drvhandler_devhost_net_init_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_net_init));
	return (struct __actvret_drvcall_devhost_net_init*)__ret;
}

static inline struct __actvret_drvcall_devhost_net_netlink_recv* actvhdlr_drvhandler_devhost_net_netlink_recv_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_net_netlink_recv));
	return (struct __actvret_drvcall_devhost_net_netlink_recv*)__ret;
}

static inline struct __actvret_drvcall_devhost_pm_action* actvhdlr_drvhandler_devhost_pm_action_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_pm_action));
	return (struct __actvret_drvcall_devhost_pm_action*)__ret;
}

static inline struct __actvret_drvcall_devhost_pm_prepare* actvhdlr_drvhandler_devhost_pm_prepare_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_pm_prepare));
	return (struct __actvret_drvcall_devhost_pm_prepare*)__ret;
}

static inline struct __actvret_drvcall_devhost_pm_power_off* actvhdlr_drvhandler_devhost_pm_power_off_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_pm_power_off));
	return (struct __actvret_drvcall_devhost_pm_power_off*)__ret;
}

static inline struct __actvret_drvcall_devhost_pm_reboot* actvhdlr_drvhandler_devhost_pm_reboot_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_pm_reboot));
	return (struct __actvret_drvcall_devhost_pm_reboot*)__ret;
}

static inline struct __actvret_drvcall_devhost_pm_cpuhp_action* actvhdlr_drvhandler_devhost_pm_cpuhp_action_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_pm_cpuhp_action));
	return (struct __actvret_drvcall_devhost_pm_cpuhp_action*)__ret;
}

static inline struct __actvret_drvcall_devhost_procfs_read* actvhdlr_drvhandler_devhost_procfs_read_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_procfs_read));
	return (struct __actvret_drvcall_devhost_procfs_read*)__ret;
}

static inline struct __actvret_drvcall_devhost_procfs_write* actvhdlr_drvhandler_devhost_procfs_write_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_procfs_write));
	return (struct __actvret_drvcall_devhost_procfs_write*)__ret;
}

static inline struct __actvret_drvcall_devhost_sysfs_read* actvhdlr_drvhandler_devhost_sysfs_read_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_sysfs_read));
	return (struct __actvret_drvcall_devhost_sysfs_read*)__ret;
}

static inline struct __actvret_drvcall_devhost_sysfs_write* actvhdlr_drvhandler_devhost_sysfs_write_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_sysfs_write));
	return (struct __actvret_drvcall_devhost_sysfs_write*)__ret;
}

static inline struct __actvret_drvcall_devhost_sysfs_poll* actvhdlr_drvhandler_devhost_sysfs_poll_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_sysfs_poll));
	return (struct __actvret_drvcall_devhost_sysfs_poll*)__ret;
}

static inline struct __actvret_drvcall_devhost_clock_settime* actvhdlr_drvhandler_devhost_clock_settime_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_clock_settime));
	return (struct __actvret_drvcall_devhost_clock_settime*)__ret;
}

static inline struct __actvret_drvcall_devhost_clock_gettime* actvhdlr_drvhandler_devhost_clock_gettime_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_clock_gettime));
	return (struct __actvret_drvcall_devhost_clock_gettime*)__ret;
}

static inline struct __actvret_drvcall_devhost_clock_getres* actvhdlr_drvhandler_devhost_clock_getres_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_clock_getres));
	return (struct __actvret_drvcall_devhost_clock_getres*)__ret;
}

static inline struct __actvret_drvcall_devhost_clock_adjtime* actvhdlr_drvhandler_devhost_clock_adjtime_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_clock_adjtime));
	return (struct __actvret_drvcall_devhost_clock_adjtime*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_mounted* actvhdlr_drvhandler_devhost_transfs_mounted_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_mounted));
	return (struct __actvret_drvcall_devhost_transfs_mounted*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_unmounted* actvhdlr_drvhandler_devhost_transfs_unmounted_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_unmounted));
	return (struct __actvret_drvcall_devhost_transfs_unmounted*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_drop_caches* actvhdlr_drvhandler_devhost_transfs_drop_caches_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_drop_caches));
	return (struct __actvret_drvcall_devhost_transfs_drop_caches*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_mkdir* actvhdlr_drvhandler_devhost_transfs_mkdir_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_mkdir));
	return (struct __actvret_drvcall_devhost_transfs_mkdir*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_rmdir* actvhdlr_drvhandler_devhost_transfs_rmdir_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_rmdir));
	return (struct __actvret_drvcall_devhost_transfs_rmdir*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_create* actvhdlr_drvhandler_devhost_transfs_create_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_create));
	return (struct __actvret_drvcall_devhost_transfs_create*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_unlink* actvhdlr_drvhandler_devhost_transfs_unlink_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_unlink));
	return (struct __actvret_drvcall_devhost_transfs_unlink*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_mknod* actvhdlr_drvhandler_devhost_transfs_mknod_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_mknod));
	return (struct __actvret_drvcall_devhost_transfs_mknod*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_link* actvhdlr_drvhandler_devhost_transfs_link_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_link));
	return (struct __actvret_drvcall_devhost_transfs_link*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_symlink* actvhdlr_drvhandler_devhost_transfs_symlink_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_symlink));
	return (struct __actvret_drvcall_devhost_transfs_symlink*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_statfs* actvhdlr_drvhandler_devhost_transfs_statfs_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_statfs));
	return (struct __actvret_drvcall_devhost_transfs_statfs*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_rename* actvhdlr_drvhandler_devhost_transfs_rename_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_rename));
	return (struct __actvret_drvcall_devhost_transfs_rename*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_lookup* actvhdlr_drvhandler_devhost_transfs_lookup_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_lookup));
	return (struct __actvret_drvcall_devhost_transfs_lookup*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_setattr* actvhdlr_drvhandler_devhost_transfs_setattr_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_setattr));
	return (struct __actvret_drvcall_devhost_transfs_setattr*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_readlink* actvhdlr_drvhandler_devhost_transfs_readlink_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_readlink));
	return (struct __actvret_drvcall_devhost_transfs_readlink*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_getattr* actvhdlr_drvhandler_devhost_transfs_getattr_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_getattr));
	return (struct __actvret_drvcall_devhost_transfs_getattr*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_listxattr* actvhdlr_drvhandler_devhost_transfs_listxattr_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_listxattr));
	return (struct __actvret_drvcall_devhost_transfs_listxattr*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_getxattr* actvhdlr_drvhandler_devhost_transfs_getxattr_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_getxattr));
	return (struct __actvret_drvcall_devhost_transfs_getxattr*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_setxattr* actvhdlr_drvhandler_devhost_transfs_setxattr_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_setxattr));
	return (struct __actvret_drvcall_devhost_transfs_setxattr*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_tmpfile* actvhdlr_drvhandler_devhost_transfs_tmpfile_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_tmpfile));
	return (struct __actvret_drvcall_devhost_transfs_tmpfile*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_kill_dentry* actvhdlr_drvhandler_devhost_transfs_kill_dentry_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_kill_dentry));
	return (struct __actvret_drvcall_devhost_transfs_kill_dentry*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_node_put* actvhdlr_drvhandler_devhost_transfs_node_put_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_node_put));
	return (struct __actvret_drvcall_devhost_transfs_node_put*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_sync* actvhdlr_drvhandler_devhost_transfs_sync_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_sync));
	return (struct __actvret_drvcall_devhost_transfs_sync*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_write* actvhdlr_drvhandler_devhost_transfs_write_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_write));
	return (struct __actvret_drvcall_devhost_transfs_write*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_fsync* actvhdlr_drvhandler_devhost_transfs_fsync_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_fsync));
	return (struct __actvret_drvcall_devhost_transfs_fsync*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_readdir* actvhdlr_drvhandler_devhost_transfs_readdir_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_readdir));
	return (struct __actvret_drvcall_devhost_transfs_readdir*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_open* actvhdlr_drvhandler_devhost_transfs_open_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_open));
	return (struct __actvret_drvcall_devhost_transfs_open*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_fallocate* actvhdlr_drvhandler_devhost_transfs_fallocate_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_fallocate));
	return (struct __actvret_drvcall_devhost_transfs_fallocate*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_close* actvhdlr_drvhandler_devhost_transfs_close_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_close));
	return (struct __actvret_drvcall_devhost_transfs_close*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_ioctl* actvhdlr_drvhandler_devhost_transfs_ioctl_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_ioctl));
	return (struct __actvret_drvcall_devhost_transfs_ioctl*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_direct_IO* actvhdlr_drvhandler_devhost_transfs_direct_IO_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_direct_IO));
	return (struct __actvret_drvcall_devhost_transfs_direct_IO*)__ret;
}

static inline struct __actvret_drvcall_devhost_transfs_update_opts* actvhdlr_drvhandler_devhost_transfs_update_opts_prepare_ret(unsigned long long sender, unsigned long credential)
{
	void *__ret = hm_actvpool_prepare_ret(sender, credential, sizeof(struct __actvret_drvcall_devhost_transfs_update_opts));
	return (struct __actvret_drvcall_devhost_transfs_update_opts*)__ret;
}

#ifdef __sysif_server_devhost_no_compat32_handlers__
#ifdef __HOST_LLT__
union devhost_hdlrs_union {
	void *p_sysif_actvhdlr_ptr_void;
	int (*p_sysif_default_handler)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_load_driver)(unsigned long long sender, unsigned long credential, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_load_driver)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_create_device)(unsigned long long sender, unsigned long credential, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_create_device)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_unload_driver)(unsigned long long sender, unsigned long credential, struct hm_actv_buf drvname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_unload_driver)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf drvname);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_bind_device)(unsigned long long sender, unsigned long credential, int devid, struct hm_actv_buf dev_compat);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_bind_device)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, struct hm_actv_buf dev_compat);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_entropy_read)(unsigned long long sender, unsigned long credential, unsigned int num);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_entropy_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int num);
	int (*p__actvbridgehdlr_drvhandler_devhost_rpc_export)(unsigned long long sender, unsigned long credential, int devid, unsigned int cnode_idx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_export)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned int cnode_idx);
	int (*p__actvbridgehdlr_drvhandler_devhost_rpc_invoke)(unsigned long long sender, unsigned long credential, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_invoke)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_open)(unsigned long long sender, unsigned long credential, int devid, rref_t tgt_rref, unsigned int vfs_flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_open)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, rref_t tgt_rref, unsigned int vfs_flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_close)(unsigned long long sender, unsigned long credential, int padding, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int padding, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_read)(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_write)(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_ioctl)(unsigned long long sender, unsigned long credential, int request, unsigned long long file_id, unsigned long arg);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int request, unsigned long long file_id, unsigned long arg);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_llseek)(unsigned long long sender, unsigned long credential, int whence, unsigned long long file_id, long long offset);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_llseek)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int whence, unsigned long long file_id, long long offset);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_mmap)(unsigned long long sender, unsigned long credential, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_mmap)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_munmap)(unsigned long long sender, unsigned long credential, unsigned int key, unsigned long len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_munmap)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int key, unsigned long len);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_read)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_write)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, int op, const void *reg_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, int op, const void *reg_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_close)(unsigned long long sender, unsigned long credential, unsigned int app_cnode_idx, unsigned long long file_id, int fd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int app_cnode_idx, unsigned long long file_id, int fd);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_et)(unsigned long long sender, unsigned long credential, unsigned long long file_id, const void *pre_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_et)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, const void *pre_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_check_feature)(unsigned long long sender, unsigned long credential, int idx, unsigned long long file_id, unsigned long long features);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_check_feature)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int idx, unsigned long long file_id, unsigned long long features);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_run_queue)(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned int flags, unsigned int idx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_run_queue)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned int flags, unsigned int idx);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_direct_access)(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned long offset, unsigned long size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_direct_access)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned long offset, unsigned long size);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_register_bio_notify)(unsigned long long sender, unsigned long credential, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_register_bio_notify)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_send)(unsigned long long sender, unsigned long credential, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_send)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_ioctl)(unsigned long long sender, unsigned long credential, int ifindex, int request, unsigned long args);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, int request, unsigned long args);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_status)(unsigned long long sender, unsigned long credential, int ifindex);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_status)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_prepare)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_prepare)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_init)(unsigned long long sender, unsigned long credential, int ifindex, rref_t tgt_rref);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_init)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, rref_t tgt_rref);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_netlink_recv)(unsigned long long sender, unsigned long credential, int protocol, unsigned int src_portid);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_netlink_recv)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int protocol, unsigned int src_portid);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_action)(unsigned long long sender, unsigned long credential, unsigned int action);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_action)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int action);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_prepare)(unsigned long long sender, unsigned long credential, unsigned int type, struct reboot_cmd cmd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_prepare)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int type, struct reboot_cmd cmd);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_power_off)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_power_off)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_reboot)(unsigned long long sender, unsigned long credential, struct reboot_cmd cmd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_reboot)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct reboot_cmd cmd);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, unsigned int cpu, unsigned int action);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int cpu, unsigned int action);
	int (*p__actvbridgehdlr_drvhandler_devhost_procfs_read)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_procfs_write)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_poll)(unsigned long long sender, unsigned long credential, unsigned int tagid, uintptr_t ctx, bool pollable);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_poll)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, uintptr_t ctx, bool pollable);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_settime)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_settime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_gettime)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_gettime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_getres)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_getres)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_adjtime)(unsigned long long sender, unsigned long credential, unsigned long tx, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_adjtime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tx, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mounted)(unsigned long long sender, unsigned long credential, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mounted)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_unmounted)(unsigned long long sender, unsigned long credential, unsigned int s_index, int flags, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unmounted)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, int flags, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_drop_caches)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int mode, int max_nr);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_drop_caches)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int mode, int max_nr);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mkdir)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mkdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_rmdir)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rmdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_create)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_create)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_unlink)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mknod)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mknod)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_link)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_link)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_symlink)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_symlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_statfs)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, void *buf);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_statfs)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, void *buf);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_rename)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rename)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_lookup)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_lookup)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_setattr)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_readlink)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_getattr)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, void *meta);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, void *meta);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_listxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_listxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_getxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_setxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_tmpfile)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_tmpfile)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_node_put)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int v_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_node_put)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int v_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_sync)(unsigned long long sender, unsigned long credential, unsigned int s_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_sync)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_write)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_fsync)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fsync)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_readdir)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_open)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_open)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_fallocate)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fallocate)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_close)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_ioctl)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_direct_IO)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_direct_IO)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_update_opts)(unsigned long long sender, unsigned long credential, unsigned int s_index, char *ubuf, size_t buflen);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_update_opts)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, char *ubuf, size_t buflen);
	int (*p_sysif_handle_kcall_entry)(void);
};

#else
#ifdef __aarch64__
union devhost_hdlrs_union {
	void *p_sysif_actvhdlr_ptr_void;
	int (*p_sysif_default_handler)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_load_driver)(unsigned long long sender, unsigned long credential, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_load_driver)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_create_device)(unsigned long long sender, unsigned long credential, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_create_device)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_unload_driver)(unsigned long long sender, unsigned long credential, struct hm_actv_buf drvname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_unload_driver)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf drvname);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_bind_device)(unsigned long long sender, unsigned long credential, int devid, struct hm_actv_buf dev_compat);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_bind_device)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, struct hm_actv_buf dev_compat);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_entropy_read)(unsigned long long sender, unsigned long credential, unsigned int num);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_entropy_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int num);
	int (*p__actvbridgehdlr_drvhandler_devhost_rpc_export)(unsigned long long sender, unsigned long credential, int devid, unsigned int cnode_idx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_export)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned int cnode_idx);
	int (*p__actvbridgehdlr_drvhandler_devhost_rpc_invoke)(unsigned long long sender, unsigned long credential, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_invoke)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_open)(unsigned long long sender, unsigned long credential, int devid, rref_t tgt_rref, unsigned int vfs_flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_open)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, rref_t tgt_rref, unsigned int vfs_flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_close)(unsigned long long sender, unsigned long credential, int padding, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int padding, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_read)(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_write)(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_ioctl)(unsigned long long sender, unsigned long credential, int request, unsigned long long file_id, unsigned long arg);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int request, unsigned long long file_id, unsigned long arg);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_llseek)(unsigned long long sender, unsigned long credential, int whence, unsigned long long file_id, long long offset);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_llseek)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int whence, unsigned long long file_id, long long offset);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_mmap)(unsigned long long sender, unsigned long credential, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_mmap)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_munmap)(unsigned long long sender, unsigned long credential, unsigned int key, unsigned long len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_munmap)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int key, unsigned long len);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_read)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_write)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, int op, const void *reg_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, int op, const void *reg_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_close)(unsigned long long sender, unsigned long credential, unsigned int app_cnode_idx, unsigned long long file_id, int fd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int app_cnode_idx, unsigned long long file_id, int fd);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_et)(unsigned long long sender, unsigned long credential, unsigned long long file_id, const void *pre_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_et)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, const void *pre_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_check_feature)(unsigned long long sender, unsigned long credential, int idx, unsigned long long file_id, unsigned long long features);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_check_feature)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int idx, unsigned long long file_id, unsigned long long features);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_run_queue)(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned int flags, unsigned int idx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_run_queue)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned int flags, unsigned int idx);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_direct_access)(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned long offset, unsigned long size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_direct_access)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned long offset, unsigned long size);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_register_bio_notify)(unsigned long long sender, unsigned long credential, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_register_bio_notify)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_send)(unsigned long long sender, unsigned long credential, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_send)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_ioctl)(unsigned long long sender, unsigned long credential, int ifindex, int request, unsigned long args);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, int request, unsigned long args);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_status)(unsigned long long sender, unsigned long credential, int ifindex);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_status)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_prepare)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_prepare)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_init)(unsigned long long sender, unsigned long credential, int ifindex, rref_t tgt_rref);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_init)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, rref_t tgt_rref);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_netlink_recv)(unsigned long long sender, unsigned long credential, int protocol, unsigned int src_portid);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_netlink_recv)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int protocol, unsigned int src_portid);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_action)(unsigned long long sender, unsigned long credential, unsigned int action);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_action)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int action);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_prepare)(unsigned long long sender, unsigned long credential, unsigned int type, struct reboot_cmd cmd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_prepare)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int type, struct reboot_cmd cmd);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_power_off)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_power_off)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_reboot)(unsigned long long sender, unsigned long credential, struct reboot_cmd cmd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_reboot)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct reboot_cmd cmd);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, unsigned int cpu, unsigned int action);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int cpu, unsigned int action);
	int (*p__actvbridgehdlr_drvhandler_devhost_procfs_read)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_procfs_write)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_poll)(unsigned long long sender, unsigned long credential, unsigned int tagid, uintptr_t ctx, bool pollable);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_poll)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, uintptr_t ctx, bool pollable);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_settime)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_settime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_gettime)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_gettime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_getres)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_getres)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_adjtime)(unsigned long long sender, unsigned long credential, unsigned long tx, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_adjtime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tx, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mounted)(unsigned long long sender, unsigned long credential, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mounted)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_unmounted)(unsigned long long sender, unsigned long credential, unsigned int s_index, int flags, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unmounted)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, int flags, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_drop_caches)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int mode, int max_nr);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_drop_caches)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int mode, int max_nr);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mkdir)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mkdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_rmdir)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rmdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_create)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_create)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_unlink)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mknod)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mknod)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_link)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_link)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_symlink)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_symlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_statfs)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, void *buf);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_statfs)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, void *buf);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_rename)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rename)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_lookup)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_lookup)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_setattr)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_readlink)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_getattr)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, void *meta);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, void *meta);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_listxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_listxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_getxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_setxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_tmpfile)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_tmpfile)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_node_put)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int v_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_node_put)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int v_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_sync)(unsigned long long sender, unsigned long credential, unsigned int s_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_sync)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_write)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_fsync)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fsync)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_readdir)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_open)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_open)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_fallocate)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fallocate)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_close)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_ioctl)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_direct_IO)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_direct_IO)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_update_opts)(unsigned long long sender, unsigned long credential, unsigned int s_index, char *ubuf, size_t buflen);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_update_opts)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, char *ubuf, size_t buflen);
	int (*p_sysif_handle_kcall_entry)(unsigned long long sender, unsigned long credential, __u64 arg1, __u64 arg2, __u64 arg3);
};

#endif
#ifdef __arm__
union devhost_hdlrs_union {
	void *p_sysif_actvhdlr_ptr_void;
	int (*p_sysif_default_handler)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_load_driver)(unsigned long long sender, unsigned long credential, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_load_driver)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_create_device)(unsigned long long sender, unsigned long credential, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_create_device)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_unload_driver)(unsigned long long sender, unsigned long credential, struct hm_actv_buf drvname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_unload_driver)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf drvname);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_bind_device)(unsigned long long sender, unsigned long credential, int devid, struct hm_actv_buf dev_compat);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_bind_device)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, struct hm_actv_buf dev_compat);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_entropy_read)(unsigned long long sender, unsigned long credential, unsigned int num);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_entropy_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int num);
	int (*p__actvbridgehdlr_drvhandler_devhost_rpc_export)(unsigned long long sender, unsigned long credential, int devid, unsigned int cnode_idx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_export)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned int cnode_idx);
	int (*p__actvbridgehdlr_drvhandler_devhost_rpc_invoke)(unsigned long long sender, unsigned long credential, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_invoke)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_open)(unsigned long long sender, unsigned long credential, int devid, rref_t tgt_rref, unsigned int vfs_flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_open)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, rref_t tgt_rref, unsigned int vfs_flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_close)(unsigned long long sender, unsigned long credential, int padding, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int padding, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_read)(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_write)(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_ioctl)(unsigned long long sender, unsigned long credential, int request, unsigned long long file_id, unsigned long arg);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int request, unsigned long long file_id, unsigned long arg);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_llseek)(unsigned long long sender, unsigned long credential, int whence, unsigned long long file_id, long long offset);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_llseek)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int whence, unsigned long long file_id, long long offset);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_mmap)(unsigned long long sender, unsigned long credential, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_mmap)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_munmap)(unsigned long long sender, unsigned long credential, unsigned int key, unsigned long len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_munmap)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int key, unsigned long len);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_read)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_write)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, int op, const void *reg_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, int op, const void *reg_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_close)(unsigned long long sender, unsigned long credential, unsigned int app_cnode_idx, unsigned long long file_id, int fd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int app_cnode_idx, unsigned long long file_id, int fd);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_et)(unsigned long long sender, unsigned long credential, unsigned long long file_id, const void *pre_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_et)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, const void *pre_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_check_feature)(unsigned long long sender, unsigned long credential, int idx, unsigned long long file_id, unsigned long long features);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_check_feature)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int idx, unsigned long long file_id, unsigned long long features);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_run_queue)(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned int flags, unsigned int idx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_run_queue)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned int flags, unsigned int idx);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_direct_access)(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned long offset, unsigned long size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_direct_access)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned long offset, unsigned long size);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_register_bio_notify)(unsigned long long sender, unsigned long credential, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_register_bio_notify)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_send)(unsigned long long sender, unsigned long credential, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_send)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_ioctl)(unsigned long long sender, unsigned long credential, int ifindex, int request, unsigned long args);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, int request, unsigned long args);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_status)(unsigned long long sender, unsigned long credential, int ifindex);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_status)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_prepare)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_prepare)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_init)(unsigned long long sender, unsigned long credential, int ifindex, rref_t tgt_rref);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_init)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, rref_t tgt_rref);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_netlink_recv)(unsigned long long sender, unsigned long credential, int protocol, unsigned int src_portid);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_netlink_recv)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int protocol, unsigned int src_portid);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_action)(unsigned long long sender, unsigned long credential, unsigned int action);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_action)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int action);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_prepare)(unsigned long long sender, unsigned long credential, unsigned int type, struct reboot_cmd cmd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_prepare)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int type, struct reboot_cmd cmd);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_power_off)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_power_off)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_reboot)(unsigned long long sender, unsigned long credential, struct reboot_cmd cmd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_reboot)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct reboot_cmd cmd);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, unsigned int cpu, unsigned int action);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int cpu, unsigned int action);
	int (*p__actvbridgehdlr_drvhandler_devhost_procfs_read)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_procfs_write)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_poll)(unsigned long long sender, unsigned long credential, unsigned int tagid, uintptr_t ctx, bool pollable);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_poll)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, uintptr_t ctx, bool pollable);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_settime)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_settime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_gettime)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_gettime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_getres)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_getres)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_adjtime)(unsigned long long sender, unsigned long credential, unsigned long tx, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_adjtime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tx, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mounted)(unsigned long long sender, unsigned long credential, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mounted)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_unmounted)(unsigned long long sender, unsigned long credential, unsigned int s_index, int flags, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unmounted)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, int flags, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_drop_caches)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int mode, int max_nr);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_drop_caches)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int mode, int max_nr);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mkdir)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mkdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_rmdir)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rmdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_create)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_create)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_unlink)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mknod)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mknod)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_link)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_link)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_symlink)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_symlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_statfs)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, void *buf);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_statfs)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, void *buf);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_rename)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rename)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_lookup)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_lookup)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_setattr)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_readlink)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_getattr)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, void *meta);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, void *meta);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_listxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_listxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_getxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_setxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_tmpfile)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_tmpfile)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_node_put)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int v_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_node_put)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int v_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_sync)(unsigned long long sender, unsigned long credential, unsigned int s_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_sync)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_write)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_fsync)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fsync)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_readdir)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_open)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_open)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_fallocate)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fallocate)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_close)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_ioctl)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_direct_IO)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_direct_IO)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_update_opts)(unsigned long long sender, unsigned long credential, unsigned int s_index, char *ubuf, size_t buflen);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_update_opts)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, char *ubuf, size_t buflen);
	int (*p_sysif_handle_kcall_entry)(unsigned long long sender, unsigned long credential);
};

#endif
#endif
#else
#ifndef __ARCH_RPC_REQUIRE_BRIDGE_HDLR
#error "Only support 64-bit server, build for aarch64 please!"
#else
#ifdef __HOST_LLT__
union devhost_hdlrs_union {
	void *p_sysif_actvhdlr_ptr_void;
	int (*p_sysif_default_handler)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_load_driver)(unsigned long long sender, unsigned long credential, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_load_driver)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_create_device)(unsigned long long sender, unsigned long credential, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_create_device)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_unload_driver)(unsigned long long sender, unsigned long credential, struct hm_actv_buf drvname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_unload_driver)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf drvname);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_bind_device)(unsigned long long sender, unsigned long credential, int devid, struct hm_actv_buf dev_compat);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_bind_device)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, struct hm_actv_buf dev_compat);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_entropy_read)(unsigned long long sender, unsigned long credential, unsigned int num);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_entropy_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int num);
	int (*p__actvbridgehdlr_drvhandler_devhost_rpc_export)(unsigned long long sender, unsigned long credential, int devid, unsigned int cnode_idx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_export)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned int cnode_idx);
	int (*p__actvbridgehdlr_drvhandler_devhost_rpc_invoke)(unsigned long long sender, unsigned long credential, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_invoke)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_open)(unsigned long long sender, unsigned long credential, int devid, rref_t tgt_rref, unsigned int vfs_flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_open)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, rref_t tgt_rref, unsigned int vfs_flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_close)(unsigned long long sender, unsigned long credential, int padding, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int padding, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_read)(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_write)(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_ioctl)(unsigned long long sender, unsigned long credential, int request, unsigned long long file_id, unsigned long arg);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int request, unsigned long long file_id, unsigned long arg);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_llseek)(unsigned long long sender, unsigned long credential, int whence, unsigned long long file_id, long long offset);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_llseek)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int whence, unsigned long long file_id, long long offset);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_mmap)(unsigned long long sender, unsigned long credential, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_mmap)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_munmap)(unsigned long long sender, unsigned long credential, unsigned int key, unsigned long len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_munmap)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int key, unsigned long len);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_read)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_write)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, int op, const void *reg_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, int op, const void *reg_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_close)(unsigned long long sender, unsigned long credential, unsigned int app_cnode_idx, unsigned long long file_id, int fd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int app_cnode_idx, unsigned long long file_id, int fd);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_et)(unsigned long long sender, unsigned long credential, unsigned long long file_id, const void *pre_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_et)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, const void *pre_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_check_feature)(unsigned long long sender, unsigned long credential, int idx, unsigned long long file_id, unsigned long long features);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_check_feature)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int idx, unsigned long long file_id, unsigned long long features);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_run_queue)(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned int flags, unsigned int idx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_run_queue)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned int flags, unsigned int idx);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_direct_access)(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned long offset, unsigned long size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_direct_access)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned long offset, unsigned long size);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_register_bio_notify)(unsigned long long sender, unsigned long credential, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_register_bio_notify)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_send)(unsigned long long sender, unsigned long credential, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_send)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_ioctl)(unsigned long long sender, unsigned long credential, int ifindex, int request, unsigned long args);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, int request, unsigned long args);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_status)(unsigned long long sender, unsigned long credential, int ifindex);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_status)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_prepare)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_prepare)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_init)(unsigned long long sender, unsigned long credential, int ifindex, rref_t tgt_rref);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_init)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, rref_t tgt_rref);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_netlink_recv)(unsigned long long sender, unsigned long credential, int protocol, unsigned int src_portid);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_netlink_recv)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int protocol, unsigned int src_portid);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_action)(unsigned long long sender, unsigned long credential, unsigned int action);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_action)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int action);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_prepare)(unsigned long long sender, unsigned long credential, unsigned int type, struct reboot_cmd cmd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_prepare)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int type, struct reboot_cmd cmd);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_power_off)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_power_off)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_reboot)(unsigned long long sender, unsigned long credential, struct reboot_cmd cmd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_reboot)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct reboot_cmd cmd);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, unsigned int cpu, unsigned int action);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int cpu, unsigned int action);
	int (*p__actvbridgehdlr_drvhandler_devhost_procfs_read)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_procfs_write)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_poll)(unsigned long long sender, unsigned long credential, unsigned int tagid, uintptr_t ctx, bool pollable);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_poll)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, uintptr_t ctx, bool pollable);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_settime)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_settime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_gettime)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_gettime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_getres)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_getres)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_adjtime)(unsigned long long sender, unsigned long credential, unsigned long tx, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_adjtime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tx, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mounted)(unsigned long long sender, unsigned long credential, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mounted)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_unmounted)(unsigned long long sender, unsigned long credential, unsigned int s_index, int flags, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unmounted)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, int flags, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_drop_caches)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int mode, int max_nr);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_drop_caches)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int mode, int max_nr);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mkdir)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mkdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_rmdir)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rmdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_create)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_create)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_unlink)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mknod)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mknod)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_link)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_link)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_symlink)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_symlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_statfs)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, void *buf);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_statfs)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, void *buf);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_rename)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rename)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_lookup)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_lookup)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_setattr)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_readlink)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_getattr)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, void *meta);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, void *meta);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_listxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_listxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_getxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_setxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_tmpfile)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_tmpfile)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_node_put)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int v_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_node_put)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int v_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_sync)(unsigned long long sender, unsigned long credential, unsigned int s_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_sync)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_write)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_fsync)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fsync)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_readdir)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_open)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_open)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_fallocate)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fallocate)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_close)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_ioctl)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_direct_IO)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_direct_IO)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_update_opts)(unsigned long long sender, unsigned long credential, unsigned int s_index, char *ubuf, size_t buflen);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_update_opts)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, char *ubuf, size_t buflen);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_load_driver)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_load_driver)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_create_device)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_create_device)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_unload_driver)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_unload_driver)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_bind_device)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_bind_device)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_entropy_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_entropy_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_rpc_export)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_rpc_export)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_rpc_invoke)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_rpc_invoke)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_open)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_open)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_llseek)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_llseek)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_mmap)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_mmap)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_munmap)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_munmap)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_et)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_et)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_block_check_feature)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_check_feature)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_block_run_queue)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_run_queue)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_block_direct_access)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_direct_access)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_block_register_bio_notify)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_register_bio_notify)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_send)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_send)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_status)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_status)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_prepare)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_prepare)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_init)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_init)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_netlink_recv)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_netlink_recv)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_action)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_action)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_prepare)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_prepare)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_power_off)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_power_off)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_reboot)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_reboot)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_procfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_procfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_procfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_procfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_sysfs_poll)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_poll)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_clock_settime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_settime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_clock_gettime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_gettime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_clock_getres)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_getres)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_clock_adjtime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_adjtime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_mounted)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mounted)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_unmounted)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_unmounted)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_drop_caches)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_drop_caches)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_mkdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mkdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_rmdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_rmdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_create)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_create)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_unlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_unlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_mknod)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mknod)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_link)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_link)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_symlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_symlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_statfs)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_statfs)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_rename)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_rename)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_lookup)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_lookup)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_setattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_setattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_readlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_readlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_getattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_getattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_listxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_listxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_getxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_getxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_setxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_setxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_tmpfile)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_tmpfile)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_node_put)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_node_put)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_sync)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_sync)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_fsync)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_fsync)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_readdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_readdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_open)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_open)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_fallocate)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_fallocate)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_direct_IO)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_direct_IO)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_update_opts)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_update_opts)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p_sysif_handle_kcall_entry)(void);
};

#else
#ifdef __aarch64__
union devhost_hdlrs_union {
	void *p_sysif_actvhdlr_ptr_void;
	int (*p_sysif_default_handler)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_load_driver)(unsigned long long sender, unsigned long credential, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_load_driver)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_create_device)(unsigned long long sender, unsigned long credential, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_create_device)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_unload_driver)(unsigned long long sender, unsigned long credential, struct hm_actv_buf drvname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_unload_driver)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf drvname);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_bind_device)(unsigned long long sender, unsigned long credential, int devid, struct hm_actv_buf dev_compat);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_bind_device)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, struct hm_actv_buf dev_compat);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_entropy_read)(unsigned long long sender, unsigned long credential, unsigned int num);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_entropy_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int num);
	int (*p__actvbridgehdlr_drvhandler_devhost_rpc_export)(unsigned long long sender, unsigned long credential, int devid, unsigned int cnode_idx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_export)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned int cnode_idx);
	int (*p__actvbridgehdlr_drvhandler_devhost_rpc_invoke)(unsigned long long sender, unsigned long credential, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_invoke)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_open)(unsigned long long sender, unsigned long credential, int devid, rref_t tgt_rref, unsigned int vfs_flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_open)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, rref_t tgt_rref, unsigned int vfs_flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_close)(unsigned long long sender, unsigned long credential, int padding, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int padding, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_read)(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_write)(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_ioctl)(unsigned long long sender, unsigned long credential, int request, unsigned long long file_id, unsigned long arg);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int request, unsigned long long file_id, unsigned long arg);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_llseek)(unsigned long long sender, unsigned long credential, int whence, unsigned long long file_id, long long offset);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_llseek)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int whence, unsigned long long file_id, long long offset);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_mmap)(unsigned long long sender, unsigned long credential, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_mmap)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_munmap)(unsigned long long sender, unsigned long credential, unsigned int key, unsigned long len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_munmap)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int key, unsigned long len);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_read)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_write)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, int op, const void *reg_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, int op, const void *reg_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_close)(unsigned long long sender, unsigned long credential, unsigned int app_cnode_idx, unsigned long long file_id, int fd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int app_cnode_idx, unsigned long long file_id, int fd);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_et)(unsigned long long sender, unsigned long credential, unsigned long long file_id, const void *pre_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_et)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, const void *pre_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_check_feature)(unsigned long long sender, unsigned long credential, int idx, unsigned long long file_id, unsigned long long features);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_check_feature)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int idx, unsigned long long file_id, unsigned long long features);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_run_queue)(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned int flags, unsigned int idx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_run_queue)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned int flags, unsigned int idx);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_direct_access)(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned long offset, unsigned long size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_direct_access)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned long offset, unsigned long size);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_register_bio_notify)(unsigned long long sender, unsigned long credential, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_register_bio_notify)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_send)(unsigned long long sender, unsigned long credential, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_send)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_ioctl)(unsigned long long sender, unsigned long credential, int ifindex, int request, unsigned long args);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, int request, unsigned long args);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_status)(unsigned long long sender, unsigned long credential, int ifindex);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_status)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_prepare)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_prepare)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_init)(unsigned long long sender, unsigned long credential, int ifindex, rref_t tgt_rref);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_init)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, rref_t tgt_rref);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_netlink_recv)(unsigned long long sender, unsigned long credential, int protocol, unsigned int src_portid);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_netlink_recv)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int protocol, unsigned int src_portid);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_action)(unsigned long long sender, unsigned long credential, unsigned int action);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_action)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int action);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_prepare)(unsigned long long sender, unsigned long credential, unsigned int type, struct reboot_cmd cmd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_prepare)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int type, struct reboot_cmd cmd);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_power_off)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_power_off)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_reboot)(unsigned long long sender, unsigned long credential, struct reboot_cmd cmd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_reboot)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct reboot_cmd cmd);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, unsigned int cpu, unsigned int action);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int cpu, unsigned int action);
	int (*p__actvbridgehdlr_drvhandler_devhost_procfs_read)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_procfs_write)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_poll)(unsigned long long sender, unsigned long credential, unsigned int tagid, uintptr_t ctx, bool pollable);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_poll)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, uintptr_t ctx, bool pollable);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_settime)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_settime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_gettime)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_gettime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_getres)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_getres)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_adjtime)(unsigned long long sender, unsigned long credential, unsigned long tx, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_adjtime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tx, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mounted)(unsigned long long sender, unsigned long credential, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mounted)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_unmounted)(unsigned long long sender, unsigned long credential, unsigned int s_index, int flags, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unmounted)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, int flags, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_drop_caches)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int mode, int max_nr);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_drop_caches)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int mode, int max_nr);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mkdir)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mkdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_rmdir)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rmdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_create)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_create)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_unlink)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mknod)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mknod)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_link)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_link)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_symlink)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_symlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_statfs)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, void *buf);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_statfs)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, void *buf);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_rename)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rename)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_lookup)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_lookup)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_setattr)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_readlink)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_getattr)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, void *meta);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, void *meta);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_listxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_listxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_getxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_setxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_tmpfile)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_tmpfile)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_node_put)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int v_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_node_put)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int v_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_sync)(unsigned long long sender, unsigned long credential, unsigned int s_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_sync)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_write)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_fsync)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fsync)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_readdir)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_open)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_open)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_fallocate)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fallocate)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_close)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_ioctl)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_direct_IO)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_direct_IO)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_update_opts)(unsigned long long sender, unsigned long credential, unsigned int s_index, char *ubuf, size_t buflen);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_update_opts)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, char *ubuf, size_t buflen);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_load_driver)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_load_driver)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_create_device)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_create_device)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_unload_driver)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_unload_driver)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_bind_device)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_bind_device)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_entropy_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_entropy_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_rpc_export)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_rpc_export)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_rpc_invoke)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_rpc_invoke)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_open)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_open)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_llseek)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_llseek)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_mmap)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_mmap)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_munmap)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_munmap)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_et)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_et)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_block_check_feature)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_check_feature)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_block_run_queue)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_run_queue)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_block_direct_access)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_direct_access)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_block_register_bio_notify)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_register_bio_notify)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_send)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_send)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_status)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_status)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_prepare)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_prepare)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_init)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_init)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_netlink_recv)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_netlink_recv)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_action)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_action)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_prepare)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_prepare)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_power_off)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_power_off)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_reboot)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_reboot)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_procfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_procfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_procfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_procfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_sysfs_poll)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_poll)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_clock_settime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_settime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_clock_gettime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_gettime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_clock_getres)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_getres)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_clock_adjtime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_adjtime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_mounted)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mounted)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_unmounted)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_unmounted)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_drop_caches)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_drop_caches)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_mkdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mkdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_rmdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_rmdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_create)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_create)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_unlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_unlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_mknod)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mknod)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_link)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_link)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_symlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_symlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_statfs)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_statfs)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_rename)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_rename)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_lookup)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_lookup)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_setattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_setattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_readlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_readlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_getattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_getattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_listxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_listxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_getxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_getxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_setxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_setxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_tmpfile)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_tmpfile)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_node_put)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_node_put)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_sync)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_sync)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_fsync)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_fsync)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_readdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_readdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_open)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_open)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_fallocate)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_fallocate)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_direct_IO)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_direct_IO)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_update_opts)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_update_opts)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p_sysif_handle_kcall_entry)(unsigned long long sender, unsigned long credential, __u64 arg1, __u64 arg2, __u64 arg3);
};

#endif
#ifdef __arm__
union devhost_hdlrs_union {
	void *p_sysif_actvhdlr_ptr_void;
	int (*p_sysif_default_handler)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_load_driver)(unsigned long long sender, unsigned long credential, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_load_driver)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_create_device)(unsigned long long sender, unsigned long credential, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_create_device)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_unload_driver)(unsigned long long sender, unsigned long credential, struct hm_actv_buf drvname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_unload_driver)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf drvname);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_bind_device)(unsigned long long sender, unsigned long credential, int devid, struct hm_actv_buf dev_compat);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_bind_device)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, struct hm_actv_buf dev_compat);
	int (*p__actvbridgehdlr_drvhandler_devhost_core_entropy_read)(unsigned long long sender, unsigned long credential, unsigned int num);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_core_entropy_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int num);
	int (*p__actvbridgehdlr_drvhandler_devhost_rpc_export)(unsigned long long sender, unsigned long credential, int devid, unsigned int cnode_idx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_export)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned int cnode_idx);
	int (*p__actvbridgehdlr_drvhandler_devhost_rpc_invoke)(unsigned long long sender, unsigned long credential, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_invoke)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_open)(unsigned long long sender, unsigned long credential, int devid, rref_t tgt_rref, unsigned int vfs_flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_open)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, rref_t tgt_rref, unsigned int vfs_flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_close)(unsigned long long sender, unsigned long credential, int padding, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int padding, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_read)(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_write)(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_ioctl)(unsigned long long sender, unsigned long credential, int request, unsigned long long file_id, unsigned long arg);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int request, unsigned long long file_id, unsigned long arg);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_llseek)(unsigned long long sender, unsigned long credential, int whence, unsigned long long file_id, long long offset);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_llseek)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int whence, unsigned long long file_id, long long offset);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_mmap)(unsigned long long sender, unsigned long credential, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_mmap)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_munmap)(unsigned long long sender, unsigned long credential, unsigned int key, unsigned long len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_munmap)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int key, unsigned long len);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_read)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_write)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, int op, const void *reg_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, int op, const void *reg_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_close)(unsigned long long sender, unsigned long credential, unsigned int app_cnode_idx, unsigned long long file_id, int fd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int app_cnode_idx, unsigned long long file_id, int fd);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_et)(unsigned long long sender, unsigned long credential, unsigned long long file_id, const void *pre_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_et)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, const void *pre_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_check_feature)(unsigned long long sender, unsigned long credential, int idx, unsigned long long file_id, unsigned long long features);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_check_feature)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int idx, unsigned long long file_id, unsigned long long features);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_run_queue)(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned int flags, unsigned int idx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_run_queue)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned int flags, unsigned int idx);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_direct_access)(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned long offset, unsigned long size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_direct_access)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned long offset, unsigned long size);
	int (*p__actvbridgehdlr_drvhandler_devhost_block_register_bio_notify)(unsigned long long sender, unsigned long credential, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_block_register_bio_notify)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_send)(unsigned long long sender, unsigned long credential, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_send)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_ioctl)(unsigned long long sender, unsigned long credential, int ifindex, int request, unsigned long args);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, int request, unsigned long args);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_status)(unsigned long long sender, unsigned long credential, int ifindex);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_status)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_prepare)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_prepare)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_init)(unsigned long long sender, unsigned long credential, int ifindex, rref_t tgt_rref);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_init)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, rref_t tgt_rref);
	int (*p__actvbridgehdlr_drvhandler_devhost_net_netlink_recv)(unsigned long long sender, unsigned long credential, int protocol, unsigned int src_portid);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_net_netlink_recv)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int protocol, unsigned int src_portid);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_action)(unsigned long long sender, unsigned long credential, unsigned int action);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_action)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int action);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_prepare)(unsigned long long sender, unsigned long credential, unsigned int type, struct reboot_cmd cmd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_prepare)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int type, struct reboot_cmd cmd);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_power_off)(unsigned long long sender, unsigned long credential);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_power_off)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_reboot)(unsigned long long sender, unsigned long credential, struct reboot_cmd cmd);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_reboot)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct reboot_cmd cmd);
	int (*p__actvbridgehdlr_drvhandler_devhost_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, unsigned int cpu, unsigned int action);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int cpu, unsigned int action);
	int (*p__actvbridgehdlr_drvhandler_devhost_procfs_read)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_procfs_write)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_read)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx);
	int (*p__actvbridgehdlr_drvhandler_devhost_sysfs_poll)(unsigned long long sender, unsigned long credential, unsigned int tagid, uintptr_t ctx, bool pollable);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_poll)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, uintptr_t ctx, bool pollable);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_settime)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_settime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_gettime)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_gettime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_getres)(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_getres)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_clock_adjtime)(unsigned long long sender, unsigned long credential, unsigned long tx, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_clock_adjtime)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tx, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mounted)(unsigned long long sender, unsigned long credential, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mounted)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_unmounted)(unsigned long long sender, unsigned long credential, unsigned int s_index, int flags, unsigned long long file_id);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unmounted)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, int flags, unsigned long long file_id);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_drop_caches)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int mode, int max_nr);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_drop_caches)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int mode, int max_nr);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mkdir)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mkdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_rmdir)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rmdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_create)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_create)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_unlink)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_mknod)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mknod)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_link)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_link)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_symlink)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_symlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_statfs)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, void *buf);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_statfs)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, void *buf);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_rename)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rename)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_lookup)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_lookup)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_setattr)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_readlink)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readlink)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_getattr)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, void *meta);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, void *meta);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_listxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_listxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, char *buffer, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_getxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_setxattr)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setxattr)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_tmpfile)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_tmpfile)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_node_put)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int v_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_node_put)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int v_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_sync)(unsigned long long sender, unsigned long credential, unsigned int s_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_sync)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_write)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_write)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_fsync)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fsync)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_readdir)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readdir)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_open)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_open)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_fallocate)(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fallocate)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_close)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_close)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_ioctl)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_ioctl)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_direct_IO)(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_direct_IO)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type);
	int (*p__actvbridgehdlr_drvhandler_devhost_transfs_update_opts)(unsigned long long sender, unsigned long credential, unsigned int s_index, char *ubuf, size_t buflen);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_update_opts)(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, char *ubuf, size_t buflen);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_load_driver)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_load_driver)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_create_device)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_create_device)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_unload_driver)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_unload_driver)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_bind_device)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_bind_device)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_core_entropy_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_entropy_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_rpc_export)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_rpc_export)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_rpc_invoke)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_rpc_invoke)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_open)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_open)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_llseek)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_llseek)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_mmap)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_mmap)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_munmap)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_munmap)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_ctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_et)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_et)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_reinit_add)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_block_check_feature)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_check_feature)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_block_run_queue)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_run_queue)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_block_direct_access)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_direct_access)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_block_register_bio_notify)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_register_bio_notify)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_send)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_send)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_status)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_status)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_prepare)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_prepare)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_init)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_init)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_net_netlink_recv)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_netlink_recv)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_action)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_action)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_prepare)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_prepare)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_power_off)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_power_off)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_reboot)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_reboot)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_cpuhp_action)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_procfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_procfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_procfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_procfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_read)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_sysfs_poll)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_poll)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_clock_settime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_settime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_clock_gettime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_gettime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_clock_getres)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_getres)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_clock_adjtime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_adjtime)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_mounted)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mounted)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_unmounted)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_unmounted)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_drop_caches)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_drop_caches)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_mkdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mkdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_rmdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_rmdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_create)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_create)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_unlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_unlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_mknod)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mknod)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_link)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_link)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_symlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_symlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_statfs)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_statfs)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_rename)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_rename)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_lookup)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_lookup)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_setattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_setattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_readlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_readlink)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_getattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_getattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_listxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_listxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_getxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_getxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_setxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_setxattr)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_tmpfile)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_tmpfile)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_kill_dentry)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_node_put)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_node_put)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_sync)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_sync)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_write)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_fsync)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_fsync)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_readdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_readdir)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_open)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_open)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_fallocate)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_fallocate)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_close)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_ioctl)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_direct_IO)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_direct_IO)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgehdlr_drvhandler_devhost_compat_transfs_update_opts)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_update_opts)(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3);
	int (*p_sysif_handle_kcall_entry)(unsigned long long sender, unsigned long credential);
};

#endif
#endif
#endif
#endif
extern union devhost_hdlrs_union sysif_devhost_actvhdlr_table[__devhost_method_MAX];

extern union devhost_hdlrs_union sysif_devhost_actvcapcallhdlr_table[__devhost_method_MAX];

extern void sysif_show_devhost_methods(void);


#ifdef SYSIF_GEN_IFACE
#include <stdint.h>
#include <asm/actv_rpc.h>
#include <hongmeng/syscall.h>
#include <hongmeng/panic.h>
#include <hongmeng/errno.h>
#include <libstrict/strict.h>
#include <libhwsecurec/securec.h>
#include <libsysif/base/server_arg_compat.h>
#ifdef __ARCH_RPC_REQUIRE_BRIDGE_HDLR
int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_core_load_driver(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_core_create_device(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_core_unload_driver(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_core_bind_device(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_core_entropy_read(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_rpc_export(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_rpc_invoke(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_open(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_close(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_read(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_write(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_ioctl(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_llseek(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_mmap(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_munmap(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_sysfs_read(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_sysfs_write(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_epoll_ctl(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_epoll_close(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_epoll_et(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_fops_epoll_reinit_add(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_block_check_feature(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_block_run_queue(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_block_direct_access(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_block_register_bio_notify(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_net_send(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_net_ioctl(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_net_status(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_net_prepare(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_net_init(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_net_netlink_recv(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_pm_action(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_pm_prepare(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_pm_power_off(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_pm_reboot(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_pm_cpuhp_action(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_procfs_read(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_procfs_write(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_sysfs_read(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_sysfs_write(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_sysfs_poll(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_clock_settime(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_clock_gettime(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_clock_getres(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_clock_adjtime(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_mounted(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_unmounted(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_drop_caches(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_mkdir(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_rmdir(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_create(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_unlink(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_mknod(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_link(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_symlink(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_statfs(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_rename(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_lookup(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_setattr(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_readlink(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_getattr(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_listxattr(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_getxattr(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_setxattr(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_tmpfile(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_kill_dentry(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_node_put(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_sync(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_write(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_fsync(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_readdir(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_open(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_fallocate(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_close(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_ioctl(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_direct_IO(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) __actvshadowhdlr_drvhandler_devhost_transfs_update_opts(unsigned long long sender, unsigned long credential, ...)
{
	return E_HM_NOSYS;
}

#else
int __attribute__((weak)) actvhdlr_drvhandler_devhost_core_load_driver(unsigned long long sender, unsigned long credential, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_core_create_device(unsigned long long sender, unsigned long credential, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_core_unload_driver(unsigned long long sender, unsigned long credential, struct hm_actv_buf drvname)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_core_bind_device(unsigned long long sender, unsigned long credential, int devid, struct hm_actv_buf dev_compat)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_core_entropy_read(unsigned long long sender, unsigned long credential, unsigned int num)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_rpc_export(unsigned long long sender, unsigned long credential, int devid, unsigned int cnode_idx)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_rpc_invoke(unsigned long long sender, unsigned long credential, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_open(unsigned long long sender, unsigned long credential, int devid, rref_t tgt_rref, unsigned int vfs_flags)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_close(unsigned long long sender, unsigned long credential, int padding, unsigned long long file_id)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_read(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_write(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_ioctl(unsigned long long sender, unsigned long credential, int request, unsigned long long file_id, unsigned long arg)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_llseek(unsigned long long sender, unsigned long credential, int whence, unsigned long long file_id, long long offset)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_mmap(unsigned long long sender, unsigned long credential, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_munmap(unsigned long long sender, unsigned long credential, unsigned int key, unsigned long len)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_sysfs_read(unsigned long long sender, unsigned long credential)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_sysfs_write(unsigned long long sender, unsigned long credential)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_epoll_ctl(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, int op, const void *reg_info)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_epoll_close(unsigned long long sender, unsigned long credential, unsigned int app_cnode_idx, unsigned long long file_id, int fd)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_epoll_et(unsigned long long sender, unsigned long credential, unsigned long long file_id, const void *pre_info)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_fops_epoll_reinit_add(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_block_check_feature(unsigned long long sender, unsigned long credential, int idx, unsigned long long file_id, unsigned long long features)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_block_run_queue(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned int flags, unsigned int idx)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_block_direct_access(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned long offset, unsigned long size)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_block_register_bio_notify(unsigned long long sender, unsigned long credential, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_net_send(unsigned long long sender, unsigned long credential, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_net_ioctl(unsigned long long sender, unsigned long credential, int ifindex, int request, unsigned long args)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_net_status(unsigned long long sender, unsigned long credential, int ifindex)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_net_prepare(unsigned long long sender, unsigned long credential)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_net_init(unsigned long long sender, unsigned long credential, int ifindex, rref_t tgt_rref)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_net_netlink_recv(unsigned long long sender, unsigned long credential, int protocol, unsigned int src_portid)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_pm_action(unsigned long long sender, unsigned long credential, unsigned int action)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_pm_prepare(unsigned long long sender, unsigned long credential, unsigned int type, struct reboot_cmd cmd)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_pm_power_off(unsigned long long sender, unsigned long credential)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_pm_reboot(unsigned long long sender, unsigned long credential, struct reboot_cmd cmd)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_pm_cpuhp_action(unsigned long long sender, unsigned long credential, unsigned int cpu, unsigned int action)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_procfs_read(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_procfs_write(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_sysfs_read(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_sysfs_write(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_sysfs_poll(unsigned long long sender, unsigned long credential, unsigned int tagid, uintptr_t ctx, bool pollable)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_clock_settime(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_clock_gettime(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_clock_getres(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_clock_adjtime(unsigned long long sender, unsigned long credential, unsigned long tx, unsigned long long file_id)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_mounted(unsigned long long sender, unsigned long credential, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_unmounted(unsigned long long sender, unsigned long credential, unsigned int s_index, int flags, unsigned long long file_id)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_drop_caches(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int mode, int max_nr)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_mkdir(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_rmdir(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_create(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_unlink(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_mknod(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_link(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_symlink(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_statfs(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, void *buf)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_rename(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_lookup(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_setattr(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_readlink(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_getattr(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, void *meta)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_listxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, char *buffer, size_t size)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_getxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_setxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_tmpfile(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_kill_dentry(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_node_put(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int v_index)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_sync(unsigned long long sender, unsigned long credential, unsigned int s_index)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_write(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_fsync(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_readdir(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_open(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_fallocate(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_close(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_ioctl(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_direct_IO(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type)
{
	return E_HM_NOSYS;
}

int __attribute__((weak)) actvhdlr_drvhandler_devhost_transfs_update_opts(unsigned long long sender, unsigned long credential, unsigned int s_index, char *ubuf, size_t buflen)
{
	return E_HM_NOSYS;
}

#endif
#ifdef __ARCH_RPC_REQUIRE_BRIDGE_HDLR
static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_core_load_driver(unsigned long long sender, unsigned long credential, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_load_driver(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, name), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, args), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, mpool_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_core_load_driver(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_load_driver(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, name), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, args), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, mpool_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_core_create_device(unsigned long long sender, unsigned long credential, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count)
{
	UNUSED(__actv_fallback_unused_1, __actv_fallback_unused_2);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 1);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_create_device(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, devname), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, dev_compat), __ARCH_ACTV_RPC_RECV_ARG(int, parent_devid), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, resource_count));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_core_create_device(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	UNUSED(__actv_fallback_unused_1, __actv_fallback_unused_2);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 1);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_create_device(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, devname), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, dev_compat), __ARCH_ACTV_RPC_RECV_ARG(int, parent_devid), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, resource_count));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_core_unload_driver(unsigned long long sender, unsigned long credential, struct hm_actv_buf drvname)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_unload_driver(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, drvname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_core_unload_driver(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf drvname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_unload_driver(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, drvname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_core_bind_device(unsigned long long sender, unsigned long credential, int devid, struct hm_actv_buf dev_compat)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_bind_device(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, dev_compat));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_core_bind_device(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, struct hm_actv_buf dev_compat)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_bind_device(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, dev_compat));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_core_entropy_read(unsigned long long sender, unsigned long credential, unsigned int num)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_entropy_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, num));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_core_entropy_read(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int num)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_entropy_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, num));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_rpc_export(unsigned long long sender, unsigned long credential, int devid, unsigned int cnode_idx)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_rpc_export(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, cnode_idx));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_rpc_export(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned int cnode_idx)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_rpc_export(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, cnode_idx));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_rpc_invoke(unsigned long long sender, unsigned long credential, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_rpc_invoke(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, req_ubuf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, req_size), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, resp_ubuf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, resp_size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_rpc_invoke(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_rpc_invoke(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, req_ubuf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, req_size), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, resp_ubuf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, resp_size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_open(unsigned long long sender, unsigned long credential, int devid, rref_t tgt_rref, unsigned int vfs_flags)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_open(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(rref_t, tgt_rref), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, vfs_flags));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_open(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, rref_t tgt_rref, unsigned int vfs_flags)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_open(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(rref_t, tgt_rref), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, vfs_flags));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_close(unsigned long long sender, unsigned long credential, int padding, unsigned long long file_id)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_close(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, padding), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_close(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int padding, unsigned long long file_id)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_close(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, padding), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_read(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, buf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, filep), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, count));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_read(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, buf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, filep), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, count));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_write(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, buf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, count));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_write(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, buf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, count));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_ioctl(unsigned long long sender, unsigned long credential, int request, unsigned long long file_id, unsigned long arg)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_ioctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, request), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, arg));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_ioctl(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int request, unsigned long long file_id, unsigned long arg)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_ioctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, request), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, arg));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_llseek(unsigned long long sender, unsigned long credential, int whence, unsigned long long file_id, long long offset)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long long), __arch_actv_rpc_stksz_alignment(long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_llseek(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, whence), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(long long, offset));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_llseek(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int whence, unsigned long long file_id, long long offset)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long long), __arch_actv_rpc_stksz_alignment(long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_llseek(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, whence), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(long long, offset));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_mmap(unsigned long long sender, unsigned long credential, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_mmap(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, addr), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, vspace_rref), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, length), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, prot), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, flags), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, offset));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_mmap(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_mmap(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, addr), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, vspace_rref), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, length), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, prot), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, flags), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, offset));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_munmap(unsigned long long sender, unsigned long credential, unsigned int key, unsigned long len)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_munmap(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, key), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, len));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_munmap(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int key, unsigned long len)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_munmap(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, key), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, len));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_sysfs_read(unsigned long long sender, unsigned long credential)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	return __actvshadowhdlr_drvhandler_devhost_fops_sysfs_read(sender, credential);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_read(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	return __actvshadowhdlr_drvhandler_devhost_fops_sysfs_read(sender, credential);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_sysfs_write(unsigned long long sender, unsigned long credential)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	return __actvshadowhdlr_drvhandler_devhost_fops_sysfs_write(sender, credential);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_write(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	return __actvshadowhdlr_drvhandler_devhost_fops_sysfs_write(sender, credential);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_epoll_ctl(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, int op, const void *reg_info)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_ctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(int, fd), __ARCH_ACTV_RPC_RECV_ARG(int, op), __ARCH_ACTV_RPC_RECV_ARG(const void*, reg_info));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_ctl(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, int op, const void *reg_info)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_ctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(int, fd), __ARCH_ACTV_RPC_RECV_ARG(int, op), __ARCH_ACTV_RPC_RECV_ARG(const void*, reg_info));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_epoll_close(unsigned long long sender, unsigned long credential, unsigned int app_cnode_idx, unsigned long long file_id, int fd)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_close(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, app_cnode_idx), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(int, fd));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_close(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int app_cnode_idx, unsigned long long file_id, int fd)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_close(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, app_cnode_idx), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(int, fd));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_epoll_et(unsigned long long sender, unsigned long credential, unsigned long long file_id, const void *pre_info)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_et(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(const void*, pre_info));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_et(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, const void *pre_info)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_et(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(const void*, pre_info));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_epoll_reinit_add(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_reinit_add(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(int, fd), __ARCH_ACTV_RPC_RECV_ARG(const void*, pre_reg_info), __ARCH_ACTV_RPC_RECV_ARG(const void*, reg_info));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_reinit_add(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_reinit_add(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(int, fd), __ARCH_ACTV_RPC_RECV_ARG(const void*, pre_reg_info), __ARCH_ACTV_RPC_RECV_ARG(const void*, reg_info));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_block_check_feature(unsigned long long sender, unsigned long credential, int idx, unsigned long long file_id, unsigned long long features)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_check_feature(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, idx), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, features));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_block_check_feature(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int idx, unsigned long long file_id, unsigned long long features)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_check_feature(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, idx), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, features));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_block_run_queue(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned int flags, unsigned int idx)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_run_queue(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, flags), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, idx));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_block_run_queue(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned int flags, unsigned int idx)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_run_queue(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, flags), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, idx));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_block_direct_access(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned long offset, unsigned long size)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_direct_access(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_block_direct_access(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned long offset, unsigned long size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_direct_access(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_block_register_bio_notify(unsigned long long sender, unsigned long credential, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uref_t), __arch_actv_rpc_stksz_alignment(uref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_register_bio_notify(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, file_id), __ARCH_ACTV_RPC_RECV_ARG(uref_t, uref), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, method), __ARCH_ACTV_RPC_RECV_ARG(size_t, bd_shm_size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_block_register_bio_notify(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uref_t), __arch_actv_rpc_stksz_alignment(uref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_register_bio_notify(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, file_id), __ARCH_ACTV_RPC_RECV_ARG(uref_t, uref), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, method), __ARCH_ACTV_RPC_RECV_ARG(size_t, bd_shm_size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_net_send(unsigned long long sender, unsigned long credential, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_send(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, size), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, payload_len), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, flags));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_net_send(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_send(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, size), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, payload_len), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, flags));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_net_ioctl(unsigned long long sender, unsigned long credential, int ifindex, int request, unsigned long args)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_ioctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex), __ARCH_ACTV_RPC_RECV_ARG(int, request), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, args));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_net_ioctl(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, int request, unsigned long args)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_ioctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex), __ARCH_ACTV_RPC_RECV_ARG(int, request), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, args));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_net_status(unsigned long long sender, unsigned long credential, int ifindex)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_status(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_net_status(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_status(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_net_prepare(unsigned long long sender, unsigned long credential)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	return __actvshadowhdlr_drvhandler_devhost_net_prepare(sender, credential);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_net_prepare(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	return __actvshadowhdlr_drvhandler_devhost_net_prepare(sender, credential);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_net_init(unsigned long long sender, unsigned long credential, int ifindex, rref_t tgt_rref)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_init(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex), __ARCH_ACTV_RPC_RECV_ARG(rref_t, tgt_rref));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_net_init(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, rref_t tgt_rref)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_init(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex), __ARCH_ACTV_RPC_RECV_ARG(rref_t, tgt_rref));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_net_netlink_recv(unsigned long long sender, unsigned long credential, int protocol, unsigned int src_portid)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_netlink_recv(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, protocol), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, src_portid));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_net_netlink_recv(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int protocol, unsigned int src_portid)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_netlink_recv(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, protocol), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, src_portid));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_pm_action(unsigned long long sender, unsigned long credential, unsigned int action)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_action(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, action));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_pm_action(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int action)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_action(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, action));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_pm_prepare(unsigned long long sender, unsigned long credential, unsigned int type, struct reboot_cmd cmd)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct reboot_cmd), __arch_actv_rpc_stksz_alignment(struct reboot_cmd));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_prepare(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, type), __ARCH_ACTV_RPC_RECV_ARG(struct reboot_cmd, cmd));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_pm_prepare(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int type, struct reboot_cmd cmd)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct reboot_cmd), __arch_actv_rpc_stksz_alignment(struct reboot_cmd));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_prepare(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, type), __ARCH_ACTV_RPC_RECV_ARG(struct reboot_cmd, cmd));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_pm_power_off(unsigned long long sender, unsigned long credential)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	return __actvshadowhdlr_drvhandler_devhost_pm_power_off(sender, credential);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_pm_power_off(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	return __actvshadowhdlr_drvhandler_devhost_pm_power_off(sender, credential);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_pm_reboot(unsigned long long sender, unsigned long credential, struct reboot_cmd cmd)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct reboot_cmd), __arch_actv_rpc_stksz_alignment(struct reboot_cmd));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_reboot(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct reboot_cmd, cmd));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_pm_reboot(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct reboot_cmd cmd)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct reboot_cmd), __arch_actv_rpc_stksz_alignment(struct reboot_cmd));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_reboot(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct reboot_cmd, cmd));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_pm_cpuhp_action(unsigned long long sender, unsigned long credential, unsigned int cpu, unsigned int action)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_cpuhp_action(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, cpu), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, action));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_pm_cpuhp_action(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int cpu, unsigned int action)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_cpuhp_action(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, cpu), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, action));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_procfs_read(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_procfs_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_procfs_read(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_procfs_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_procfs_write(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_procfs_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_procfs_write(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_procfs_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_sysfs_read(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_sysfs_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_sysfs_read(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_sysfs_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_sysfs_write(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_sysfs_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_sysfs_write(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_sysfs_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_sysfs_poll(unsigned long long sender, unsigned long credential, unsigned int tagid, uintptr_t ctx, bool pollable)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_sysfs_poll(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx), __ARCH_ACTV_RPC_RECV_ARG(bool, pollable));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_sysfs_poll(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, uintptr_t ctx, bool pollable)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_sysfs_poll(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx), __ARCH_ACTV_RPC_RECV_ARG(bool, pollable));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_clock_settime(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_settime(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tp), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_clock_settime(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_settime(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tp), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_clock_gettime(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_gettime(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tp), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_clock_gettime(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_gettime(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tp), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_clock_getres(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_getres(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tp), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_clock_getres(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_getres(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tp), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_clock_adjtime(unsigned long long sender, unsigned long credential, unsigned long tx, unsigned long long file_id)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_adjtime(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tx), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_clock_adjtime(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tx, unsigned long long file_id)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_adjtime(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tx), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_mounted(unsigned long long sender, unsigned long credential, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(dev_t), __arch_actv_rpc_stksz_alignment(dev_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_mounted(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(dev_t, dev_id), __ARCH_ACTV_RPC_RECV_ARG(int, dev_mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, fs_name), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, mount_opts), __ARCH_ACTV_RPC_RECV_ARG(size_t, per_write_size), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sector_dentry_bits));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_mounted(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(dev_t), __arch_actv_rpc_stksz_alignment(dev_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_mounted(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(dev_t, dev_id), __ARCH_ACTV_RPC_RECV_ARG(int, dev_mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, fs_name), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, mount_opts), __ARCH_ACTV_RPC_RECV_ARG(size_t, per_write_size), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sector_dentry_bits));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_unmounted(unsigned long long sender, unsigned long credential, unsigned int s_index, int flags, unsigned long long file_id)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_unmounted(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(int, flags), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_unmounted(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, int flags, unsigned long long file_id)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_unmounted(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(int, flags), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_drop_caches(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int mode, int max_nr)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_drop_caches(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, mode), __ARCH_ACTV_RPC_RECV_ARG(int, max_nr));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_drop_caches(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int mode, int max_nr)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_drop_caches(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, mode), __ARCH_ACTV_RPC_RECV_ARG(int, max_nr));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_mkdir(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_mkdir(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(mode_t, mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_mkdir(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_mkdir(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(mode_t, mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_rmdir(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_rmdir(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_rmdir(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_rmdir(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_create(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_create(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(mode_t, mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_create(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_create(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(mode_t, mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_unlink(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_unlink(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_unlink(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_unlink(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_mknod(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_mknod(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, mode), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, devno), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_mknod(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_mknod(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, mode), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, devno), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_link(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_link(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, old_d_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, new_pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_link(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_link(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, old_d_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, new_pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_symlink(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_symlink(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_path));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_symlink(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_symlink(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_path));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_statfs(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, void *buf)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_statfs(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(void*, buf));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_statfs(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, void *buf)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_statfs(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(void*, buf));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_rename(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_rename(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, old_pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, old_d_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, new_pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_rename(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_rename(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, old_pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, old_d_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, new_pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_lookup(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_lookup(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname), __ARCH_ACTV_RPC_RECV_ARG(void*, meta));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_lookup(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_lookup(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname), __ARCH_ACTV_RPC_RECV_ARG(void*, meta));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_setattr(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_setattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(const void*, attr), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_setattr(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_setattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(const void*, attr), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_readlink(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_readlink(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(char*, buf), __ARCH_ACTV_RPC_RECV_ARG(size_t, bufsize));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_readlink(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_readlink(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(char*, buf), __ARCH_ACTV_RPC_RECV_ARG(size_t, bufsize));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_getattr(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, void *meta)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_getattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(void*, meta));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_getattr(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, void *meta)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_getattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(void*, meta));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_listxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, char *buffer, size_t size)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_listxattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(char*, buffer), __ARCH_ACTV_RPC_RECV_ARG(size_t, size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_listxattr(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, char *buffer, size_t size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_listxattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(char*, buffer), __ARCH_ACTV_RPC_RECV_ARG(size_t, size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_getxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_getxattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(int, prefix), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_name), __ARCH_ACTV_RPC_RECV_ARG(char*, value), __ARCH_ACTV_RPC_RECV_ARG(size_t, size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_getxattr(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_getxattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(int, prefix), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_name), __ARCH_ACTV_RPC_RECV_ARG(char*, value), __ARCH_ACTV_RPC_RECV_ARG(size_t, size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_setxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_setxattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(int, prefix), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_name), __ARCH_ACTV_RPC_RECV_ARG(const char*, value), __ARCH_ACTV_RPC_RECV_ARG(size_t, size), __ARCH_ACTV_RPC_RECV_ARG(int, flags));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_setxattr(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_setxattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(int, prefix), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_name), __ARCH_ACTV_RPC_RECV_ARG(const char*, value), __ARCH_ACTV_RPC_RECV_ARG(size_t, size), __ARCH_ACTV_RPC_RECV_ARG(int, flags));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_tmpfile(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_tmpfile(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_addr), __ARCH_ACTV_RPC_RECV_ARG(mode_t, mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_tmpfile(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_tmpfile(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_addr), __ARCH_ACTV_RPC_RECV_ARG(mode_t, mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_kill_dentry(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_kill_dentry(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_kill_dentry(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_kill_dentry(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_node_put(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int v_index)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_node_put(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, v_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_node_put(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int v_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_node_put(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, v_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_sync(unsigned long long sender, unsigned long credential, unsigned int s_index)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_sync(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_sync(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_sync(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_write(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, pos), __ARCH_ACTV_RPC_RECV_ARG(const void*, src), __ARCH_ACTV_RPC_RECV_ARG(size_t, len));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_write(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, pos), __ARCH_ACTV_RPC_RECV_ARG(const void*, src), __ARCH_ACTV_RPC_RECV_ARG(size_t, len));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_fsync(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_fsync(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_fsync(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_fsync(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_readdir(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_readdir(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, pos), __ARCH_ACTV_RPC_RECV_ARG(void*, buf), __ARCH_ACTV_RPC_RECV_ARG(size_t, size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_readdir(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_readdir(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, pos), __ARCH_ACTV_RPC_RECV_ARG(void*, buf), __ARCH_ACTV_RPC_RECV_ARG(size_t, size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_open(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_open(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_modes), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_flags));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_open(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_open(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_modes), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_flags));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_fallocate(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_fallocate(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, mode), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, pos), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, len));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_fallocate(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_fallocate(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, mode), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, pos), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, len));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_close(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_close(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_close(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_close(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_ioctl(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_ioctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, cmd), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, arg));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_ioctl(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_ioctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, cmd), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, arg));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_direct_IO(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_direct_IO(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, offset), __ARCH_ACTV_RPC_RECV_ARG(void*, buf), __ARCH_ACTV_RPC_RECV_ARG(size_t, len), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, type));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_direct_IO(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_direct_IO(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, offset), __ARCH_ACTV_RPC_RECV_ARG(void*, buf), __ARCH_ACTV_RPC_RECV_ARG(size_t, len), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, type));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_update_opts(unsigned long long sender, unsigned long credential, unsigned int s_index, char *ubuf, size_t buflen)
{
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_update_opts(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(char*, ubuf), __ARCH_ACTV_RPC_RECV_ARG(size_t, buflen));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_update_opts(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, char *ubuf, size_t buflen)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	__maybe_unused unsigned long *__p_prev_frame = __builtin_frame_address(0);
	unsigned long __maybe_unused __stacksz = __ARCH_ACTV_STACK_ARG_SIZE;
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_update_opts(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(char*, ubuf), __ARCH_ACTV_RPC_RECV_ARG(size_t, buflen));
}

#ifndef __sysif_server_devhost_no_compat32_handlers__
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
struct compat_x3 {
	unsigned int reserverd;
	unsigned int w3;
};

#else
struct compat_x3 {
	unsigned int w3;
	unsigned int reserverd;
};

#endif
static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_core_load_driver(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	struct hm_actv_buf __maybe_unused _name;
	struct hm_actv_buf __maybe_unused _args;
	unsigned long long __maybe_unused _mpool_id;
	unsigned long __maybe_unused _size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_name, data, 0, arg_sz, model, type, struct hm_actv_buf, _name)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_args, data, 1, arg_sz, model, type, struct hm_actv_buf, _args)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_mpool_id, data, 2, arg_sz, model, type, unsigned long long, _mpool_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_size, data, 3, arg_sz, model, type, unsigned long, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_load_driver(sender, credential, _name, _args, _mpool_id, _size);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_core_load_driver(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	struct hm_actv_buf __maybe_unused _name;
	struct hm_actv_buf __maybe_unused _args;
	unsigned long long __maybe_unused _mpool_id;
	unsigned long __maybe_unused _size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_name, data, 0, arg_sz, model, type, struct hm_actv_buf, _name)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_args, data, 1, arg_sz, model, type, struct hm_actv_buf, _args)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_mpool_id, data, 2, arg_sz, model, type, unsigned long long, _mpool_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_size, data, 3, arg_sz, model, type, unsigned long, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_load_driver(sender, credential, _name, _args, _mpool_id, _size);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_core_create_device(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	struct hm_actv_buf __maybe_unused _devname;
	struct hm_actv_buf __maybe_unused _dev_compat;
	int __maybe_unused _parent_devid;
	unsigned int __maybe_unused _resource_count;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_devname, data, 0, arg_sz, model, type, struct hm_actv_buf, _devname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_dev_compat, data, 1, arg_sz, model, type, struct hm_actv_buf, _dev_compat)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_parent_devid, data, 2, arg_sz, model, type, int, _parent_devid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_resource_count, data, 3, arg_sz, model, type, unsigned int, _resource_count)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_create_device(sender, credential, _devname, _dev_compat, _parent_devid, _resource_count);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_core_create_device(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_THREE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	struct hm_actv_buf __maybe_unused _devname;
	struct hm_actv_buf __maybe_unused _dev_compat;
	int __maybe_unused _parent_devid;
	unsigned int __maybe_unused _resource_count;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_devname, data, 0, arg_sz, model, type, struct hm_actv_buf, _devname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_dev_compat, data, 1, arg_sz, model, type, struct hm_actv_buf, _dev_compat)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_parent_devid, data, 2, arg_sz, model, type, int, _parent_devid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_resource_count, data, 3, arg_sz, model, type, unsigned int, _resource_count)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_create_device(sender, credential, _devname, _dev_compat, _parent_devid, _resource_count);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_core_unload_driver(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	struct hm_actv_buf __maybe_unused _drvname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_drvname, data, 0, arg_sz, model, type, struct hm_actv_buf, _drvname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_unload_driver(sender, credential, _drvname);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_core_unload_driver(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	struct hm_actv_buf __maybe_unused _drvname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_drvname, data, 0, arg_sz, model, type, struct hm_actv_buf, _drvname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_unload_driver(sender, credential, _drvname);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_core_bind_device(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _devid;
	struct hm_actv_buf __maybe_unused _dev_compat;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_devid, data, 0, arg_sz, model, type, int, _devid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_dev_compat, data, 1, arg_sz, model, type, struct hm_actv_buf, _dev_compat)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_bind_device(sender, credential, _devid, _dev_compat);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_core_bind_device(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _devid;
	struct hm_actv_buf __maybe_unused _dev_compat;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_devid, data, 0, arg_sz, model, type, int, _devid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_dev_compat, data, 1, arg_sz, model, type, struct hm_actv_buf, _dev_compat)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_bind_device(sender, credential, _devid, _dev_compat);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_core_entropy_read(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _num;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_num, data, 0, arg_sz, model, type, unsigned int, _num)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_entropy_read(sender, credential, _num);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_core_entropy_read(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _num;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_num, data, 0, arg_sz, model, type, unsigned int, _num)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_core_entropy_read(sender, credential, _num);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_rpc_export(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _devid;
	unsigned int __maybe_unused _cnode_idx;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_devid, data, 0, arg_sz, model, type, int, _devid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_cnode_idx, data, 1, arg_sz, model, type, unsigned int, _cnode_idx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_rpc_export(sender, credential, _devid, _cnode_idx);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_rpc_export(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _devid;
	unsigned int __maybe_unused _cnode_idx;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_devid, data, 0, arg_sz, model, type, int, _devid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_cnode_idx, data, 1, arg_sz, model, type, unsigned int, _cnode_idx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_rpc_export(sender, credential, _devid, _cnode_idx);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_rpc_invoke(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _devid;
	unsigned long __maybe_unused _req_ubuf;
	unsigned long __maybe_unused _req_size;
	unsigned long __maybe_unused _resp_ubuf;
	unsigned long __maybe_unused _resp_size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_devid, data, 0, arg_sz, model, type, int, _devid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_req_ubuf, data, 1, arg_sz, model, type, unsigned long, _req_ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_req_size, data, 2, arg_sz, model, type, unsigned long, _req_size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_resp_ubuf, data, 3, arg_sz, model, type, unsigned long, _resp_ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_resp_size, data, 4, arg_sz, model, type, unsigned long, _resp_size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_rpc_invoke(sender, credential, _devid, _req_ubuf, _req_size, _resp_ubuf, _resp_size);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_rpc_invoke(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _devid;
	unsigned long __maybe_unused _req_ubuf;
	unsigned long __maybe_unused _req_size;
	unsigned long __maybe_unused _resp_ubuf;
	unsigned long __maybe_unused _resp_size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_devid, data, 0, arg_sz, model, type, int, _devid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_req_ubuf, data, 1, arg_sz, model, type, unsigned long, _req_ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_req_size, data, 2, arg_sz, model, type, unsigned long, _req_size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_resp_ubuf, data, 3, arg_sz, model, type, unsigned long, _resp_ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_resp_size, data, 4, arg_sz, model, type, unsigned long, _resp_size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_rpc_invoke(sender, credential, _devid, _req_ubuf, _req_size, _resp_ubuf, _resp_size);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_open(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _devid;
	rref_t __maybe_unused _tgt_rref;
	unsigned int __maybe_unused _vfs_flags;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_devid, data, 0, arg_sz, model, type, int, _devid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(rref_t);
		type = __type_of(rref_t);
		__fetch_one_arg((void*)&_tgt_rref, data, 1, arg_sz, model, type, rref_t, _tgt_rref)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_vfs_flags, data, 2, arg_sz, model, type, unsigned int, _vfs_flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_open(sender, credential, _devid, _tgt_rref, _vfs_flags);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_open(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _devid;
	rref_t __maybe_unused _tgt_rref;
	unsigned int __maybe_unused _vfs_flags;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_devid, data, 0, arg_sz, model, type, int, _devid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(rref_t);
		type = __type_of(rref_t);
		__fetch_one_arg((void*)&_tgt_rref, data, 1, arg_sz, model, type, rref_t, _tgt_rref)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_vfs_flags, data, 2, arg_sz, model, type, unsigned int, _vfs_flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_open(sender, credential, _devid, _tgt_rref, _vfs_flags);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_close(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _padding;
	unsigned long long __maybe_unused _file_id;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_padding, data, 0, arg_sz, model, type, int, _padding)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_close(sender, credential, _padding, _file_id);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_close(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _padding;
	unsigned long long __maybe_unused _file_id;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_padding, data, 0, arg_sz, model, type, int, _padding)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_close(sender, credential, _padding, _file_id);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_read(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _buf;
	unsigned long long __maybe_unused _filep;
	unsigned long long __maybe_unused _offset;
	unsigned long __maybe_unused _count;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_buf, data, 0, arg_sz, model, type, unsigned long, _buf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_filep, data, 1, arg_sz, model, type, unsigned long long, _filep)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_offset, data, 2, arg_sz, model, type, unsigned long long, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_count, data, 3, arg_sz, model, type, unsigned long, _count)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_read(sender, credential, _buf, _filep, _offset, _count);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_read(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _buf;
	unsigned long long __maybe_unused _filep;
	unsigned long long __maybe_unused _offset;
	unsigned long __maybe_unused _count;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_buf, data, 0, arg_sz, model, type, unsigned long, _buf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_filep, data, 1, arg_sz, model, type, unsigned long long, _filep)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_offset, data, 2, arg_sz, model, type, unsigned long long, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_count, data, 3, arg_sz, model, type, unsigned long, _count)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_read(sender, credential, _buf, _filep, _offset, _count);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_write(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _buf;
	unsigned long long __maybe_unused _file_id;
	unsigned long long __maybe_unused _offset;
	unsigned long __maybe_unused _count;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_buf, data, 0, arg_sz, model, type, unsigned long, _buf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_offset, data, 2, arg_sz, model, type, unsigned long long, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_count, data, 3, arg_sz, model, type, unsigned long, _count)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_write(sender, credential, _buf, _file_id, _offset, _count);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_write(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _buf;
	unsigned long long __maybe_unused _file_id;
	unsigned long long __maybe_unused _offset;
	unsigned long __maybe_unused _count;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_buf, data, 0, arg_sz, model, type, unsigned long, _buf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_offset, data, 2, arg_sz, model, type, unsigned long long, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_count, data, 3, arg_sz, model, type, unsigned long, _count)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_write(sender, credential, _buf, _file_id, _offset, _count);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_ioctl(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _request;
	unsigned long long __maybe_unused _file_id;
	unsigned long __maybe_unused _arg;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_request, data, 0, arg_sz, model, type, int, _request)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_arg, data, 2, arg_sz, model, type, unsigned long, _arg)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_ioctl(sender, credential, _request, _file_id, _arg);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_ioctl(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _request;
	unsigned long long __maybe_unused _file_id;
	unsigned long __maybe_unused _arg;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_request, data, 0, arg_sz, model, type, int, _request)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_arg, data, 2, arg_sz, model, type, unsigned long, _arg)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_ioctl(sender, credential, _request, _file_id, _arg);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_llseek(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _whence;
	unsigned long long __maybe_unused _file_id;
	long long __maybe_unused _offset;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_whence, data, 0, arg_sz, model, type, int, _whence)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(long long);
		type = __type_of(long long);
		__fetch_one_arg((void*)&_offset, data, 2, arg_sz, model, type, long long, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_llseek(sender, credential, _whence, _file_id, _offset);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_llseek(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _whence;
	unsigned long long __maybe_unused _file_id;
	long long __maybe_unused _offset;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_whence, data, 0, arg_sz, model, type, int, _whence)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(long long);
		type = __type_of(long long);
		__fetch_one_arg((void*)&_offset, data, 2, arg_sz, model, type, long long, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_llseek(sender, credential, _whence, _file_id, _offset);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_mmap(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _addr;
	unsigned long long __maybe_unused _file_id;
	unsigned long long __maybe_unused _vspace_rref;
	unsigned long __maybe_unused _length;
	unsigned long __maybe_unused _prot;
	unsigned int __maybe_unused _flags;
	unsigned long __maybe_unused _offset;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_addr, data, 0, arg_sz, model, type, unsigned long, _addr)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_vspace_rref, data, 2, arg_sz, model, type, unsigned long long, _vspace_rref)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_length, data, 3, arg_sz, model, type, unsigned long, _length)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_prot, data, 4, arg_sz, model, type, unsigned long, _prot)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_flags, data, 5, arg_sz, model, type, unsigned int, _flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_offset, data, 6, arg_sz, model, type, unsigned long, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_mmap(sender, credential, _addr, _file_id, _vspace_rref, _length, _prot, _flags, _offset);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_mmap(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _addr;
	unsigned long long __maybe_unused _file_id;
	unsigned long long __maybe_unused _vspace_rref;
	unsigned long __maybe_unused _length;
	unsigned long __maybe_unused _prot;
	unsigned int __maybe_unused _flags;
	unsigned long __maybe_unused _offset;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_addr, data, 0, arg_sz, model, type, unsigned long, _addr)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_vspace_rref, data, 2, arg_sz, model, type, unsigned long long, _vspace_rref)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_length, data, 3, arg_sz, model, type, unsigned long, _length)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_prot, data, 4, arg_sz, model, type, unsigned long, _prot)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_flags, data, 5, arg_sz, model, type, unsigned int, _flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_offset, data, 6, arg_sz, model, type, unsigned long, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_mmap(sender, credential, _addr, _file_id, _vspace_rref, _length, _prot, _flags, _offset);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_munmap(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _key;
	unsigned long __maybe_unused _len;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_key, data, 0, arg_sz, model, type, unsigned int, _key)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_len, data, 1, arg_sz, model, type, unsigned long, _len)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_munmap(sender, credential, _key, _len);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_munmap(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _key;
	unsigned long __maybe_unused _len;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_key, data, 0, arg_sz, model, type, unsigned int, _key)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_len, data, 1, arg_sz, model, type, unsigned long, _len)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_munmap(sender, credential, _key, _len);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_sysfs_read(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	return __actvshadowhdlr_drvhandler_devhost_fops_sysfs_read(sender, credential);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_sysfs_read(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	return __actvshadowhdlr_drvhandler_devhost_fops_sysfs_read(sender, credential);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_sysfs_write(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	return __actvshadowhdlr_drvhandler_devhost_fops_sysfs_write(sender, credential);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_sysfs_write(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	return __actvshadowhdlr_drvhandler_devhost_fops_sysfs_write(sender, credential);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_ctl(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long long __maybe_unused _file_id;
	int __maybe_unused _fd;
	int __maybe_unused _op;
	__maybe_unused const void *_reg_info;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 0, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_fd, data, 1, arg_sz, model, type, int, _fd)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_op, data, 2, arg_sz, model, type, int, _op)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const void*);
		type = __type_of(const void*);
		__fetch_one_arg((void*)&_reg_info, data, 3, arg_sz, model, type, const void*, _reg_info)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_ctl(sender, credential, _file_id, _fd, _op, _reg_info);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_ctl(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long long __maybe_unused _file_id;
	int __maybe_unused _fd;
	int __maybe_unused _op;
	__maybe_unused const void *_reg_info;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 0, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_fd, data, 1, arg_sz, model, type, int, _fd)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_op, data, 2, arg_sz, model, type, int, _op)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const void*);
		type = __type_of(const void*);
		__fetch_one_arg((void*)&_reg_info, data, 3, arg_sz, model, type, const void*, _reg_info)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_ctl(sender, credential, _file_id, _fd, _op, _reg_info);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_close(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _app_cnode_idx;
	unsigned long long __maybe_unused _file_id;
	int __maybe_unused _fd;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_app_cnode_idx, data, 0, arg_sz, model, type, unsigned int, _app_cnode_idx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_fd, data, 2, arg_sz, model, type, int, _fd)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_close(sender, credential, _app_cnode_idx, _file_id, _fd);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_close(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _app_cnode_idx;
	unsigned long long __maybe_unused _file_id;
	int __maybe_unused _fd;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_app_cnode_idx, data, 0, arg_sz, model, type, unsigned int, _app_cnode_idx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_fd, data, 2, arg_sz, model, type, int, _fd)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_close(sender, credential, _app_cnode_idx, _file_id, _fd);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_et(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long long __maybe_unused _file_id;
	__maybe_unused const void *_pre_info;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 0, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const void*);
		type = __type_of(const void*);
		__fetch_one_arg((void*)&_pre_info, data, 1, arg_sz, model, type, const void*, _pre_info)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_et(sender, credential, _file_id, _pre_info);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_et(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long long __maybe_unused _file_id;
	__maybe_unused const void *_pre_info;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 0, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const void*);
		type = __type_of(const void*);
		__fetch_one_arg((void*)&_pre_info, data, 1, arg_sz, model, type, const void*, _pre_info)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_et(sender, credential, _file_id, _pre_info);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_reinit_add(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long long __maybe_unused _file_id;
	int __maybe_unused _fd;
	__maybe_unused const void *_pre_reg_info;
	__maybe_unused const void *_reg_info;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 0, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_fd, data, 1, arg_sz, model, type, int, _fd)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const void*);
		type = __type_of(const void*);
		__fetch_one_arg((void*)&_pre_reg_info, data, 2, arg_sz, model, type, const void*, _pre_reg_info)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const void*);
		type = __type_of(const void*);
		__fetch_one_arg((void*)&_reg_info, data, 3, arg_sz, model, type, const void*, _reg_info)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_reinit_add(sender, credential, _file_id, _fd, _pre_reg_info, _reg_info);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_reinit_add(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long long __maybe_unused _file_id;
	int __maybe_unused _fd;
	__maybe_unused const void *_pre_reg_info;
	__maybe_unused const void *_reg_info;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 0, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_fd, data, 1, arg_sz, model, type, int, _fd)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const void*);
		type = __type_of(const void*);
		__fetch_one_arg((void*)&_pre_reg_info, data, 2, arg_sz, model, type, const void*, _pre_reg_info)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const void*);
		type = __type_of(const void*);
		__fetch_one_arg((void*)&_reg_info, data, 3, arg_sz, model, type, const void*, _reg_info)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_fops_epoll_reinit_add(sender, credential, _file_id, _fd, _pre_reg_info, _reg_info);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_block_check_feature(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _idx;
	unsigned long long __maybe_unused _file_id;
	unsigned long long __maybe_unused _features;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_idx, data, 0, arg_sz, model, type, int, _idx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_features, data, 2, arg_sz, model, type, unsigned long long, _features)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_check_feature(sender, credential, _idx, _file_id, _features);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_block_check_feature(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _idx;
	unsigned long long __maybe_unused _file_id;
	unsigned long long __maybe_unused _features;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_idx, data, 0, arg_sz, model, type, int, _idx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_features, data, 2, arg_sz, model, type, unsigned long long, _features)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_check_feature(sender, credential, _idx, _file_id, _features);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_block_run_queue(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _file_id;
	unsigned int __maybe_unused _flags;
	unsigned int __maybe_unused _idx;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_file_id, data, 0, arg_sz, model, type, unsigned long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_flags, data, 1, arg_sz, model, type, unsigned int, _flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_idx, data, 2, arg_sz, model, type, unsigned int, _idx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_run_queue(sender, credential, _file_id, _flags, _idx);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_block_run_queue(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _file_id;
	unsigned int __maybe_unused _flags;
	unsigned int __maybe_unused _idx;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_file_id, data, 0, arg_sz, model, type, unsigned long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_flags, data, 1, arg_sz, model, type, unsigned int, _flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_idx, data, 2, arg_sz, model, type, unsigned int, _idx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_run_queue(sender, credential, _file_id, _flags, _idx);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_block_direct_access(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _file_id;
	unsigned long __maybe_unused _offset;
	unsigned long __maybe_unused _size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_file_id, data, 0, arg_sz, model, type, unsigned long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_offset, data, 1, arg_sz, model, type, unsigned long, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_size, data, 2, arg_sz, model, type, unsigned long, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_direct_access(sender, credential, _file_id, _offset, _size);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_block_direct_access(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _file_id;
	unsigned long __maybe_unused _offset;
	unsigned long __maybe_unused _size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_file_id, data, 0, arg_sz, model, type, unsigned long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_offset, data, 1, arg_sz, model, type, unsigned long, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_size, data, 2, arg_sz, model, type, unsigned long, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_direct_access(sender, credential, _file_id, _offset, _size);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_block_register_bio_notify(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _file_id;
	uref_t __maybe_unused _uref;
	unsigned int __maybe_unused _method;
	size_t __maybe_unused _bd_shm_size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_file_id, data, 0, arg_sz, model, type, unsigned long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uref_t);
		type = __type_of(uref_t);
		__fetch_one_arg((void*)&_uref, data, 1, arg_sz, model, type, uref_t, _uref)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_method, data, 2, arg_sz, model, type, unsigned int, _method)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_bd_shm_size, data, 3, arg_sz, model, type, size_t, _bd_shm_size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_register_bio_notify(sender, credential, _file_id, _uref, _method, _bd_shm_size);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_block_register_bio_notify(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _file_id;
	uref_t __maybe_unused _uref;
	unsigned int __maybe_unused _method;
	size_t __maybe_unused _bd_shm_size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_file_id, data, 0, arg_sz, model, type, unsigned long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uref_t);
		type = __type_of(uref_t);
		__fetch_one_arg((void*)&_uref, data, 1, arg_sz, model, type, uref_t, _uref)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_method, data, 2, arg_sz, model, type, unsigned int, _method)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_bd_shm_size, data, 3, arg_sz, model, type, size_t, _bd_shm_size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_block_register_bio_notify(sender, credential, _file_id, _uref, _method, _bd_shm_size);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_net_send(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _ifindex;
	unsigned int __maybe_unused _offset;
	unsigned int __maybe_unused _size;
	unsigned int __maybe_unused _payload_len;
	unsigned long __maybe_unused _flags;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_ifindex, data, 0, arg_sz, model, type, int, _ifindex)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_offset, data, 1, arg_sz, model, type, unsigned int, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_size, data, 2, arg_sz, model, type, unsigned int, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_payload_len, data, 3, arg_sz, model, type, unsigned int, _payload_len)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_flags, data, 4, arg_sz, model, type, unsigned long, _flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_send(sender, credential, _ifindex, _offset, _size, _payload_len, _flags);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_net_send(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _ifindex;
	unsigned int __maybe_unused _offset;
	unsigned int __maybe_unused _size;
	unsigned int __maybe_unused _payload_len;
	unsigned long __maybe_unused _flags;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_ifindex, data, 0, arg_sz, model, type, int, _ifindex)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_offset, data, 1, arg_sz, model, type, unsigned int, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_size, data, 2, arg_sz, model, type, unsigned int, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_payload_len, data, 3, arg_sz, model, type, unsigned int, _payload_len)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_flags, data, 4, arg_sz, model, type, unsigned long, _flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_send(sender, credential, _ifindex, _offset, _size, _payload_len, _flags);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_net_ioctl(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _ifindex;
	int __maybe_unused _request;
	unsigned long __maybe_unused _args;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_ifindex, data, 0, arg_sz, model, type, int, _ifindex)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_request, data, 1, arg_sz, model, type, int, _request)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_args, data, 2, arg_sz, model, type, unsigned long, _args)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_ioctl(sender, credential, _ifindex, _request, _args);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_net_ioctl(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _ifindex;
	int __maybe_unused _request;
	unsigned long __maybe_unused _args;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_ifindex, data, 0, arg_sz, model, type, int, _ifindex)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_request, data, 1, arg_sz, model, type, int, _request)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_args, data, 2, arg_sz, model, type, unsigned long, _args)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_ioctl(sender, credential, _ifindex, _request, _args);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_net_status(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _ifindex;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_ifindex, data, 0, arg_sz, model, type, int, _ifindex)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_status(sender, credential, _ifindex);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_net_status(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _ifindex;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_ifindex, data, 0, arg_sz, model, type, int, _ifindex)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_status(sender, credential, _ifindex);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_net_prepare(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	return __actvshadowhdlr_drvhandler_devhost_net_prepare(sender, credential);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_net_prepare(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	return __actvshadowhdlr_drvhandler_devhost_net_prepare(sender, credential);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_net_init(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _ifindex;
	rref_t __maybe_unused _tgt_rref;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_ifindex, data, 0, arg_sz, model, type, int, _ifindex)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(rref_t);
		type = __type_of(rref_t);
		__fetch_one_arg((void*)&_tgt_rref, data, 1, arg_sz, model, type, rref_t, _tgt_rref)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_init(sender, credential, _ifindex, _tgt_rref);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_net_init(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _ifindex;
	rref_t __maybe_unused _tgt_rref;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_ifindex, data, 0, arg_sz, model, type, int, _ifindex)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(rref_t);
		type = __type_of(rref_t);
		__fetch_one_arg((void*)&_tgt_rref, data, 1, arg_sz, model, type, rref_t, _tgt_rref)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_init(sender, credential, _ifindex, _tgt_rref);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_net_netlink_recv(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _protocol;
	unsigned int __maybe_unused _src_portid;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_protocol, data, 0, arg_sz, model, type, int, _protocol)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_src_portid, data, 1, arg_sz, model, type, unsigned int, _src_portid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_netlink_recv(sender, credential, _protocol, _src_portid);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_net_netlink_recv(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	int __maybe_unused _protocol;
	unsigned int __maybe_unused _src_portid;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_protocol, data, 0, arg_sz, model, type, int, _protocol)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_src_portid, data, 1, arg_sz, model, type, unsigned int, _src_portid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_net_netlink_recv(sender, credential, _protocol, _src_portid);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_pm_action(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _action;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_action, data, 0, arg_sz, model, type, unsigned int, _action)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_action(sender, credential, _action);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_action(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _action;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_action, data, 0, arg_sz, model, type, unsigned int, _action)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_action(sender, credential, _action);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_pm_prepare(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _type;
	struct reboot_cmd __maybe_unused _cmd;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_type, data, 0, arg_sz, model, type, unsigned int, _type)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct reboot_cmd);
		type = __type_of(struct reboot_cmd);
		__fetch_one_arg((void*)&_cmd, data, 1, arg_sz, model, type, struct reboot_cmd, _cmd)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_prepare(sender, credential, _type, _cmd);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_prepare(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _type;
	struct reboot_cmd __maybe_unused _cmd;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_type, data, 0, arg_sz, model, type, unsigned int, _type)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct reboot_cmd);
		type = __type_of(struct reboot_cmd);
		__fetch_one_arg((void*)&_cmd, data, 1, arg_sz, model, type, struct reboot_cmd, _cmd)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_prepare(sender, credential, _type, _cmd);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_pm_power_off(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	return __actvshadowhdlr_drvhandler_devhost_pm_power_off(sender, credential);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_power_off(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	return __actvshadowhdlr_drvhandler_devhost_pm_power_off(sender, credential);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_pm_reboot(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	struct reboot_cmd __maybe_unused _cmd;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct reboot_cmd);
		type = __type_of(struct reboot_cmd);
		__fetch_one_arg((void*)&_cmd, data, 0, arg_sz, model, type, struct reboot_cmd, _cmd)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_reboot(sender, credential, _cmd);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_reboot(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	struct reboot_cmd __maybe_unused _cmd;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct reboot_cmd);
		type = __type_of(struct reboot_cmd);
		__fetch_one_arg((void*)&_cmd, data, 0, arg_sz, model, type, struct reboot_cmd, _cmd)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_reboot(sender, credential, _cmd);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_pm_cpuhp_action(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _cpu;
	unsigned int __maybe_unused _action;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_cpu, data, 0, arg_sz, model, type, unsigned int, _cpu)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_action, data, 1, arg_sz, model, type, unsigned int, _action)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_cpuhp_action(sender, credential, _cpu, _action);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_cpuhp_action(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _cpu;
	unsigned int __maybe_unused _action;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_cpu, data, 0, arg_sz, model, type, unsigned int, _cpu)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_action, data, 1, arg_sz, model, type, unsigned int, _action)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_pm_cpuhp_action(sender, credential, _cpu, _action);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_procfs_read(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _tagid;
	unsigned long long __maybe_unused _pos;
	struct hm_actv_buf __maybe_unused _ubuf;
	uintptr_t __maybe_unused _ctx;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_tagid, data, 0, arg_sz, model, type, unsigned int, _tagid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_pos, data, 1, arg_sz, model, type, unsigned long long, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_ubuf, data, 2, arg_sz, model, type, struct hm_actv_buf, _ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uintptr_t);
		type = __type_of(uintptr_t);
		__fetch_one_arg((void*)&_ctx, data, 3, arg_sz, model, type, uintptr_t, _ctx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_procfs_read(sender, credential, _tagid, _pos, _ubuf, _ctx);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_procfs_read(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _tagid;
	unsigned long long __maybe_unused _pos;
	struct hm_actv_buf __maybe_unused _ubuf;
	uintptr_t __maybe_unused _ctx;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_tagid, data, 0, arg_sz, model, type, unsigned int, _tagid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_pos, data, 1, arg_sz, model, type, unsigned long long, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_ubuf, data, 2, arg_sz, model, type, struct hm_actv_buf, _ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uintptr_t);
		type = __type_of(uintptr_t);
		__fetch_one_arg((void*)&_ctx, data, 3, arg_sz, model, type, uintptr_t, _ctx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_procfs_read(sender, credential, _tagid, _pos, _ubuf, _ctx);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_procfs_write(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _tagid;
	unsigned long long __maybe_unused _pos;
	struct hm_actv_buf __maybe_unused _ubuf;
	uintptr_t __maybe_unused _ctx;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_tagid, data, 0, arg_sz, model, type, unsigned int, _tagid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_pos, data, 1, arg_sz, model, type, unsigned long long, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_ubuf, data, 2, arg_sz, model, type, struct hm_actv_buf, _ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uintptr_t);
		type = __type_of(uintptr_t);
		__fetch_one_arg((void*)&_ctx, data, 3, arg_sz, model, type, uintptr_t, _ctx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_procfs_write(sender, credential, _tagid, _pos, _ubuf, _ctx);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_procfs_write(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _tagid;
	unsigned long long __maybe_unused _pos;
	struct hm_actv_buf __maybe_unused _ubuf;
	uintptr_t __maybe_unused _ctx;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_tagid, data, 0, arg_sz, model, type, unsigned int, _tagid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_pos, data, 1, arg_sz, model, type, unsigned long long, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_ubuf, data, 2, arg_sz, model, type, struct hm_actv_buf, _ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uintptr_t);
		type = __type_of(uintptr_t);
		__fetch_one_arg((void*)&_ctx, data, 3, arg_sz, model, type, uintptr_t, _ctx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_procfs_write(sender, credential, _tagid, _pos, _ubuf, _ctx);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_sysfs_read(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _tagid;
	unsigned long long __maybe_unused _pos;
	struct hm_actv_buf __maybe_unused _ubuf;
	uintptr_t __maybe_unused _ctx;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_tagid, data, 0, arg_sz, model, type, unsigned int, _tagid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_pos, data, 1, arg_sz, model, type, unsigned long long, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_ubuf, data, 2, arg_sz, model, type, struct hm_actv_buf, _ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uintptr_t);
		type = __type_of(uintptr_t);
		__fetch_one_arg((void*)&_ctx, data, 3, arg_sz, model, type, uintptr_t, _ctx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_sysfs_read(sender, credential, _tagid, _pos, _ubuf, _ctx);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_read(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _tagid;
	unsigned long long __maybe_unused _pos;
	struct hm_actv_buf __maybe_unused _ubuf;
	uintptr_t __maybe_unused _ctx;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_tagid, data, 0, arg_sz, model, type, unsigned int, _tagid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_pos, data, 1, arg_sz, model, type, unsigned long long, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_ubuf, data, 2, arg_sz, model, type, struct hm_actv_buf, _ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uintptr_t);
		type = __type_of(uintptr_t);
		__fetch_one_arg((void*)&_ctx, data, 3, arg_sz, model, type, uintptr_t, _ctx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_sysfs_read(sender, credential, _tagid, _pos, _ubuf, _ctx);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_sysfs_write(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _tagid;
	unsigned long long __maybe_unused _pos;
	struct hm_actv_buf __maybe_unused _ubuf;
	uintptr_t __maybe_unused _ctx;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_tagid, data, 0, arg_sz, model, type, unsigned int, _tagid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_pos, data, 1, arg_sz, model, type, unsigned long long, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_ubuf, data, 2, arg_sz, model, type, struct hm_actv_buf, _ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uintptr_t);
		type = __type_of(uintptr_t);
		__fetch_one_arg((void*)&_ctx, data, 3, arg_sz, model, type, uintptr_t, _ctx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_sysfs_write(sender, credential, _tagid, _pos, _ubuf, _ctx);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_write(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _tagid;
	unsigned long long __maybe_unused _pos;
	struct hm_actv_buf __maybe_unused _ubuf;
	uintptr_t __maybe_unused _ctx;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_tagid, data, 0, arg_sz, model, type, unsigned int, _tagid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_pos, data, 1, arg_sz, model, type, unsigned long long, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_ubuf, data, 2, arg_sz, model, type, struct hm_actv_buf, _ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uintptr_t);
		type = __type_of(uintptr_t);
		__fetch_one_arg((void*)&_ctx, data, 3, arg_sz, model, type, uintptr_t, _ctx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_sysfs_write(sender, credential, _tagid, _pos, _ubuf, _ctx);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_sysfs_poll(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _tagid;
	uintptr_t __maybe_unused _ctx;
	bool __maybe_unused _pollable;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_tagid, data, 0, arg_sz, model, type, unsigned int, _tagid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uintptr_t);
		type = __type_of(uintptr_t);
		__fetch_one_arg((void*)&_ctx, data, 1, arg_sz, model, type, uintptr_t, _ctx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(bool);
		type = __type_of(bool);
		__fetch_one_arg((void*)&_pollable, data, 2, arg_sz, model, type, bool, _pollable)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_sysfs_poll(sender, credential, _tagid, _ctx, _pollable);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_poll(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _tagid;
	uintptr_t __maybe_unused _ctx;
	bool __maybe_unused _pollable;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_tagid, data, 0, arg_sz, model, type, unsigned int, _tagid)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uintptr_t);
		type = __type_of(uintptr_t);
		__fetch_one_arg((void*)&_ctx, data, 1, arg_sz, model, type, uintptr_t, _ctx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(bool);
		type = __type_of(bool);
		__fetch_one_arg((void*)&_pollable, data, 2, arg_sz, model, type, bool, _pollable)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_sysfs_poll(sender, credential, _tagid, _ctx, _pollable);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_clock_settime(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _tp;
	unsigned long long __maybe_unused _file_id;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_tp, data, 0, arg_sz, model, type, unsigned long, _tp)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_settime(sender, credential, _tp, _file_id);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_settime(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _tp;
	unsigned long long __maybe_unused _file_id;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_tp, data, 0, arg_sz, model, type, unsigned long, _tp)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_settime(sender, credential, _tp, _file_id);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_clock_gettime(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _tp;
	unsigned long long __maybe_unused _file_id;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_tp, data, 0, arg_sz, model, type, unsigned long, _tp)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_gettime(sender, credential, _tp, _file_id);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_gettime(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _tp;
	unsigned long long __maybe_unused _file_id;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_tp, data, 0, arg_sz, model, type, unsigned long, _tp)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_gettime(sender, credential, _tp, _file_id);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_clock_getres(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _tp;
	unsigned long long __maybe_unused _file_id;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_tp, data, 0, arg_sz, model, type, unsigned long, _tp)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_getres(sender, credential, _tp, _file_id);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_getres(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _tp;
	unsigned long long __maybe_unused _file_id;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_tp, data, 0, arg_sz, model, type, unsigned long, _tp)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_getres(sender, credential, _tp, _file_id);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_clock_adjtime(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _tx;
	unsigned long long __maybe_unused _file_id;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_tx, data, 0, arg_sz, model, type, unsigned long, _tx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_adjtime(sender, credential, _tx, _file_id);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_adjtime(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned long __maybe_unused _tx;
	unsigned long long __maybe_unused _file_id;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_tx, data, 0, arg_sz, model, type, unsigned long, _tx)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 1, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_clock_adjtime(sender, credential, _tx, _file_id);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_mounted(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	dev_t __maybe_unused _dev_id;
	int __maybe_unused _dev_mode;
	struct hm_actv_buf __maybe_unused _fs_name;
	struct hm_actv_buf __maybe_unused _mount_opts;
	size_t __maybe_unused _per_write_size;
	unsigned int __maybe_unused _sector_dentry_bits;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(dev_t);
		type = __type_of(dev_t);
		__fetch_one_arg((void*)&_dev_id, data, 0, arg_sz, model, type, dev_t, _dev_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_dev_mode, data, 1, arg_sz, model, type, int, _dev_mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_fs_name, data, 2, arg_sz, model, type, struct hm_actv_buf, _fs_name)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_mount_opts, data, 3, arg_sz, model, type, struct hm_actv_buf, _mount_opts)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_per_write_size, data, 4, arg_sz, model, type, size_t, _per_write_size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sector_dentry_bits, data, 5, arg_sz, model, type, unsigned int, _sector_dentry_bits)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_mounted(sender, credential, _dev_id, _dev_mode, _fs_name, _mount_opts, _per_write_size, _sector_dentry_bits);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mounted(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	dev_t __maybe_unused _dev_id;
	int __maybe_unused _dev_mode;
	struct hm_actv_buf __maybe_unused _fs_name;
	struct hm_actv_buf __maybe_unused _mount_opts;
	size_t __maybe_unused _per_write_size;
	unsigned int __maybe_unused _sector_dentry_bits;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(dev_t);
		type = __type_of(dev_t);
		__fetch_one_arg((void*)&_dev_id, data, 0, arg_sz, model, type, dev_t, _dev_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_dev_mode, data, 1, arg_sz, model, type, int, _dev_mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_fs_name, data, 2, arg_sz, model, type, struct hm_actv_buf, _fs_name)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_mount_opts, data, 3, arg_sz, model, type, struct hm_actv_buf, _mount_opts)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_per_write_size, data, 4, arg_sz, model, type, size_t, _per_write_size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sector_dentry_bits, data, 5, arg_sz, model, type, unsigned int, _sector_dentry_bits)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_mounted(sender, credential, _dev_id, _dev_mode, _fs_name, _mount_opts, _per_write_size, _sector_dentry_bits);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_unmounted(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	int __maybe_unused _flags;
	unsigned long long __maybe_unused _file_id;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_flags, data, 1, arg_sz, model, type, int, _flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 2, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_unmounted(sender, credential, _s_index, _flags, _file_id);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_unmounted(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	int __maybe_unused _flags;
	unsigned long long __maybe_unused _file_id;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_flags, data, 1, arg_sz, model, type, int, _flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_file_id, data, 2, arg_sz, model, type, unsigned long long, _file_id)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_unmounted(sender, credential, _s_index, _flags, _file_id);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_drop_caches(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _mode;
	int __maybe_unused _max_nr;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_mode, data, 1, arg_sz, model, type, unsigned int, _mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_max_nr, data, 2, arg_sz, model, type, int, _max_nr)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_drop_caches(sender, credential, _s_index, _mode, _max_nr);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_drop_caches(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _mode;
	int __maybe_unused _max_nr;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_mode, data, 1, arg_sz, model, type, unsigned int, _mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_max_nr, data, 2, arg_sz, model, type, int, _max_nr)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_drop_caches(sender, credential, _s_index, _mode, _max_nr);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_mkdir(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_index;
	mode_t __maybe_unused _mode;
	struct hm_actv_buf __maybe_unused _actv_dname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(mode_t);
		type = __type_of(mode_t);
		__fetch_one_arg((void*)&_mode, data, 2, arg_sz, model, type, mode_t, _mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_mkdir(sender, credential, _s_index, _pd_index, _mode, _actv_dname);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mkdir(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_index;
	mode_t __maybe_unused _mode;
	struct hm_actv_buf __maybe_unused _actv_dname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(mode_t);
		type = __type_of(mode_t);
		__fetch_one_arg((void*)&_mode, data, 2, arg_sz, model, type, mode_t, _mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_mkdir(sender, credential, _s_index, _pd_index, _mode, _actv_dname);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_rmdir(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_index;
	unsigned int __maybe_unused _d_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 2, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_rmdir(sender, credential, _s_index, _pd_index, _d_index);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_rmdir(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_index;
	unsigned int __maybe_unused _d_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 2, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_rmdir(sender, credential, _s_index, _pd_index, _d_index);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_create(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_index;
	mode_t __maybe_unused _mode;
	struct hm_actv_buf __maybe_unused _actv_dname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(mode_t);
		type = __type_of(mode_t);
		__fetch_one_arg((void*)&_mode, data, 2, arg_sz, model, type, mode_t, _mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_create(sender, credential, _s_index, _pd_index, _mode, _actv_dname);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_create(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_index;
	mode_t __maybe_unused _mode;
	struct hm_actv_buf __maybe_unused _actv_dname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(mode_t);
		type = __type_of(mode_t);
		__fetch_one_arg((void*)&_mode, data, 2, arg_sz, model, type, mode_t, _mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_create(sender, credential, _s_index, _pd_index, _mode, _actv_dname);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_unlink(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_index;
	unsigned int __maybe_unused _d_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 2, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_unlink(sender, credential, _s_index, _pd_index, _d_index);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_unlink(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_index;
	unsigned int __maybe_unused _d_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 2, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_unlink(sender, credential, _s_index, _pd_index, _d_index);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_mknod(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_index;
	unsigned int __maybe_unused _mode;
	unsigned long long __maybe_unused _devno;
	struct hm_actv_buf __maybe_unused _actv_dname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_mode, data, 2, arg_sz, model, type, unsigned int, _mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_devno, data, 3, arg_sz, model, type, unsigned long long, _devno)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 4, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_mknod(sender, credential, _s_index, _pd_index, _mode, _devno, _actv_dname);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mknod(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_index;
	unsigned int __maybe_unused _mode;
	unsigned long long __maybe_unused _devno;
	struct hm_actv_buf __maybe_unused _actv_dname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_mode, data, 2, arg_sz, model, type, unsigned int, _mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long long);
		type = __type_of(unsigned long long);
		__fetch_one_arg((void*)&_devno, data, 3, arg_sz, model, type, unsigned long long, _devno)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 4, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_mknod(sender, credential, _s_index, _pd_index, _mode, _devno, _actv_dname);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_link(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _old_d_index;
	unsigned int __maybe_unused _new_pd_index;
	struct hm_actv_buf __maybe_unused _actv_dname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_old_d_index, data, 1, arg_sz, model, type, unsigned int, _old_d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_new_pd_index, data, 2, arg_sz, model, type, unsigned int, _new_pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_link(sender, credential, _s_index, _old_d_index, _new_pd_index, _actv_dname);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_link(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _old_d_index;
	unsigned int __maybe_unused _new_pd_index;
	struct hm_actv_buf __maybe_unused _actv_dname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_old_d_index, data, 1, arg_sz, model, type, unsigned int, _old_d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_new_pd_index, data, 2, arg_sz, model, type, unsigned int, _new_pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_link(sender, credential, _s_index, _old_d_index, _new_pd_index, _actv_dname);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_symlink(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_index;
	struct hm_actv_buf __maybe_unused _actv_dname;
	struct hm_actv_buf __maybe_unused _actv_path;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 2, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_path, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_path)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_symlink(sender, credential, _s_index, _pd_index, _actv_dname, _actv_path);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_symlink(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_index;
	struct hm_actv_buf __maybe_unused _actv_dname;
	struct hm_actv_buf __maybe_unused _actv_path;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 2, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_path, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_path)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_symlink(sender, credential, _s_index, _pd_index, _actv_dname, _actv_path);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_statfs(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _d_index;
	__maybe_unused void *_buf;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(void*);
		type = __type_of(void*);
		__fetch_one_arg((void*)&_buf, data, 2, arg_sz, model, type, void*, _buf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_statfs(sender, credential, _s_index, _d_index, _buf);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_statfs(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _d_index;
	__maybe_unused void *_buf;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(void*);
		type = __type_of(void*);
		__fetch_one_arg((void*)&_buf, data, 2, arg_sz, model, type, void*, _buf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_statfs(sender, credential, _s_index, _d_index, _buf);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_rename(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _old_pd_index;
	unsigned int __maybe_unused _old_d_index;
	unsigned int __maybe_unused _new_pd_index;
	struct hm_actv_buf __maybe_unused _actv_dname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_old_pd_index, data, 1, arg_sz, model, type, unsigned int, _old_pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_old_d_index, data, 2, arg_sz, model, type, unsigned int, _old_d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_new_pd_index, data, 3, arg_sz, model, type, unsigned int, _new_pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 4, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_rename(sender, credential, _sb_index, _old_pd_index, _old_d_index, _new_pd_index, _actv_dname);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_rename(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _old_pd_index;
	unsigned int __maybe_unused _old_d_index;
	unsigned int __maybe_unused _new_pd_index;
	struct hm_actv_buf __maybe_unused _actv_dname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_old_pd_index, data, 1, arg_sz, model, type, unsigned int, _old_pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_old_d_index, data, 2, arg_sz, model, type, unsigned int, _old_d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_new_pd_index, data, 3, arg_sz, model, type, unsigned int, _new_pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 4, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_rename(sender, credential, _sb_index, _old_pd_index, _old_d_index, _new_pd_index, _actv_dname);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_lookup(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _pd_index;
	struct hm_actv_buf __maybe_unused _actv_dname;
	__maybe_unused void *_meta;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 2, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(void*);
		type = __type_of(void*);
		__fetch_one_arg((void*)&_meta, data, 3, arg_sz, model, type, void*, _meta)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_lookup(sender, credential, _sb_index, _pd_index, _actv_dname, _meta);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_lookup(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _pd_index;
	struct hm_actv_buf __maybe_unused _actv_dname;
	__maybe_unused void *_meta;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_index, data, 1, arg_sz, model, type, unsigned int, _pd_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 2, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(void*);
		type = __type_of(void*);
		__fetch_one_arg((void*)&_meta, data, 3, arg_sz, model, type, void*, _meta)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_lookup(sender, credential, _sb_index, _pd_index, _actv_dname, _meta);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_setattr(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _d_index;
	__maybe_unused const void *_attr;
	uint64_t __maybe_unused _size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const void*);
		type = __type_of(const void*);
		__fetch_one_arg((void*)&_attr, data, 2, arg_sz, model, type, const void*, _attr)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uint64_t);
		type = __type_of(uint64_t);
		__fetch_one_arg((void*)&_size, data, 3, arg_sz, model, type, uint64_t, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_setattr(sender, credential, _sb_index, _d_index, _attr, _size);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_setattr(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _d_index;
	__maybe_unused const void *_attr;
	uint64_t __maybe_unused _size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const void*);
		type = __type_of(const void*);
		__fetch_one_arg((void*)&_attr, data, 2, arg_sz, model, type, const void*, _attr)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uint64_t);
		type = __type_of(uint64_t);
		__fetch_one_arg((void*)&_size, data, 3, arg_sz, model, type, uint64_t, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_setattr(sender, credential, _sb_index, _d_index, _attr, _size);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_readlink(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _d_index;
	__maybe_unused char *_buf;
	size_t __maybe_unused _bufsize;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(char*);
		type = __type_of(char*);
		__fetch_one_arg((void*)&_buf, data, 2, arg_sz, model, type, char*, _buf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_bufsize, data, 3, arg_sz, model, type, size_t, _bufsize)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_readlink(sender, credential, _sb_index, _d_index, _buf, _bufsize);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_readlink(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _d_index;
	__maybe_unused char *_buf;
	size_t __maybe_unused _bufsize;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(char*);
		type = __type_of(char*);
		__fetch_one_arg((void*)&_buf, data, 2, arg_sz, model, type, char*, _buf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_bufsize, data, 3, arg_sz, model, type, size_t, _bufsize)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_readlink(sender, credential, _sb_index, _d_index, _buf, _bufsize);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_getattr(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _d_index;
	__maybe_unused void *_meta;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(void*);
		type = __type_of(void*);
		__fetch_one_arg((void*)&_meta, data, 2, arg_sz, model, type, void*, _meta)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_getattr(sender, credential, _sb_index, _d_index, _meta);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_getattr(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _d_index;
	__maybe_unused void *_meta;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(void*);
		type = __type_of(void*);
		__fetch_one_arg((void*)&_meta, data, 2, arg_sz, model, type, void*, _meta)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_getattr(sender, credential, _sb_index, _d_index, _meta);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_listxattr(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _d_index;
	__maybe_unused char *_buffer;
	size_t __maybe_unused _size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(char*);
		type = __type_of(char*);
		__fetch_one_arg((void*)&_buffer, data, 2, arg_sz, model, type, char*, _buffer)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_size, data, 3, arg_sz, model, type, size_t, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_listxattr(sender, credential, _s_index, _d_index, _buffer, _size);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_listxattr(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _d_index;
	__maybe_unused char *_buffer;
	size_t __maybe_unused _size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(char*);
		type = __type_of(char*);
		__fetch_one_arg((void*)&_buffer, data, 2, arg_sz, model, type, char*, _buffer)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_size, data, 3, arg_sz, model, type, size_t, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_listxattr(sender, credential, _s_index, _d_index, _buffer, _size);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_getxattr(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _d_index;
	int __maybe_unused _prefix;
	struct hm_actv_buf __maybe_unused _actv_name;
	__maybe_unused char *_value;
	size_t __maybe_unused _size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_prefix, data, 2, arg_sz, model, type, int, _prefix)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_name, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_name)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(char*);
		type = __type_of(char*);
		__fetch_one_arg((void*)&_value, data, 4, arg_sz, model, type, char*, _value)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_size, data, 5, arg_sz, model, type, size_t, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_getxattr(sender, credential, _s_index, _d_index, _prefix, _actv_name, _value, _size);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_getxattr(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _d_index;
	int __maybe_unused _prefix;
	struct hm_actv_buf __maybe_unused _actv_name;
	__maybe_unused char *_value;
	size_t __maybe_unused _size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_prefix, data, 2, arg_sz, model, type, int, _prefix)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_name, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_name)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(char*);
		type = __type_of(char*);
		__fetch_one_arg((void*)&_value, data, 4, arg_sz, model, type, char*, _value)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_size, data, 5, arg_sz, model, type, size_t, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_getxattr(sender, credential, _s_index, _d_index, _prefix, _actv_name, _value, _size);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_setxattr(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _d_index;
	int __maybe_unused _prefix;
	struct hm_actv_buf __maybe_unused _actv_name;
	__maybe_unused const char *_value;
	size_t __maybe_unused _size;
	int __maybe_unused _flags;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_prefix, data, 2, arg_sz, model, type, int, _prefix)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_name, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_name)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const char*);
		type = __type_of(const char*);
		__fetch_one_arg((void*)&_value, data, 4, arg_sz, model, type, const char*, _value)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_size, data, 5, arg_sz, model, type, size_t, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_flags, data, 6, arg_sz, model, type, int, _flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_setxattr(sender, credential, _s_index, _d_index, _prefix, _actv_name, _value, _size, _flags);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_setxattr(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _d_index;
	int __maybe_unused _prefix;
	struct hm_actv_buf __maybe_unused _actv_name;
	__maybe_unused const char *_value;
	size_t __maybe_unused _size;
	int __maybe_unused _flags;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_prefix, data, 2, arg_sz, model, type, int, _prefix)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_name, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_name)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const char*);
		type = __type_of(const char*);
		__fetch_one_arg((void*)&_value, data, 4, arg_sz, model, type, const char*, _value)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_size, data, 5, arg_sz, model, type, size_t, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(int);
		type = __type_of(int);
		__fetch_one_arg((void*)&_flags, data, 6, arg_sz, model, type, int, _flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_setxattr(sender, credential, _s_index, _d_index, _prefix, _actv_name, _value, _size, _flags);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_tmpfile(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_addr;
	mode_t __maybe_unused _mode;
	struct hm_actv_buf __maybe_unused _actv_dname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_addr, data, 1, arg_sz, model, type, unsigned int, _pd_addr)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(mode_t);
		type = __type_of(mode_t);
		__fetch_one_arg((void*)&_mode, data, 2, arg_sz, model, type, mode_t, _mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_tmpfile(sender, credential, _s_index, _pd_addr, _mode, _actv_dname);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_tmpfile(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _pd_addr;
	mode_t __maybe_unused _mode;
	struct hm_actv_buf __maybe_unused _actv_dname;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_pd_addr, data, 1, arg_sz, model, type, unsigned int, _pd_addr)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(mode_t);
		type = __type_of(mode_t);
		__fetch_one_arg((void*)&_mode, data, 2, arg_sz, model, type, mode_t, _mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(struct hm_actv_buf);
		type = __type_of(struct hm_actv_buf);
		__fetch_one_arg((void*)&_actv_dname, data, 3, arg_sz, model, type, struct hm_actv_buf, _actv_dname)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_tmpfile(sender, credential, _s_index, _pd_addr, _mode, _actv_dname);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_kill_dentry(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _d_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_kill_dentry(sender, credential, _s_index, _d_index);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_kill_dentry(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _d_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_kill_dentry(sender, credential, _s_index, _d_index);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_node_put(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _v_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_v_index, data, 1, arg_sz, model, type, unsigned int, _v_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_node_put(sender, credential, _s_index, _v_index);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_node_put(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _v_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_v_index, data, 1, arg_sz, model, type, unsigned int, _v_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_node_put(sender, credential, _s_index, _v_index);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_sync(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_sync(sender, credential, _s_index);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_sync(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_sync(sender, credential, _s_index);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_write(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _f_index;
	uint64_t __maybe_unused _pos;
	__maybe_unused const void *_src;
	size_t __maybe_unused _len;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uint64_t);
		type = __type_of(uint64_t);
		__fetch_one_arg((void*)&_pos, data, 2, arg_sz, model, type, uint64_t, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const void*);
		type = __type_of(const void*);
		__fetch_one_arg((void*)&_src, data, 3, arg_sz, model, type, const void*, _src)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_len, data, 4, arg_sz, model, type, size_t, _len)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_write(sender, credential, _s_index, _f_index, _pos, _src, _len);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_write(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _f_index;
	uint64_t __maybe_unused _pos;
	__maybe_unused const void *_src;
	size_t __maybe_unused _len;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uint64_t);
		type = __type_of(uint64_t);
		__fetch_one_arg((void*)&_pos, data, 2, arg_sz, model, type, uint64_t, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(const void*);
		type = __type_of(const void*);
		__fetch_one_arg((void*)&_src, data, 3, arg_sz, model, type, const void*, _src)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_len, data, 4, arg_sz, model, type, size_t, _len)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_write(sender, credential, _s_index, _f_index, _pos, _src, _len);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_fsync(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _f_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_fsync(sender, credential, _s_index, _f_index);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_fsync(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _f_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_fsync(sender, credential, _s_index, _f_index);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_readdir(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _f_index;
	uint64_t __maybe_unused _pos;
	__maybe_unused void *_buf;
	size_t __maybe_unused _size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uint64_t);
		type = __type_of(uint64_t);
		__fetch_one_arg((void*)&_pos, data, 2, arg_sz, model, type, uint64_t, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(void*);
		type = __type_of(void*);
		__fetch_one_arg((void*)&_buf, data, 3, arg_sz, model, type, void*, _buf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_size, data, 4, arg_sz, model, type, size_t, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_readdir(sender, credential, _sb_index, _f_index, _pos, _buf, _size);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_readdir(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _f_index;
	uint64_t __maybe_unused _pos;
	__maybe_unused void *_buf;
	size_t __maybe_unused _size;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uint64_t);
		type = __type_of(uint64_t);
		__fetch_one_arg((void*)&_pos, data, 2, arg_sz, model, type, uint64_t, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(void*);
		type = __type_of(void*);
		__fetch_one_arg((void*)&_buf, data, 3, arg_sz, model, type, void*, _buf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_size, data, 4, arg_sz, model, type, size_t, _size)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_readdir(sender, credential, _sb_index, _f_index, _pos, _buf, _size);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_open(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _d_index;
	unsigned int __maybe_unused _f_modes;
	unsigned int __maybe_unused _f_flags;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_modes, data, 2, arg_sz, model, type, unsigned int, _f_modes)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_flags, data, 3, arg_sz, model, type, unsigned int, _f_flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_open(sender, credential, _sb_index, _d_index, _f_modes, _f_flags);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_open(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _d_index;
	unsigned int __maybe_unused _f_modes;
	unsigned int __maybe_unused _f_flags;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_d_index, data, 1, arg_sz, model, type, unsigned int, _d_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_modes, data, 2, arg_sz, model, type, unsigned int, _f_modes)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_flags, data, 3, arg_sz, model, type, unsigned int, _f_flags)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_open(sender, credential, _sb_index, _d_index, _f_modes, _f_flags);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_fallocate(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _f_index;
	unsigned int __maybe_unused _mode;
	uint64_t __maybe_unused _pos;
	uint64_t __maybe_unused _len;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_mode, data, 2, arg_sz, model, type, unsigned int, _mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uint64_t);
		type = __type_of(uint64_t);
		__fetch_one_arg((void*)&_pos, data, 3, arg_sz, model, type, uint64_t, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uint64_t);
		type = __type_of(uint64_t);
		__fetch_one_arg((void*)&_len, data, 4, arg_sz, model, type, uint64_t, _len)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_fallocate(sender, credential, _sb_index, _f_index, _mode, _pos, _len);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_fallocate(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _sb_index;
	unsigned int __maybe_unused _f_index;
	unsigned int __maybe_unused _mode;
	uint64_t __maybe_unused _pos;
	uint64_t __maybe_unused _len;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_sb_index, data, 0, arg_sz, model, type, unsigned int, _sb_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_mode, data, 2, arg_sz, model, type, unsigned int, _mode)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uint64_t);
		type = __type_of(uint64_t);
		__fetch_one_arg((void*)&_pos, data, 3, arg_sz, model, type, uint64_t, _pos)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uint64_t);
		type = __type_of(uint64_t);
		__fetch_one_arg((void*)&_len, data, 4, arg_sz, model, type, uint64_t, _len)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_fallocate(sender, credential, _sb_index, _f_index, _mode, _pos, _len);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_close(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _f_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_close(sender, credential, _s_index, _f_index);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_close(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _f_index;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_close(sender, credential, _s_index, _f_index);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_ioctl(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _f_index;
	unsigned int __maybe_unused _cmd;
	unsigned long __maybe_unused _arg;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_cmd, data, 2, arg_sz, model, type, unsigned int, _cmd)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_arg, data, 3, arg_sz, model, type, unsigned long, _arg)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_ioctl(sender, credential, _s_index, _f_index, _cmd, _arg);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_ioctl(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _f_index;
	unsigned int __maybe_unused _cmd;
	unsigned long __maybe_unused _arg;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_cmd, data, 2, arg_sz, model, type, unsigned int, _cmd)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned long);
		type = __type_of(unsigned long);
		__fetch_one_arg((void*)&_arg, data, 3, arg_sz, model, type, unsigned long, _arg)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_ioctl(sender, credential, _s_index, _f_index, _cmd, _arg);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_direct_IO(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _f_index;
	uint64_t __maybe_unused _offset;
	__maybe_unused void *_buf;
	size_t __maybe_unused _len;
	unsigned int __maybe_unused _type;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uint64_t);
		type = __type_of(uint64_t);
		__fetch_one_arg((void*)&_offset, data, 2, arg_sz, model, type, uint64_t, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(void*);
		type = __type_of(void*);
		__fetch_one_arg((void*)&_buf, data, 3, arg_sz, model, type, void*, _buf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_len, data, 4, arg_sz, model, type, size_t, _len)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_type, data, 5, arg_sz, model, type, unsigned int, _type)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_direct_IO(sender, credential, _s_index, _f_index, _offset, _buf, _len, _type);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_direct_IO(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	unsigned int __maybe_unused _f_index;
	uint64_t __maybe_unused _offset;
	__maybe_unused void *_buf;
	size_t __maybe_unused _len;
	unsigned int __maybe_unused _type;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_f_index, data, 1, arg_sz, model, type, unsigned int, _f_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(uint64_t);
		type = __type_of(uint64_t);
		__fetch_one_arg((void*)&_offset, data, 2, arg_sz, model, type, uint64_t, _offset)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(void*);
		type = __type_of(void*);
		__fetch_one_arg((void*)&_buf, data, 3, arg_sz, model, type, void*, _buf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_len, data, 4, arg_sz, model, type, size_t, _len)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_type, data, 5, arg_sz, model, type, unsigned int, _type)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_direct_IO(sender, credential, _s_index, _f_index, _offset, _buf, _len, _type);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_compat_transfs_update_opts(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_NONE;
	bool __maybe_unused is_r3_passing = true;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	__maybe_unused char *_ubuf;
	size_t __maybe_unused _buflen;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(char*);
		type = __type_of(char*);
		__fetch_one_arg((void*)&_ubuf, data, 1, arg_sz, model, type, char*, _ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_buflen, data, 2, arg_sz, model, type, size_t, _buflen)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_update_opts(sender, credential, _s_index, _ubuf, _buflen);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_update_opts(unsigned long long sender, unsigned long credential, unsigned long sp, unsigned long x3)
{
	__maybe_unused union {
		unsigned long x3;
		struct compat_x3 __compat_x3;
	} ___val = {
		0
	};
	___val.x3 = x3;
	unsigned int __maybe_unused ___w3 = ___val.__compat_x3.w3;
	__maybe_unused char *data = (char*)(uintptr_t)sp;
	unsigned int __maybe_unused cursor = __RPC_ACTVCALL_HDLR_UNUSED_ARGS_ONE;
	bool __maybe_unused is_r3_passing = false;
	enum __data_model __maybe_unused model = _DATA_MODEL_ILP32;
	enum __type __maybe_unused type;
	unsigned int __maybe_unused _s_index;
	__maybe_unused char *_ubuf;
	size_t __maybe_unused _buflen;
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(unsigned int);
		type = __type_of(unsigned int);
		__fetch_one_arg((void*)&_s_index, data, 0, arg_sz, model, type, unsigned int, _s_index)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(char*);
		type = __type_of(char*);
		__fetch_one_arg((void*)&_ubuf, data, 1, arg_sz, model, type, char*, _ubuf)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	do {
		int fetch_sz;
		unsigned long align;
		unsigned long arg_sz = sizeof(size_t);
		type = __type_of(size_t);
		__fetch_one_arg((void*)&_buflen, data, 2, arg_sz, model, type, size_t, _buflen)
		if (fetch_sz < 0) {
			panic("failed to fetch arg: %s\n", hmstrerror(fetch_sz));
		}
		cursor += fetch_sz;
	} while (0);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	if (__nr_ul * sizeof(__u32) != cursor) {
		return E_HM_INVAL;
	}
	return __actvshadowhdlr_drvhandler_devhost_transfs_update_opts(sender, credential, _s_index, _ubuf, _buflen);
}

#endif
#else
static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_core_load_driver(unsigned long long sender, unsigned long credential, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_core_load_driver(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, name), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, args), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, mpool_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_core_load_driver(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf name, struct hm_actv_buf args, unsigned long long mpool_id, unsigned long size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_core_load_driver(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, name), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, args), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, mpool_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_core_create_device(unsigned long long sender, unsigned long credential, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count)
{
	UNUSED(__actv_fallback_unused_1, __actv_fallback_unused_2);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 1);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_core_create_device(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, devname), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, dev_compat), __ARCH_ACTV_RPC_RECV_ARG(int, parent_devid), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, resource_count));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_core_create_device(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long __actv_fallback_unused_1, unsigned long __actv_fallback_unused_2, struct hm_actv_buf devname, struct hm_actv_buf dev_compat, int parent_devid, unsigned int resource_count)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	UNUSED(__actv_fallback_unused_1, __actv_fallback_unused_2);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 1);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_core_create_device(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, devname), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, dev_compat), __ARCH_ACTV_RPC_RECV_ARG(int, parent_devid), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, resource_count));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_core_unload_driver(unsigned long long sender, unsigned long credential, struct hm_actv_buf drvname)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_core_unload_driver(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, drvname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_core_unload_driver(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct hm_actv_buf drvname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_core_unload_driver(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, drvname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_core_bind_device(unsigned long long sender, unsigned long credential, int devid, struct hm_actv_buf dev_compat)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_core_bind_device(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, dev_compat));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_core_bind_device(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, struct hm_actv_buf dev_compat)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_core_bind_device(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, dev_compat));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_core_entropy_read(unsigned long long sender, unsigned long credential, unsigned int num)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_core_entropy_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, num));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_core_entropy_read(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int num)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_core_entropy_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, num));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_rpc_export(unsigned long long sender, unsigned long credential, int devid, unsigned int cnode_idx)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_rpc_export(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, cnode_idx));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_rpc_export(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned int cnode_idx)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_rpc_export(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, cnode_idx));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_rpc_invoke(unsigned long long sender, unsigned long credential, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_rpc_invoke(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, req_ubuf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, req_size), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, resp_ubuf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, resp_size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_rpc_invoke(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, unsigned long req_ubuf, unsigned long req_size, unsigned long resp_ubuf, unsigned long resp_size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_rpc_invoke(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, req_ubuf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, req_size), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, resp_ubuf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, resp_size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_open(unsigned long long sender, unsigned long credential, int devid, rref_t tgt_rref, unsigned int vfs_flags)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_open(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(rref_t, tgt_rref), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, vfs_flags));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_open(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int devid, rref_t tgt_rref, unsigned int vfs_flags)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_open(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, devid), __ARCH_ACTV_RPC_RECV_ARG(rref_t, tgt_rref), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, vfs_flags));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_close(unsigned long long sender, unsigned long credential, int padding, unsigned long long file_id)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_close(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, padding), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_close(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int padding, unsigned long long file_id)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_close(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, padding), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_read(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, buf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, filep), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, count));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_read(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long filep, unsigned long long offset, unsigned long count)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, buf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, filep), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, count));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_write(unsigned long long sender, unsigned long credential, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, buf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, count));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_write(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long buf, unsigned long long file_id, unsigned long long offset, unsigned long count)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, buf), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, count));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_ioctl(unsigned long long sender, unsigned long credential, int request, unsigned long long file_id, unsigned long arg)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_ioctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, request), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, arg));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_ioctl(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int request, unsigned long long file_id, unsigned long arg)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_ioctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, request), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, arg));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_llseek(unsigned long long sender, unsigned long credential, int whence, unsigned long long file_id, long long offset)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long long), __arch_actv_rpc_stksz_alignment(long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_llseek(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, whence), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(long long, offset));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_llseek(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int whence, unsigned long long file_id, long long offset)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long long), __arch_actv_rpc_stksz_alignment(long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_llseek(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, whence), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(long long, offset));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_mmap(unsigned long long sender, unsigned long credential, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_mmap(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, addr), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, vspace_rref), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, length), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, prot), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, flags), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, offset));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_mmap(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long addr, unsigned long long file_id, unsigned long long vspace_rref, unsigned long length, unsigned long prot, unsigned int flags, unsigned long offset)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_mmap(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, addr), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, vspace_rref), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, length), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, prot), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, flags), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, offset));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_munmap(unsigned long long sender, unsigned long credential, unsigned int key, unsigned long len)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_munmap(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, key), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, len));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_munmap(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int key, unsigned long len)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_munmap(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, key), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, len));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_sysfs_read(unsigned long long sender, unsigned long credential)
{
	return actvhdlr_drvhandler_devhost_fops_sysfs_read(sender, credential);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_read(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	return actvhdlr_drvhandler_devhost_fops_sysfs_read(sender, credential);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_sysfs_write(unsigned long long sender, unsigned long credential)
{
	return actvhdlr_drvhandler_devhost_fops_sysfs_write(sender, credential);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_write(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	return actvhdlr_drvhandler_devhost_fops_sysfs_write(sender, credential);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_epoll_ctl(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, int op, const void *reg_info)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_epoll_ctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(int, fd), __ARCH_ACTV_RPC_RECV_ARG(int, op), __ARCH_ACTV_RPC_RECV_ARG(const void*, reg_info));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_ctl(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, int op, const void *reg_info)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_epoll_ctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(int, fd), __ARCH_ACTV_RPC_RECV_ARG(int, op), __ARCH_ACTV_RPC_RECV_ARG(const void*, reg_info));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_epoll_close(unsigned long long sender, unsigned long credential, unsigned int app_cnode_idx, unsigned long long file_id, int fd)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_epoll_close(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, app_cnode_idx), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(int, fd));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_close(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int app_cnode_idx, unsigned long long file_id, int fd)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_epoll_close(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, app_cnode_idx), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(int, fd));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_epoll_et(unsigned long long sender, unsigned long credential, unsigned long long file_id, const void *pre_info)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_epoll_et(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(const void*, pre_info));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_et(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, const void *pre_info)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_epoll_et(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(const void*, pre_info));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_fops_epoll_reinit_add(unsigned long long sender, unsigned long credential, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_epoll_reinit_add(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(int, fd), __ARCH_ACTV_RPC_RECV_ARG(const void*, pre_reg_info), __ARCH_ACTV_RPC_RECV_ARG(const void*, reg_info));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_reinit_add(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long long file_id, int fd, const void *pre_reg_info, const void *reg_info)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_fops_epoll_reinit_add(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(int, fd), __ARCH_ACTV_RPC_RECV_ARG(const void*, pre_reg_info), __ARCH_ACTV_RPC_RECV_ARG(const void*, reg_info));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_block_check_feature(unsigned long long sender, unsigned long credential, int idx, unsigned long long file_id, unsigned long long features)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_block_check_feature(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, idx), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, features));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_block_check_feature(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int idx, unsigned long long file_id, unsigned long long features)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_block_check_feature(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, idx), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, features));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_block_run_queue(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned int flags, unsigned int idx)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_block_run_queue(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, flags), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, idx));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_block_run_queue(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned int flags, unsigned int idx)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_block_run_queue(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, flags), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, idx));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_block_direct_access(unsigned long long sender, unsigned long credential, unsigned long file_id, unsigned long offset, unsigned long size)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_block_direct_access(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_block_direct_access(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, unsigned long offset, unsigned long size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_block_direct_access(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, file_id), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_block_register_bio_notify(unsigned long long sender, unsigned long credential, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uref_t), __arch_actv_rpc_stksz_alignment(uref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_block_register_bio_notify(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, file_id), __ARCH_ACTV_RPC_RECV_ARG(uref_t, uref), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, method), __ARCH_ACTV_RPC_RECV_ARG(size_t, bd_shm_size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_block_register_bio_notify(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long file_id, uref_t uref, unsigned int method, size_t bd_shm_size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uref_t), __arch_actv_rpc_stksz_alignment(uref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_block_register_bio_notify(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, file_id), __ARCH_ACTV_RPC_RECV_ARG(uref_t, uref), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, method), __ARCH_ACTV_RPC_RECV_ARG(size_t, bd_shm_size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_net_send(unsigned long long sender, unsigned long credential, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_net_send(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, size), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, payload_len), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, flags));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_net_send(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, unsigned int offset, unsigned int size, unsigned int payload_len, unsigned long flags)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_net_send(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, offset), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, size), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, payload_len), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, flags));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_net_ioctl(unsigned long long sender, unsigned long credential, int ifindex, int request, unsigned long args)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_net_ioctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex), __ARCH_ACTV_RPC_RECV_ARG(int, request), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, args));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_net_ioctl(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, int request, unsigned long args)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_net_ioctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex), __ARCH_ACTV_RPC_RECV_ARG(int, request), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, args));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_net_status(unsigned long long sender, unsigned long credential, int ifindex)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_net_status(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_net_status(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_net_status(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_net_prepare(unsigned long long sender, unsigned long credential)
{
	return actvhdlr_drvhandler_devhost_net_prepare(sender, credential);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_net_prepare(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	return actvhdlr_drvhandler_devhost_net_prepare(sender, credential);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_net_init(unsigned long long sender, unsigned long credential, int ifindex, rref_t tgt_rref)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_net_init(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex), __ARCH_ACTV_RPC_RECV_ARG(rref_t, tgt_rref));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_net_init(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int ifindex, rref_t tgt_rref)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_net_init(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, ifindex), __ARCH_ACTV_RPC_RECV_ARG(rref_t, tgt_rref));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_net_netlink_recv(unsigned long long sender, unsigned long credential, int protocol, unsigned int src_portid)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_net_netlink_recv(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, protocol), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, src_portid));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_net_netlink_recv(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, int protocol, unsigned int src_portid)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_net_netlink_recv(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(int, protocol), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, src_portid));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_pm_action(unsigned long long sender, unsigned long credential, unsigned int action)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_pm_action(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, action));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_pm_action(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int action)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_pm_action(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, action));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_pm_prepare(unsigned long long sender, unsigned long credential, unsigned int type, struct reboot_cmd cmd)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct reboot_cmd), __arch_actv_rpc_stksz_alignment(struct reboot_cmd));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_pm_prepare(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, type), __ARCH_ACTV_RPC_RECV_ARG(struct reboot_cmd, cmd));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_pm_prepare(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int type, struct reboot_cmd cmd)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct reboot_cmd), __arch_actv_rpc_stksz_alignment(struct reboot_cmd));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_pm_prepare(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, type), __ARCH_ACTV_RPC_RECV_ARG(struct reboot_cmd, cmd));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_pm_power_off(unsigned long long sender, unsigned long credential)
{
	return actvhdlr_drvhandler_devhost_pm_power_off(sender, credential);
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_pm_power_off(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	return actvhdlr_drvhandler_devhost_pm_power_off(sender, credential);
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_pm_reboot(unsigned long long sender, unsigned long credential, struct reboot_cmd cmd)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct reboot_cmd), __arch_actv_rpc_stksz_alignment(struct reboot_cmd));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_pm_reboot(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct reboot_cmd, cmd));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_pm_reboot(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, struct reboot_cmd cmd)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct reboot_cmd), __arch_actv_rpc_stksz_alignment(struct reboot_cmd));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_pm_reboot(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(struct reboot_cmd, cmd));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_pm_cpuhp_action(unsigned long long sender, unsigned long credential, unsigned int cpu, unsigned int action)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_pm_cpuhp_action(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, cpu), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, action));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_pm_cpuhp_action(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int cpu, unsigned int action)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_pm_cpuhp_action(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, cpu), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, action));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_procfs_read(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_procfs_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_procfs_read(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_procfs_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_procfs_write(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_procfs_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_procfs_write(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_procfs_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_sysfs_read(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_sysfs_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_sysfs_read(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_sysfs_read(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_sysfs_write(unsigned long long sender, unsigned long credential, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_sysfs_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_sysfs_write(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, unsigned long long pos, struct hm_actv_buf ubuf, uintptr_t ctx)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_sysfs_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, pos), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, ubuf), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_sysfs_poll(unsigned long long sender, unsigned long credential, unsigned int tagid, uintptr_t ctx, bool pollable)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_sysfs_poll(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx), __ARCH_ACTV_RPC_RECV_ARG(bool, pollable));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_sysfs_poll(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int tagid, uintptr_t ctx, bool pollable)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_sysfs_poll(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, tagid), __ARCH_ACTV_RPC_RECV_ARG(uintptr_t, ctx), __ARCH_ACTV_RPC_RECV_ARG(bool, pollable));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_clock_settime(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_clock_settime(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tp), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_clock_settime(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_clock_settime(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tp), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_clock_gettime(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_clock_gettime(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tp), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_clock_gettime(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_clock_gettime(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tp), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_clock_getres(unsigned long long sender, unsigned long credential, unsigned long tp, unsigned long long file_id)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_clock_getres(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tp), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_clock_getres(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tp, unsigned long long file_id)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_clock_getres(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tp), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_clock_adjtime(unsigned long long sender, unsigned long credential, unsigned long tx, unsigned long long file_id)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_clock_adjtime(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tx), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_clock_adjtime(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned long tx, unsigned long long file_id)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_clock_adjtime(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned long, tx), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_mounted(unsigned long long sender, unsigned long credential, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(dev_t), __arch_actv_rpc_stksz_alignment(dev_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_mounted(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(dev_t, dev_id), __ARCH_ACTV_RPC_RECV_ARG(int, dev_mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, fs_name), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, mount_opts), __ARCH_ACTV_RPC_RECV_ARG(size_t, per_write_size), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sector_dentry_bits));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_mounted(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, dev_t dev_id, int dev_mode, struct hm_actv_buf fs_name, struct hm_actv_buf mount_opts, size_t per_write_size, unsigned int sector_dentry_bits)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(dev_t), __arch_actv_rpc_stksz_alignment(dev_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_mounted(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(dev_t, dev_id), __ARCH_ACTV_RPC_RECV_ARG(int, dev_mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, fs_name), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, mount_opts), __ARCH_ACTV_RPC_RECV_ARG(size_t, per_write_size), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sector_dentry_bits));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_unmounted(unsigned long long sender, unsigned long credential, unsigned int s_index, int flags, unsigned long long file_id)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_unmounted(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(int, flags), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_unmounted(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, int flags, unsigned long long file_id)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_unmounted(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(int, flags), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, file_id));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_drop_caches(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int mode, int max_nr)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_drop_caches(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, mode), __ARCH_ACTV_RPC_RECV_ARG(int, max_nr));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_drop_caches(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int mode, int max_nr)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_drop_caches(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, mode), __ARCH_ACTV_RPC_RECV_ARG(int, max_nr));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_mkdir(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_mkdir(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(mode_t, mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_mkdir(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_mkdir(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(mode_t, mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_rmdir(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_rmdir(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_rmdir(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_rmdir(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_create(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_create(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(mode_t, mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_create(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, mode_t mode, struct hm_actv_buf actv_dname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_create(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(mode_t, mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_unlink(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_unlink(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_unlink(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int d_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_unlink(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_mknod(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_mknod(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, mode), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, devno), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_mknod(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, unsigned int mode, unsigned long long devno, struct hm_actv_buf actv_dname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_mknod(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, mode), __ARCH_ACTV_RPC_RECV_ARG(unsigned long long, devno), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_link(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_link(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, old_d_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, new_pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_link(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_link(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, old_d_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, new_pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_symlink(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_symlink(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_path));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_symlink(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_index, struct hm_actv_buf actv_dname, struct hm_actv_buf actv_path)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_symlink(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_path));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_statfs(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, void *buf)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_statfs(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(void*, buf));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_statfs(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, void *buf)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_statfs(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(void*, buf));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_rename(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_rename(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, old_pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, old_d_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, new_pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_rename(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int old_pd_index, unsigned int old_d_index, unsigned int new_pd_index, struct hm_actv_buf actv_dname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_rename(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, old_pd_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, old_d_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, new_pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_lookup(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_lookup(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname), __ARCH_ACTV_RPC_RECV_ARG(void*, meta));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_lookup(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int pd_index, struct hm_actv_buf actv_dname, void *meta)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_lookup(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_index), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname), __ARCH_ACTV_RPC_RECV_ARG(void*, meta));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_setattr(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_setattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(const void*, attr), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_setattr(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, const void *attr, uint64_t size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_setattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(const void*, attr), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_readlink(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_readlink(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(char*, buf), __ARCH_ACTV_RPC_RECV_ARG(size_t, bufsize));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_readlink(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, char *buf, size_t bufsize)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_readlink(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(char*, buf), __ARCH_ACTV_RPC_RECV_ARG(size_t, bufsize));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_getattr(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, void *meta)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_getattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(void*, meta));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_getattr(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, void *meta)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_getattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(void*, meta));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_listxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, char *buffer, size_t size)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_listxattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(char*, buffer), __ARCH_ACTV_RPC_RECV_ARG(size_t, size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_listxattr(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, char *buffer, size_t size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_listxattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(char*, buffer), __ARCH_ACTV_RPC_RECV_ARG(size_t, size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_getxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_getxattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(int, prefix), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_name), __ARCH_ACTV_RPC_RECV_ARG(char*, value), __ARCH_ACTV_RPC_RECV_ARG(size_t, size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_getxattr(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, char *value, size_t size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_getxattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(int, prefix), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_name), __ARCH_ACTV_RPC_RECV_ARG(char*, value), __ARCH_ACTV_RPC_RECV_ARG(size_t, size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_setxattr(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_setxattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(int, prefix), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_name), __ARCH_ACTV_RPC_RECV_ARG(const char*, value), __ARCH_ACTV_RPC_RECV_ARG(size_t, size), __ARCH_ACTV_RPC_RECV_ARG(int, flags));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_setxattr(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index, int prefix, struct hm_actv_buf actv_name, const char *value, size_t size, int flags)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_setxattr(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(int, prefix), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_name), __ARCH_ACTV_RPC_RECV_ARG(const char*, value), __ARCH_ACTV_RPC_RECV_ARG(size_t, size), __ARCH_ACTV_RPC_RECV_ARG(int, flags));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_tmpfile(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_tmpfile(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_addr), __ARCH_ACTV_RPC_RECV_ARG(mode_t, mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_tmpfile(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int pd_addr, mode_t mode, struct hm_actv_buf actv_dname)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_tmpfile(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, pd_addr), __ARCH_ACTV_RPC_RECV_ARG(mode_t, mode), __ARCH_ACTV_RPC_RECV_ARG(struct hm_actv_buf, actv_dname));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_kill_dentry(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int d_index)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_kill_dentry(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_kill_dentry(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int d_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_kill_dentry(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_node_put(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int v_index)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_node_put(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, v_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_node_put(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int v_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_node_put(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, v_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_sync(unsigned long long sender, unsigned long credential, unsigned int s_index)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_sync(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_sync(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_sync(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_write(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, pos), __ARCH_ACTV_RPC_RECV_ARG(const void*, src), __ARCH_ACTV_RPC_RECV_ARG(size_t, len));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_write(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t pos, const void *src, size_t len)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_write(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, pos), __ARCH_ACTV_RPC_RECV_ARG(const void*, src), __ARCH_ACTV_RPC_RECV_ARG(size_t, len));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_fsync(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_fsync(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_fsync(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_fsync(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_readdir(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_readdir(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, pos), __ARCH_ACTV_RPC_RECV_ARG(void*, buf), __ARCH_ACTV_RPC_RECV_ARG(size_t, size));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_readdir(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, uint64_t pos, void *buf, size_t size)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_readdir(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, pos), __ARCH_ACTV_RPC_RECV_ARG(void*, buf), __ARCH_ACTV_RPC_RECV_ARG(size_t, size));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_open(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_open(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_modes), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_flags));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_open(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int d_index, unsigned int f_modes, unsigned int f_flags)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_open(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, d_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_modes), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_flags));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_fallocate(unsigned long long sender, unsigned long credential, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_fallocate(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, mode), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, pos), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, len));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_fallocate(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int sb_index, unsigned int f_index, unsigned int mode, uint64_t pos, uint64_t len)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_fallocate(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, sb_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, mode), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, pos), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, len));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_close(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_close(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_close(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_close(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_ioctl(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_ioctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, cmd), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, arg));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_ioctl(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, unsigned int cmd, unsigned long arg)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_ioctl(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, cmd), __ARCH_ACTV_RPC_RECV_ARG(unsigned long, arg));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_direct_IO(unsigned long long sender, unsigned long credential, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_direct_IO(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, offset), __ARCH_ACTV_RPC_RECV_ARG(void*, buf), __ARCH_ACTV_RPC_RECV_ARG(size_t, len), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, type));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_direct_IO(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, unsigned int f_index, uint64_t offset, void *buf, size_t len, unsigned int type)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_direct_IO(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, f_index), __ARCH_ACTV_RPC_RECV_ARG(uint64_t, offset), __ARCH_ACTV_RPC_RECV_ARG(void*, buf), __ARCH_ACTV_RPC_RECV_ARG(size_t, len), __ARCH_ACTV_RPC_RECV_ARG(unsigned int, type));
}

static int __opt_nonoframe __actvbridgehdlr_drvhandler_devhost_transfs_update_opts(unsigned long long sender, unsigned long credential, unsigned int s_index, char *ubuf, size_t buflen)
{
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_update_opts(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(char*, ubuf), __ARCH_ACTV_RPC_RECV_ARG(size_t, buflen));
}

static int __opt_nonoframe __actvbridgecapcallhdlr_drvhandler_devhost_transfs_update_opts(unsigned long long sender, unsigned long credential, __RPC_CAPCALL_HDLR_UNUSED_ARGS, unsigned int s_index, char *ubuf, size_t buflen)
{
	UNUSED(__RPC_CAPCALL_HDLR_UNUSED_ARGS_STRICT);
	struct arch_actv_local *__local = hm_actv_current_arch_actv_local();
	unsigned long __nr_ul = __RPC_INFO_DECODE_STK_BUF_NR_UL(__local->rpcinfo);
	unsigned long __maybe_unused __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	if (__nr_ul * sizeof(unsigned long) != __stacksz) {
		return E_HM_INVAL;
	}
	return actvhdlr_drvhandler_devhost_transfs_update_opts(sender, credential, __ARCH_ACTV_RPC_RECV_ARG(unsigned int, s_index), __ARCH_ACTV_RPC_RECV_ARG(char*, ubuf), __ARCH_ACTV_RPC_RECV_ARG(size_t, buflen));
}

#endif
#ifdef __sysif_server_devhost_no_compat32_handlers__
union devhost_hdlrs_union sysif_devhost_actvhdlr_table[__devhost_method_MAX] = {
	[0 ... __ACTV_UPCALL_POOL_GRANT_CHANGE - 1U] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_default_handler)
	},
	[__ACTV_UPCALL_POOL_GRANT_CHANGE] = {
		.p_sysif_handle_kcall_entry = (&sysif_actv_pool_handle_grant_change)
	},
	[__ACTV_UPCALL_POOL_GRANT_CHANGE + 1U ... __devhost_method_MIN] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_default_handler)
	},
	[__devhost_method_core_rsvd_3] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_load_driver] = {
		.p__actvbridgehdlr_drvhandler_devhost_core_load_driver = (&__actvbridgehdlr_drvhandler_devhost_core_load_driver)
	},
	[__devhost_method_core_create_device] = {
		.p__actvbridgehdlr_drvhandler_devhost_core_create_device = (&__actvbridgehdlr_drvhandler_devhost_core_create_device)
	},
	[__devhost_method_core_unload_driver] = {
		.p__actvbridgehdlr_drvhandler_devhost_core_unload_driver = (&__actvbridgehdlr_drvhandler_devhost_core_unload_driver)
	},
	[__devhost_method_core_bind_device] = {
		.p__actvbridgehdlr_drvhandler_devhost_core_bind_device = (&__actvbridgehdlr_drvhandler_devhost_core_bind_device)
	},
	[__devhost_method_core_entropy_read] = {
		.p__actvbridgehdlr_drvhandler_devhost_core_entropy_read = (&__actvbridgehdlr_drvhandler_devhost_core_entropy_read)
	},
	[__devhost_method_rpc_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_rpc_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_rpc_export] = {
		.p__actvbridgehdlr_drvhandler_devhost_rpc_export = (&__actvbridgehdlr_drvhandler_devhost_rpc_export)
	},
	[__devhost_method_rpc_invoke] = {
		.p__actvbridgehdlr_drvhandler_devhost_rpc_invoke = (&__actvbridgehdlr_drvhandler_devhost_rpc_invoke)
	},
	[__devhost_method_fops_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_fops_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_fops_open] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_open = (&__actvbridgehdlr_drvhandler_devhost_fops_open)
	},
	[__devhost_method_fops_close] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_close = (&__actvbridgehdlr_drvhandler_devhost_fops_close)
	},
	[__devhost_method_fops_read] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_read = (&__actvbridgehdlr_drvhandler_devhost_fops_read)
	},
	[__devhost_method_fops_write] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_write = (&__actvbridgehdlr_drvhandler_devhost_fops_write)
	},
	[__devhost_method_fops_ioctl] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_ioctl = (&__actvbridgehdlr_drvhandler_devhost_fops_ioctl)
	},
	[__devhost_method_fops_llseek] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_llseek = (&__actvbridgehdlr_drvhandler_devhost_fops_llseek)
	},
	[__devhost_method_fops_mmap] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_mmap = (&__actvbridgehdlr_drvhandler_devhost_fops_mmap)
	},
	[__devhost_method_fops_munmap] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_munmap = (&__actvbridgehdlr_drvhandler_devhost_fops_munmap)
	},
	[__devhost_method_fops_sysfs_read] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_read = (&__actvbridgehdlr_drvhandler_devhost_fops_sysfs_read)
	},
	[__devhost_method_fops_sysfs_write] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_write = (&__actvbridgehdlr_drvhandler_devhost_fops_sysfs_write)
	},
	[__devhost_method_fops_epoll_ctl] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_epoll_ctl = (&__actvbridgehdlr_drvhandler_devhost_fops_epoll_ctl)
	},
	[__devhost_method_fops_epoll_close] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_epoll_close = (&__actvbridgehdlr_drvhandler_devhost_fops_epoll_close)
	},
	[__devhost_method_fops_epoll_et] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_epoll_et = (&__actvbridgehdlr_drvhandler_devhost_fops_epoll_et)
	},
	[__devhost_method_fops_epoll_reinit_add] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_epoll_reinit_add = (&__actvbridgehdlr_drvhandler_devhost_fops_epoll_reinit_add)
	},
	[__devhost_method_block_rsvd_4] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_3] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_check_feature] = {
		.p__actvbridgehdlr_drvhandler_devhost_block_check_feature = (&__actvbridgehdlr_drvhandler_devhost_block_check_feature)
	},
	[__devhost_method_block_run_queue] = {
		.p__actvbridgehdlr_drvhandler_devhost_block_run_queue = (&__actvbridgehdlr_drvhandler_devhost_block_run_queue)
	},
	[__devhost_method_block_direct_access] = {
		.p__actvbridgehdlr_drvhandler_devhost_block_direct_access = (&__actvbridgehdlr_drvhandler_devhost_block_direct_access)
	},
	[__devhost_method_block_register_bio_notify] = {
		.p__actvbridgehdlr_drvhandler_devhost_block_register_bio_notify = (&__actvbridgehdlr_drvhandler_devhost_block_register_bio_notify)
	},
	[__devhost_method_net_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_net_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_net_send] = {
		.p__actvbridgehdlr_drvhandler_devhost_net_send = (&__actvbridgehdlr_drvhandler_devhost_net_send)
	},
	[__devhost_method_net_ioctl] = {
		.p__actvbridgehdlr_drvhandler_devhost_net_ioctl = (&__actvbridgehdlr_drvhandler_devhost_net_ioctl)
	},
	[__devhost_method_net_status] = {
		.p__actvbridgehdlr_drvhandler_devhost_net_status = (&__actvbridgehdlr_drvhandler_devhost_net_status)
	},
	[__devhost_method_net_prepare] = {
		.p__actvbridgehdlr_drvhandler_devhost_net_prepare = (&__actvbridgehdlr_drvhandler_devhost_net_prepare)
	},
	[__devhost_method_net_init] = {
		.p__actvbridgehdlr_drvhandler_devhost_net_init = (&__actvbridgehdlr_drvhandler_devhost_net_init)
	},
	[__devhost_method_net_netlink_recv] = {
		.p__actvbridgehdlr_drvhandler_devhost_net_netlink_recv = (&__actvbridgehdlr_drvhandler_devhost_net_netlink_recv)
	},
	[__devhost_method_pm_rsvd_3] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_action] = {
		.p__actvbridgehdlr_drvhandler_devhost_pm_action = (&__actvbridgehdlr_drvhandler_devhost_pm_action)
	},
	[__devhost_method_pm_prepare] = {
		.p__actvbridgehdlr_drvhandler_devhost_pm_prepare = (&__actvbridgehdlr_drvhandler_devhost_pm_prepare)
	},
	[__devhost_method_pm_power_off] = {
		.p__actvbridgehdlr_drvhandler_devhost_pm_power_off = (&__actvbridgehdlr_drvhandler_devhost_pm_power_off)
	},
	[__devhost_method_pm_reboot] = {
		.p__actvbridgehdlr_drvhandler_devhost_pm_reboot = (&__actvbridgehdlr_drvhandler_devhost_pm_reboot)
	},
	[__devhost_method_pm_cpuhp_action] = {
		.p__actvbridgehdlr_drvhandler_devhost_pm_cpuhp_action = (&__actvbridgehdlr_drvhandler_devhost_pm_cpuhp_action)
	},
	[__devhost_method_procfs_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_procfs_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_procfs_read] = {
		.p__actvbridgehdlr_drvhandler_devhost_procfs_read = (&__actvbridgehdlr_drvhandler_devhost_procfs_read)
	},
	[__devhost_method_procfs_write] = {
		.p__actvbridgehdlr_drvhandler_devhost_procfs_write = (&__actvbridgehdlr_drvhandler_devhost_procfs_write)
	},
	[__devhost_method_sysfs_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_sysfs_read] = {
		.p__actvbridgehdlr_drvhandler_devhost_sysfs_read = (&__actvbridgehdlr_drvhandler_devhost_sysfs_read)
	},
	[__devhost_method_sysfs_write] = {
		.p__actvbridgehdlr_drvhandler_devhost_sysfs_write = (&__actvbridgehdlr_drvhandler_devhost_sysfs_write)
	},
	[__devhost_method_sysfs_poll] = {
		.p__actvbridgehdlr_drvhandler_devhost_sysfs_poll = (&__actvbridgehdlr_drvhandler_devhost_sysfs_poll)
	},
	[__devhost_method_clock_rsvd_4] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_3] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_settime] = {
		.p__actvbridgehdlr_drvhandler_devhost_clock_settime = (&__actvbridgehdlr_drvhandler_devhost_clock_settime)
	},
	[__devhost_method_clock_gettime] = {
		.p__actvbridgehdlr_drvhandler_devhost_clock_gettime = (&__actvbridgehdlr_drvhandler_devhost_clock_gettime)
	},
	[__devhost_method_clock_getres] = {
		.p__actvbridgehdlr_drvhandler_devhost_clock_getres = (&__actvbridgehdlr_drvhandler_devhost_clock_getres)
	},
	[__devhost_method_clock_adjtime] = {
		.p__actvbridgehdlr_drvhandler_devhost_clock_adjtime = (&__actvbridgehdlr_drvhandler_devhost_clock_adjtime)
	},
	[__devhost_method_transfs_mounted] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_mounted = (&__actvbridgehdlr_drvhandler_devhost_transfs_mounted)
	},
	[__devhost_method_transfs_unmounted] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_unmounted = (&__actvbridgehdlr_drvhandler_devhost_transfs_unmounted)
	},
	[__devhost_method_transfs_drop_caches] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_drop_caches = (&__actvbridgehdlr_drvhandler_devhost_transfs_drop_caches)
	},
	[__devhost_method_transfs_mkdir] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_mkdir = (&__actvbridgehdlr_drvhandler_devhost_transfs_mkdir)
	},
	[__devhost_method_transfs_rmdir] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_rmdir = (&__actvbridgehdlr_drvhandler_devhost_transfs_rmdir)
	},
	[__devhost_method_transfs_create] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_create = (&__actvbridgehdlr_drvhandler_devhost_transfs_create)
	},
	[__devhost_method_transfs_unlink] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_unlink = (&__actvbridgehdlr_drvhandler_devhost_transfs_unlink)
	},
	[__devhost_method_transfs_mknod] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_mknod = (&__actvbridgehdlr_drvhandler_devhost_transfs_mknod)
	},
	[__devhost_method_transfs_link] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_link = (&__actvbridgehdlr_drvhandler_devhost_transfs_link)
	},
	[__devhost_method_transfs_symlink] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_symlink = (&__actvbridgehdlr_drvhandler_devhost_transfs_symlink)
	},
	[__devhost_method_transfs_statfs] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_statfs = (&__actvbridgehdlr_drvhandler_devhost_transfs_statfs)
	},
	[__devhost_method_transfs_rename] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_rename = (&__actvbridgehdlr_drvhandler_devhost_transfs_rename)
	},
	[__devhost_method_transfs_lookup] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_lookup = (&__actvbridgehdlr_drvhandler_devhost_transfs_lookup)
	},
	[__devhost_method_transfs_setattr] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_setattr = (&__actvbridgehdlr_drvhandler_devhost_transfs_setattr)
	},
	[__devhost_method_transfs_readlink] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_readlink = (&__actvbridgehdlr_drvhandler_devhost_transfs_readlink)
	},
	[__devhost_method_transfs_getattr] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_getattr = (&__actvbridgehdlr_drvhandler_devhost_transfs_getattr)
	},
	[__devhost_method_transfs_listxattr] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_listxattr = (&__actvbridgehdlr_drvhandler_devhost_transfs_listxattr)
	},
	[__devhost_method_transfs_getxattr] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_getxattr = (&__actvbridgehdlr_drvhandler_devhost_transfs_getxattr)
	},
	[__devhost_method_transfs_setxattr] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_setxattr = (&__actvbridgehdlr_drvhandler_devhost_transfs_setxattr)
	},
	[__devhost_method_transfs_tmpfile] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_tmpfile = (&__actvbridgehdlr_drvhandler_devhost_transfs_tmpfile)
	},
	[__devhost_method_transfs_kill_dentry] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_kill_dentry = (&__actvbridgehdlr_drvhandler_devhost_transfs_kill_dentry)
	},
	[__devhost_method_transfs_node_put] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_node_put = (&__actvbridgehdlr_drvhandler_devhost_transfs_node_put)
	},
	[__devhost_method_transfs_sync] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_sync = (&__actvbridgehdlr_drvhandler_devhost_transfs_sync)
	},
	[__devhost_method_transfs_write] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_write = (&__actvbridgehdlr_drvhandler_devhost_transfs_write)
	},
	[__devhost_method_transfs_fsync] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_fsync = (&__actvbridgehdlr_drvhandler_devhost_transfs_fsync)
	},
	[__devhost_method_transfs_readdir] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_readdir = (&__actvbridgehdlr_drvhandler_devhost_transfs_readdir)
	},
	[__devhost_method_transfs_open] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_open = (&__actvbridgehdlr_drvhandler_devhost_transfs_open)
	},
	[__devhost_method_transfs_fallocate] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_fallocate = (&__actvbridgehdlr_drvhandler_devhost_transfs_fallocate)
	},
	[__devhost_method_transfs_close] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_close = (&__actvbridgehdlr_drvhandler_devhost_transfs_close)
	},
	[__devhost_method_transfs_ioctl] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_ioctl = (&__actvbridgehdlr_drvhandler_devhost_transfs_ioctl)
	},
	[__devhost_method_transfs_direct_IO] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_direct_IO = (&__actvbridgehdlr_drvhandler_devhost_transfs_direct_IO)
	},
	[__devhost_method_transfs_update_opts] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_update_opts = (&__actvbridgehdlr_drvhandler_devhost_transfs_update_opts)
	}
};

union devhost_hdlrs_union sysif_devhost_actvcapcallhdlr_table[__devhost_method_MAX] = {
	[0 ... __ACTV_UPCALL_POOL_GRANT_CHANGE - 1U] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_default_handler)
	},
	[__ACTV_UPCALL_POOL_GRANT_CHANGE] = {
		.p_sysif_handle_kcall_entry = (&sysif_actv_pool_handle_grant_change)
	},
	[__ACTV_UPCALL_POOL_GRANT_CHANGE + 1U ... __devhost_method_MIN] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_default_handler)
	},
	[__devhost_method_core_rsvd_3] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_load_driver] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_core_load_driver = (&__actvbridgecapcallhdlr_drvhandler_devhost_core_load_driver)
	},
	[__devhost_method_core_create_device] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_core_create_device = (&__actvbridgecapcallhdlr_drvhandler_devhost_core_create_device)
	},
	[__devhost_method_core_unload_driver] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_core_unload_driver = (&__actvbridgecapcallhdlr_drvhandler_devhost_core_unload_driver)
	},
	[__devhost_method_core_bind_device] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_core_bind_device = (&__actvbridgecapcallhdlr_drvhandler_devhost_core_bind_device)
	},
	[__devhost_method_core_entropy_read] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_core_entropy_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_core_entropy_read)
	},
	[__devhost_method_rpc_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_rpc_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_rpc_export] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_export = (&__actvbridgecapcallhdlr_drvhandler_devhost_rpc_export)
	},
	[__devhost_method_rpc_invoke] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_invoke = (&__actvbridgecapcallhdlr_drvhandler_devhost_rpc_invoke)
	},
	[__devhost_method_fops_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_fops_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_fops_open] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_open = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_open)
	},
	[__devhost_method_fops_close] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_close = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_close)
	},
	[__devhost_method_fops_read] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_read)
	},
	[__devhost_method_fops_write] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_write)
	},
	[__devhost_method_fops_ioctl] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_ioctl = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_ioctl)
	},
	[__devhost_method_fops_llseek] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_llseek = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_llseek)
	},
	[__devhost_method_fops_mmap] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_mmap = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_mmap)
	},
	[__devhost_method_fops_munmap] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_munmap = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_munmap)
	},
	[__devhost_method_fops_sysfs_read] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_read)
	},
	[__devhost_method_fops_sysfs_write] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_write)
	},
	[__devhost_method_fops_epoll_ctl] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_ctl = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_ctl)
	},
	[__devhost_method_fops_epoll_close] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_close = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_close)
	},
	[__devhost_method_fops_epoll_et] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_et = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_et)
	},
	[__devhost_method_fops_epoll_reinit_add] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_reinit_add = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_reinit_add)
	},
	[__devhost_method_block_rsvd_4] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_3] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_check_feature] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_block_check_feature = (&__actvbridgecapcallhdlr_drvhandler_devhost_block_check_feature)
	},
	[__devhost_method_block_run_queue] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_block_run_queue = (&__actvbridgecapcallhdlr_drvhandler_devhost_block_run_queue)
	},
	[__devhost_method_block_direct_access] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_block_direct_access = (&__actvbridgecapcallhdlr_drvhandler_devhost_block_direct_access)
	},
	[__devhost_method_block_register_bio_notify] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_block_register_bio_notify = (&__actvbridgecapcallhdlr_drvhandler_devhost_block_register_bio_notify)
	},
	[__devhost_method_net_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_net_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_net_send] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_net_send = (&__actvbridgecapcallhdlr_drvhandler_devhost_net_send)
	},
	[__devhost_method_net_ioctl] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_net_ioctl = (&__actvbridgecapcallhdlr_drvhandler_devhost_net_ioctl)
	},
	[__devhost_method_net_status] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_net_status = (&__actvbridgecapcallhdlr_drvhandler_devhost_net_status)
	},
	[__devhost_method_net_prepare] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_net_prepare = (&__actvbridgecapcallhdlr_drvhandler_devhost_net_prepare)
	},
	[__devhost_method_net_init] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_net_init = (&__actvbridgecapcallhdlr_drvhandler_devhost_net_init)
	},
	[__devhost_method_net_netlink_recv] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_net_netlink_recv = (&__actvbridgecapcallhdlr_drvhandler_devhost_net_netlink_recv)
	},
	[__devhost_method_pm_rsvd_3] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_action] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_pm_action = (&__actvbridgecapcallhdlr_drvhandler_devhost_pm_action)
	},
	[__devhost_method_pm_prepare] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_pm_prepare = (&__actvbridgecapcallhdlr_drvhandler_devhost_pm_prepare)
	},
	[__devhost_method_pm_power_off] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_pm_power_off = (&__actvbridgecapcallhdlr_drvhandler_devhost_pm_power_off)
	},
	[__devhost_method_pm_reboot] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_pm_reboot = (&__actvbridgecapcallhdlr_drvhandler_devhost_pm_reboot)
	},
	[__devhost_method_pm_cpuhp_action] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_pm_cpuhp_action = (&__actvbridgecapcallhdlr_drvhandler_devhost_pm_cpuhp_action)
	},
	[__devhost_method_procfs_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_procfs_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_procfs_read] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_procfs_read)
	},
	[__devhost_method_procfs_write] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_procfs_write)
	},
	[__devhost_method_sysfs_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_sysfs_read] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_read)
	},
	[__devhost_method_sysfs_write] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_write)
	},
	[__devhost_method_sysfs_poll] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_poll = (&__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_poll)
	},
	[__devhost_method_clock_rsvd_4] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_3] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_settime] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_clock_settime = (&__actvbridgecapcallhdlr_drvhandler_devhost_clock_settime)
	},
	[__devhost_method_clock_gettime] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_clock_gettime = (&__actvbridgecapcallhdlr_drvhandler_devhost_clock_gettime)
	},
	[__devhost_method_clock_getres] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_clock_getres = (&__actvbridgecapcallhdlr_drvhandler_devhost_clock_getres)
	},
	[__devhost_method_clock_adjtime] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_clock_adjtime = (&__actvbridgecapcallhdlr_drvhandler_devhost_clock_adjtime)
	},
	[__devhost_method_transfs_mounted] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mounted = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mounted)
	},
	[__devhost_method_transfs_unmounted] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unmounted = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unmounted)
	},
	[__devhost_method_transfs_drop_caches] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_drop_caches = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_drop_caches)
	},
	[__devhost_method_transfs_mkdir] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mkdir = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mkdir)
	},
	[__devhost_method_transfs_rmdir] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rmdir = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rmdir)
	},
	[__devhost_method_transfs_create] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_create = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_create)
	},
	[__devhost_method_transfs_unlink] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unlink = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unlink)
	},
	[__devhost_method_transfs_mknod] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mknod = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mknod)
	},
	[__devhost_method_transfs_link] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_link = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_link)
	},
	[__devhost_method_transfs_symlink] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_symlink = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_symlink)
	},
	[__devhost_method_transfs_statfs] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_statfs = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_statfs)
	},
	[__devhost_method_transfs_rename] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rename = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rename)
	},
	[__devhost_method_transfs_lookup] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_lookup = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_lookup)
	},
	[__devhost_method_transfs_setattr] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setattr)
	},
	[__devhost_method_transfs_readlink] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readlink = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readlink)
	},
	[__devhost_method_transfs_getattr] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getattr)
	},
	[__devhost_method_transfs_listxattr] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_listxattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_listxattr)
	},
	[__devhost_method_transfs_getxattr] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getxattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getxattr)
	},
	[__devhost_method_transfs_setxattr] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setxattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setxattr)
	},
	[__devhost_method_transfs_tmpfile] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_tmpfile = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_tmpfile)
	},
	[__devhost_method_transfs_kill_dentry] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_kill_dentry = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_kill_dentry)
	},
	[__devhost_method_transfs_node_put] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_node_put = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_node_put)
	},
	[__devhost_method_transfs_sync] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_sync = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_sync)
	},
	[__devhost_method_transfs_write] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_write)
	},
	[__devhost_method_transfs_fsync] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fsync = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fsync)
	},
	[__devhost_method_transfs_readdir] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readdir = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readdir)
	},
	[__devhost_method_transfs_open] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_open = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_open)
	},
	[__devhost_method_transfs_fallocate] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fallocate = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fallocate)
	},
	[__devhost_method_transfs_close] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_close = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_close)
	},
	[__devhost_method_transfs_ioctl] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_ioctl = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_ioctl)
	},
	[__devhost_method_transfs_direct_IO] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_direct_IO = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_direct_IO)
	},
	[__devhost_method_transfs_update_opts] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_update_opts = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_update_opts)
	}
};

#else
#ifndef __ARCH_RPC_REQUIRE_BRIDGE_HDLR
#error "Only support 64-bit server, build for aarch64 please!"
#else
union devhost_hdlrs_union sysif_devhost_actvhdlr_table[__devhost_method_MAX] = {
	[0 ... __ACTV_UPCALL_POOL_GRANT_CHANGE * 2U - 1U] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_default_handler)
	},
	[__ACTV_UPCALL_POOL_GRANT_CHANGE * 2U] = {
		.p_sysif_handle_kcall_entry = (&sysif_actv_pool_handle_grant_change)
	},
	[__ACTV_UPCALL_POOL_GRANT_CHANGE * 2U + 1U] = {
		.p_sysif_handle_kcall_entry = (&sysif_actv_pool_handle_grant_change)
	},
	[__ACTV_UPCALL_POOL_GRANT_CHANGE * 2U + 2U ... __devhost_method_MIN * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_default_handler)
	},
	[__devhost_method_core_rsvd_3 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_3 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_load_driver * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_core_load_driver = (&__actvbridgehdlr_drvhandler_devhost_core_load_driver)
	},
	[__devhost_method_core_load_driver * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_core_load_driver = (&__actvbridgehdlr_drvhandler_devhost_compat_core_load_driver)
	},
	[__devhost_method_core_create_device * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_core_create_device = (&__actvbridgehdlr_drvhandler_devhost_core_create_device)
	},
	[__devhost_method_core_create_device * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_core_create_device = (&__actvbridgehdlr_drvhandler_devhost_compat_core_create_device)
	},
	[__devhost_method_core_unload_driver * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_core_unload_driver = (&__actvbridgehdlr_drvhandler_devhost_core_unload_driver)
	},
	[__devhost_method_core_unload_driver * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_core_unload_driver = (&__actvbridgehdlr_drvhandler_devhost_compat_core_unload_driver)
	},
	[__devhost_method_core_bind_device * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_core_bind_device = (&__actvbridgehdlr_drvhandler_devhost_core_bind_device)
	},
	[__devhost_method_core_bind_device * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_core_bind_device = (&__actvbridgehdlr_drvhandler_devhost_compat_core_bind_device)
	},
	[__devhost_method_core_entropy_read * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_core_entropy_read = (&__actvbridgehdlr_drvhandler_devhost_core_entropy_read)
	},
	[__devhost_method_core_entropy_read * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_core_entropy_read = (&__actvbridgehdlr_drvhandler_devhost_compat_core_entropy_read)
	},
	[__devhost_method_rpc_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_rpc_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_rpc_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_rpc_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_rpc_export * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_rpc_export = (&__actvbridgehdlr_drvhandler_devhost_rpc_export)
	},
	[__devhost_method_rpc_export * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_rpc_export = (&__actvbridgehdlr_drvhandler_devhost_compat_rpc_export)
	},
	[__devhost_method_rpc_invoke * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_rpc_invoke = (&__actvbridgehdlr_drvhandler_devhost_rpc_invoke)
	},
	[__devhost_method_rpc_invoke * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_rpc_invoke = (&__actvbridgehdlr_drvhandler_devhost_compat_rpc_invoke)
	},
	[__devhost_method_fops_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_fops_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_fops_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_fops_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_fops_open * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_open = (&__actvbridgehdlr_drvhandler_devhost_fops_open)
	},
	[__devhost_method_fops_open * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_open = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_open)
	},
	[__devhost_method_fops_close * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_close = (&__actvbridgehdlr_drvhandler_devhost_fops_close)
	},
	[__devhost_method_fops_close * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_close = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_close)
	},
	[__devhost_method_fops_read * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_read = (&__actvbridgehdlr_drvhandler_devhost_fops_read)
	},
	[__devhost_method_fops_read * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_read = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_read)
	},
	[__devhost_method_fops_write * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_write = (&__actvbridgehdlr_drvhandler_devhost_fops_write)
	},
	[__devhost_method_fops_write * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_write = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_write)
	},
	[__devhost_method_fops_ioctl * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_ioctl = (&__actvbridgehdlr_drvhandler_devhost_fops_ioctl)
	},
	[__devhost_method_fops_ioctl * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_ioctl = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_ioctl)
	},
	[__devhost_method_fops_llseek * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_llseek = (&__actvbridgehdlr_drvhandler_devhost_fops_llseek)
	},
	[__devhost_method_fops_llseek * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_llseek = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_llseek)
	},
	[__devhost_method_fops_mmap * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_mmap = (&__actvbridgehdlr_drvhandler_devhost_fops_mmap)
	},
	[__devhost_method_fops_mmap * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_mmap = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_mmap)
	},
	[__devhost_method_fops_munmap * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_munmap = (&__actvbridgehdlr_drvhandler_devhost_fops_munmap)
	},
	[__devhost_method_fops_munmap * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_munmap = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_munmap)
	},
	[__devhost_method_fops_sysfs_read * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_read = (&__actvbridgehdlr_drvhandler_devhost_fops_sysfs_read)
	},
	[__devhost_method_fops_sysfs_read * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_sysfs_read = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_sysfs_read)
	},
	[__devhost_method_fops_sysfs_write * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_sysfs_write = (&__actvbridgehdlr_drvhandler_devhost_fops_sysfs_write)
	},
	[__devhost_method_fops_sysfs_write * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_sysfs_write = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_sysfs_write)
	},
	[__devhost_method_fops_epoll_ctl * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_epoll_ctl = (&__actvbridgehdlr_drvhandler_devhost_fops_epoll_ctl)
	},
	[__devhost_method_fops_epoll_ctl * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_ctl = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_ctl)
	},
	[__devhost_method_fops_epoll_close * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_epoll_close = (&__actvbridgehdlr_drvhandler_devhost_fops_epoll_close)
	},
	[__devhost_method_fops_epoll_close * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_close = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_close)
	},
	[__devhost_method_fops_epoll_et * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_epoll_et = (&__actvbridgehdlr_drvhandler_devhost_fops_epoll_et)
	},
	[__devhost_method_fops_epoll_et * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_et = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_et)
	},
	[__devhost_method_fops_epoll_reinit_add * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_fops_epoll_reinit_add = (&__actvbridgehdlr_drvhandler_devhost_fops_epoll_reinit_add)
	},
	[__devhost_method_fops_epoll_reinit_add * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_reinit_add = (&__actvbridgehdlr_drvhandler_devhost_compat_fops_epoll_reinit_add)
	},
	[__devhost_method_block_rsvd_4 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_3 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_4 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_3 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_check_feature * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_block_check_feature = (&__actvbridgehdlr_drvhandler_devhost_block_check_feature)
	},
	[__devhost_method_block_check_feature * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_block_check_feature = (&__actvbridgehdlr_drvhandler_devhost_compat_block_check_feature)
	},
	[__devhost_method_block_run_queue * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_block_run_queue = (&__actvbridgehdlr_drvhandler_devhost_block_run_queue)
	},
	[__devhost_method_block_run_queue * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_block_run_queue = (&__actvbridgehdlr_drvhandler_devhost_compat_block_run_queue)
	},
	[__devhost_method_block_direct_access * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_block_direct_access = (&__actvbridgehdlr_drvhandler_devhost_block_direct_access)
	},
	[__devhost_method_block_direct_access * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_block_direct_access = (&__actvbridgehdlr_drvhandler_devhost_compat_block_direct_access)
	},
	[__devhost_method_block_register_bio_notify * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_block_register_bio_notify = (&__actvbridgehdlr_drvhandler_devhost_block_register_bio_notify)
	},
	[__devhost_method_block_register_bio_notify * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_block_register_bio_notify = (&__actvbridgehdlr_drvhandler_devhost_compat_block_register_bio_notify)
	},
	[__devhost_method_net_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_net_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_net_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_net_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_net_send * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_net_send = (&__actvbridgehdlr_drvhandler_devhost_net_send)
	},
	[__devhost_method_net_send * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_net_send = (&__actvbridgehdlr_drvhandler_devhost_compat_net_send)
	},
	[__devhost_method_net_ioctl * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_net_ioctl = (&__actvbridgehdlr_drvhandler_devhost_net_ioctl)
	},
	[__devhost_method_net_ioctl * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_net_ioctl = (&__actvbridgehdlr_drvhandler_devhost_compat_net_ioctl)
	},
	[__devhost_method_net_status * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_net_status = (&__actvbridgehdlr_drvhandler_devhost_net_status)
	},
	[__devhost_method_net_status * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_net_status = (&__actvbridgehdlr_drvhandler_devhost_compat_net_status)
	},
	[__devhost_method_net_prepare * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_net_prepare = (&__actvbridgehdlr_drvhandler_devhost_net_prepare)
	},
	[__devhost_method_net_prepare * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_net_prepare = (&__actvbridgehdlr_drvhandler_devhost_compat_net_prepare)
	},
	[__devhost_method_net_init * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_net_init = (&__actvbridgehdlr_drvhandler_devhost_net_init)
	},
	[__devhost_method_net_init * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_net_init = (&__actvbridgehdlr_drvhandler_devhost_compat_net_init)
	},
	[__devhost_method_net_netlink_recv * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_net_netlink_recv = (&__actvbridgehdlr_drvhandler_devhost_net_netlink_recv)
	},
	[__devhost_method_net_netlink_recv * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_net_netlink_recv = (&__actvbridgehdlr_drvhandler_devhost_compat_net_netlink_recv)
	},
	[__devhost_method_pm_rsvd_3 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_3 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_action * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_pm_action = (&__actvbridgehdlr_drvhandler_devhost_pm_action)
	},
	[__devhost_method_pm_action * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_pm_action = (&__actvbridgehdlr_drvhandler_devhost_compat_pm_action)
	},
	[__devhost_method_pm_prepare * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_pm_prepare = (&__actvbridgehdlr_drvhandler_devhost_pm_prepare)
	},
	[__devhost_method_pm_prepare * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_pm_prepare = (&__actvbridgehdlr_drvhandler_devhost_compat_pm_prepare)
	},
	[__devhost_method_pm_power_off * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_pm_power_off = (&__actvbridgehdlr_drvhandler_devhost_pm_power_off)
	},
	[__devhost_method_pm_power_off * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_pm_power_off = (&__actvbridgehdlr_drvhandler_devhost_compat_pm_power_off)
	},
	[__devhost_method_pm_reboot * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_pm_reboot = (&__actvbridgehdlr_drvhandler_devhost_pm_reboot)
	},
	[__devhost_method_pm_reboot * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_pm_reboot = (&__actvbridgehdlr_drvhandler_devhost_compat_pm_reboot)
	},
	[__devhost_method_pm_cpuhp_action * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_pm_cpuhp_action = (&__actvbridgehdlr_drvhandler_devhost_pm_cpuhp_action)
	},
	[__devhost_method_pm_cpuhp_action * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_pm_cpuhp_action = (&__actvbridgehdlr_drvhandler_devhost_compat_pm_cpuhp_action)
	},
	[__devhost_method_procfs_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_procfs_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_procfs_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_procfs_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_procfs_read * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_procfs_read = (&__actvbridgehdlr_drvhandler_devhost_procfs_read)
	},
	[__devhost_method_procfs_read * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_procfs_read = (&__actvbridgehdlr_drvhandler_devhost_compat_procfs_read)
	},
	[__devhost_method_procfs_write * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_procfs_write = (&__actvbridgehdlr_drvhandler_devhost_procfs_write)
	},
	[__devhost_method_procfs_write * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_procfs_write = (&__actvbridgehdlr_drvhandler_devhost_compat_procfs_write)
	},
	[__devhost_method_sysfs_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_sysfs_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_sysfs_read * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_sysfs_read = (&__actvbridgehdlr_drvhandler_devhost_sysfs_read)
	},
	[__devhost_method_sysfs_read * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_sysfs_read = (&__actvbridgehdlr_drvhandler_devhost_compat_sysfs_read)
	},
	[__devhost_method_sysfs_write * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_sysfs_write = (&__actvbridgehdlr_drvhandler_devhost_sysfs_write)
	},
	[__devhost_method_sysfs_write * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_sysfs_write = (&__actvbridgehdlr_drvhandler_devhost_compat_sysfs_write)
	},
	[__devhost_method_sysfs_poll * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_sysfs_poll = (&__actvbridgehdlr_drvhandler_devhost_sysfs_poll)
	},
	[__devhost_method_sysfs_poll * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_sysfs_poll = (&__actvbridgehdlr_drvhandler_devhost_compat_sysfs_poll)
	},
	[__devhost_method_clock_rsvd_4 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_3 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_4 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_3 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_settime * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_clock_settime = (&__actvbridgehdlr_drvhandler_devhost_clock_settime)
	},
	[__devhost_method_clock_settime * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_clock_settime = (&__actvbridgehdlr_drvhandler_devhost_compat_clock_settime)
	},
	[__devhost_method_clock_gettime * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_clock_gettime = (&__actvbridgehdlr_drvhandler_devhost_clock_gettime)
	},
	[__devhost_method_clock_gettime * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_clock_gettime = (&__actvbridgehdlr_drvhandler_devhost_compat_clock_gettime)
	},
	[__devhost_method_clock_getres * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_clock_getres = (&__actvbridgehdlr_drvhandler_devhost_clock_getres)
	},
	[__devhost_method_clock_getres * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_clock_getres = (&__actvbridgehdlr_drvhandler_devhost_compat_clock_getres)
	},
	[__devhost_method_clock_adjtime * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_clock_adjtime = (&__actvbridgehdlr_drvhandler_devhost_clock_adjtime)
	},
	[__devhost_method_clock_adjtime * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_clock_adjtime = (&__actvbridgehdlr_drvhandler_devhost_compat_clock_adjtime)
	},
	[__devhost_method_transfs_mounted * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_mounted = (&__actvbridgehdlr_drvhandler_devhost_transfs_mounted)
	},
	[__devhost_method_transfs_mounted * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_mounted = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_mounted)
	},
	[__devhost_method_transfs_unmounted * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_unmounted = (&__actvbridgehdlr_drvhandler_devhost_transfs_unmounted)
	},
	[__devhost_method_transfs_unmounted * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_unmounted = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_unmounted)
	},
	[__devhost_method_transfs_drop_caches * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_drop_caches = (&__actvbridgehdlr_drvhandler_devhost_transfs_drop_caches)
	},
	[__devhost_method_transfs_drop_caches * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_drop_caches = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_drop_caches)
	},
	[__devhost_method_transfs_mkdir * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_mkdir = (&__actvbridgehdlr_drvhandler_devhost_transfs_mkdir)
	},
	[__devhost_method_transfs_mkdir * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_mkdir = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_mkdir)
	},
	[__devhost_method_transfs_rmdir * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_rmdir = (&__actvbridgehdlr_drvhandler_devhost_transfs_rmdir)
	},
	[__devhost_method_transfs_rmdir * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_rmdir = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_rmdir)
	},
	[__devhost_method_transfs_create * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_create = (&__actvbridgehdlr_drvhandler_devhost_transfs_create)
	},
	[__devhost_method_transfs_create * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_create = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_create)
	},
	[__devhost_method_transfs_unlink * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_unlink = (&__actvbridgehdlr_drvhandler_devhost_transfs_unlink)
	},
	[__devhost_method_transfs_unlink * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_unlink = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_unlink)
	},
	[__devhost_method_transfs_mknod * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_mknod = (&__actvbridgehdlr_drvhandler_devhost_transfs_mknod)
	},
	[__devhost_method_transfs_mknod * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_mknod = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_mknod)
	},
	[__devhost_method_transfs_link * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_link = (&__actvbridgehdlr_drvhandler_devhost_transfs_link)
	},
	[__devhost_method_transfs_link * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_link = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_link)
	},
	[__devhost_method_transfs_symlink * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_symlink = (&__actvbridgehdlr_drvhandler_devhost_transfs_symlink)
	},
	[__devhost_method_transfs_symlink * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_symlink = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_symlink)
	},
	[__devhost_method_transfs_statfs * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_statfs = (&__actvbridgehdlr_drvhandler_devhost_transfs_statfs)
	},
	[__devhost_method_transfs_statfs * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_statfs = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_statfs)
	},
	[__devhost_method_transfs_rename * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_rename = (&__actvbridgehdlr_drvhandler_devhost_transfs_rename)
	},
	[__devhost_method_transfs_rename * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_rename = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_rename)
	},
	[__devhost_method_transfs_lookup * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_lookup = (&__actvbridgehdlr_drvhandler_devhost_transfs_lookup)
	},
	[__devhost_method_transfs_lookup * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_lookup = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_lookup)
	},
	[__devhost_method_transfs_setattr * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_setattr = (&__actvbridgehdlr_drvhandler_devhost_transfs_setattr)
	},
	[__devhost_method_transfs_setattr * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_setattr = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_setattr)
	},
	[__devhost_method_transfs_readlink * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_readlink = (&__actvbridgehdlr_drvhandler_devhost_transfs_readlink)
	},
	[__devhost_method_transfs_readlink * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_readlink = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_readlink)
	},
	[__devhost_method_transfs_getattr * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_getattr = (&__actvbridgehdlr_drvhandler_devhost_transfs_getattr)
	},
	[__devhost_method_transfs_getattr * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_getattr = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_getattr)
	},
	[__devhost_method_transfs_listxattr * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_listxattr = (&__actvbridgehdlr_drvhandler_devhost_transfs_listxattr)
	},
	[__devhost_method_transfs_listxattr * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_listxattr = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_listxattr)
	},
	[__devhost_method_transfs_getxattr * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_getxattr = (&__actvbridgehdlr_drvhandler_devhost_transfs_getxattr)
	},
	[__devhost_method_transfs_getxattr * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_getxattr = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_getxattr)
	},
	[__devhost_method_transfs_setxattr * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_setxattr = (&__actvbridgehdlr_drvhandler_devhost_transfs_setxattr)
	},
	[__devhost_method_transfs_setxattr * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_setxattr = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_setxattr)
	},
	[__devhost_method_transfs_tmpfile * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_tmpfile = (&__actvbridgehdlr_drvhandler_devhost_transfs_tmpfile)
	},
	[__devhost_method_transfs_tmpfile * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_tmpfile = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_tmpfile)
	},
	[__devhost_method_transfs_kill_dentry * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_kill_dentry = (&__actvbridgehdlr_drvhandler_devhost_transfs_kill_dentry)
	},
	[__devhost_method_transfs_kill_dentry * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_kill_dentry = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_kill_dentry)
	},
	[__devhost_method_transfs_node_put * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_node_put = (&__actvbridgehdlr_drvhandler_devhost_transfs_node_put)
	},
	[__devhost_method_transfs_node_put * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_node_put = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_node_put)
	},
	[__devhost_method_transfs_sync * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_sync = (&__actvbridgehdlr_drvhandler_devhost_transfs_sync)
	},
	[__devhost_method_transfs_sync * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_sync = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_sync)
	},
	[__devhost_method_transfs_write * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_write = (&__actvbridgehdlr_drvhandler_devhost_transfs_write)
	},
	[__devhost_method_transfs_write * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_write = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_write)
	},
	[__devhost_method_transfs_fsync * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_fsync = (&__actvbridgehdlr_drvhandler_devhost_transfs_fsync)
	},
	[__devhost_method_transfs_fsync * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_fsync = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_fsync)
	},
	[__devhost_method_transfs_readdir * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_readdir = (&__actvbridgehdlr_drvhandler_devhost_transfs_readdir)
	},
	[__devhost_method_transfs_readdir * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_readdir = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_readdir)
	},
	[__devhost_method_transfs_open * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_open = (&__actvbridgehdlr_drvhandler_devhost_transfs_open)
	},
	[__devhost_method_transfs_open * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_open = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_open)
	},
	[__devhost_method_transfs_fallocate * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_fallocate = (&__actvbridgehdlr_drvhandler_devhost_transfs_fallocate)
	},
	[__devhost_method_transfs_fallocate * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_fallocate = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_fallocate)
	},
	[__devhost_method_transfs_close * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_close = (&__actvbridgehdlr_drvhandler_devhost_transfs_close)
	},
	[__devhost_method_transfs_close * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_close = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_close)
	},
	[__devhost_method_transfs_ioctl * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_ioctl = (&__actvbridgehdlr_drvhandler_devhost_transfs_ioctl)
	},
	[__devhost_method_transfs_ioctl * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_ioctl = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_ioctl)
	},
	[__devhost_method_transfs_direct_IO * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_direct_IO = (&__actvbridgehdlr_drvhandler_devhost_transfs_direct_IO)
	},
	[__devhost_method_transfs_direct_IO * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_direct_IO = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_direct_IO)
	},
	[__devhost_method_transfs_update_opts * 2] = {
		.p__actvbridgehdlr_drvhandler_devhost_transfs_update_opts = (&__actvbridgehdlr_drvhandler_devhost_transfs_update_opts)
	},
	[__devhost_method_transfs_update_opts * 2 + 1] = {
		.p__actvbridgehdlr_drvhandler_devhost_compat_transfs_update_opts = (&__actvbridgehdlr_drvhandler_devhost_compat_transfs_update_opts)
	}
};

#endif
union devhost_hdlrs_union sysif_devhost_actvcapcallhdlr_table[__devhost_method_MAX] = {
	[0 ... __ACTV_UPCALL_POOL_GRANT_CHANGE * 2U - 1U] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_default_handler)
	},
	[__ACTV_UPCALL_POOL_GRANT_CHANGE * 2U] = {
		.p_sysif_handle_kcall_entry = (&sysif_actv_pool_handle_grant_change)
	},
	[__ACTV_UPCALL_POOL_GRANT_CHANGE * 2U + 1U] = {
		.p_sysif_handle_kcall_entry = (&sysif_actv_pool_handle_grant_change)
	},
	[__ACTV_UPCALL_POOL_GRANT_CHANGE * 2U + 2U ... __devhost_method_MIN * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_default_handler)
	},
	[__devhost_method_core_rsvd_3 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_3 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_core_load_driver * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_core_load_driver = (&__actvbridgecapcallhdlr_drvhandler_devhost_core_load_driver)
	},
	[__devhost_method_core_load_driver * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_load_driver = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_load_driver)
	},
	[__devhost_method_core_create_device * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_core_create_device = (&__actvbridgecapcallhdlr_drvhandler_devhost_core_create_device)
	},
	[__devhost_method_core_create_device * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_create_device = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_create_device)
	},
	[__devhost_method_core_unload_driver * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_core_unload_driver = (&__actvbridgecapcallhdlr_drvhandler_devhost_core_unload_driver)
	},
	[__devhost_method_core_unload_driver * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_unload_driver = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_unload_driver)
	},
	[__devhost_method_core_bind_device * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_core_bind_device = (&__actvbridgecapcallhdlr_drvhandler_devhost_core_bind_device)
	},
	[__devhost_method_core_bind_device * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_bind_device = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_bind_device)
	},
	[__devhost_method_core_entropy_read * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_core_entropy_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_core_entropy_read)
	},
	[__devhost_method_core_entropy_read * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_entropy_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_core_entropy_read)
	},
	[__devhost_method_rpc_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_rpc_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_rpc_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_rpc_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_rpc_export * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_export = (&__actvbridgecapcallhdlr_drvhandler_devhost_rpc_export)
	},
	[__devhost_method_rpc_export * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_rpc_export = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_rpc_export)
	},
	[__devhost_method_rpc_invoke * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_rpc_invoke = (&__actvbridgecapcallhdlr_drvhandler_devhost_rpc_invoke)
	},
	[__devhost_method_rpc_invoke * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_rpc_invoke = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_rpc_invoke)
	},
	[__devhost_method_fops_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_fops_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_fops_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_fops_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_fops_open * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_open = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_open)
	},
	[__devhost_method_fops_open * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_open = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_open)
	},
	[__devhost_method_fops_close * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_close = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_close)
	},
	[__devhost_method_fops_close * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_close = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_close)
	},
	[__devhost_method_fops_read * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_read)
	},
	[__devhost_method_fops_read * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_read)
	},
	[__devhost_method_fops_write * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_write)
	},
	[__devhost_method_fops_write * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_write)
	},
	[__devhost_method_fops_ioctl * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_ioctl = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_ioctl)
	},
	[__devhost_method_fops_ioctl * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_ioctl = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_ioctl)
	},
	[__devhost_method_fops_llseek * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_llseek = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_llseek)
	},
	[__devhost_method_fops_llseek * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_llseek = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_llseek)
	},
	[__devhost_method_fops_mmap * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_mmap = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_mmap)
	},
	[__devhost_method_fops_mmap * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_mmap = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_mmap)
	},
	[__devhost_method_fops_munmap * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_munmap = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_munmap)
	},
	[__devhost_method_fops_munmap * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_munmap = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_munmap)
	},
	[__devhost_method_fops_sysfs_read * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_read)
	},
	[__devhost_method_fops_sysfs_read * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_sysfs_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_sysfs_read)
	},
	[__devhost_method_fops_sysfs_write * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_sysfs_write)
	},
	[__devhost_method_fops_sysfs_write * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_sysfs_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_sysfs_write)
	},
	[__devhost_method_fops_epoll_ctl * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_ctl = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_ctl)
	},
	[__devhost_method_fops_epoll_ctl * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_ctl = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_ctl)
	},
	[__devhost_method_fops_epoll_close * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_close = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_close)
	},
	[__devhost_method_fops_epoll_close * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_close = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_close)
	},
	[__devhost_method_fops_epoll_et * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_et = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_et)
	},
	[__devhost_method_fops_epoll_et * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_et = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_et)
	},
	[__devhost_method_fops_epoll_reinit_add * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_reinit_add = (&__actvbridgecapcallhdlr_drvhandler_devhost_fops_epoll_reinit_add)
	},
	[__devhost_method_fops_epoll_reinit_add * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_reinit_add = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_fops_epoll_reinit_add)
	},
	[__devhost_method_block_rsvd_4 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_3 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_4 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_3 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_block_check_feature * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_block_check_feature = (&__actvbridgecapcallhdlr_drvhandler_devhost_block_check_feature)
	},
	[__devhost_method_block_check_feature * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_check_feature = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_check_feature)
	},
	[__devhost_method_block_run_queue * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_block_run_queue = (&__actvbridgecapcallhdlr_drvhandler_devhost_block_run_queue)
	},
	[__devhost_method_block_run_queue * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_run_queue = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_run_queue)
	},
	[__devhost_method_block_direct_access * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_block_direct_access = (&__actvbridgecapcallhdlr_drvhandler_devhost_block_direct_access)
	},
	[__devhost_method_block_direct_access * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_direct_access = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_direct_access)
	},
	[__devhost_method_block_register_bio_notify * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_block_register_bio_notify = (&__actvbridgecapcallhdlr_drvhandler_devhost_block_register_bio_notify)
	},
	[__devhost_method_block_register_bio_notify * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_register_bio_notify = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_block_register_bio_notify)
	},
	[__devhost_method_net_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_net_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_net_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_net_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_net_send * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_net_send = (&__actvbridgecapcallhdlr_drvhandler_devhost_net_send)
	},
	[__devhost_method_net_send * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_send = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_send)
	},
	[__devhost_method_net_ioctl * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_net_ioctl = (&__actvbridgecapcallhdlr_drvhandler_devhost_net_ioctl)
	},
	[__devhost_method_net_ioctl * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_ioctl = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_ioctl)
	},
	[__devhost_method_net_status * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_net_status = (&__actvbridgecapcallhdlr_drvhandler_devhost_net_status)
	},
	[__devhost_method_net_status * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_status = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_status)
	},
	[__devhost_method_net_prepare * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_net_prepare = (&__actvbridgecapcallhdlr_drvhandler_devhost_net_prepare)
	},
	[__devhost_method_net_prepare * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_prepare = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_prepare)
	},
	[__devhost_method_net_init * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_net_init = (&__actvbridgecapcallhdlr_drvhandler_devhost_net_init)
	},
	[__devhost_method_net_init * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_init = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_init)
	},
	[__devhost_method_net_netlink_recv * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_net_netlink_recv = (&__actvbridgecapcallhdlr_drvhandler_devhost_net_netlink_recv)
	},
	[__devhost_method_net_netlink_recv * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_netlink_recv = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_net_netlink_recv)
	},
	[__devhost_method_pm_rsvd_3 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_3 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_pm_action * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_pm_action = (&__actvbridgecapcallhdlr_drvhandler_devhost_pm_action)
	},
	[__devhost_method_pm_action * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_action = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_action)
	},
	[__devhost_method_pm_prepare * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_pm_prepare = (&__actvbridgecapcallhdlr_drvhandler_devhost_pm_prepare)
	},
	[__devhost_method_pm_prepare * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_prepare = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_prepare)
	},
	[__devhost_method_pm_power_off * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_pm_power_off = (&__actvbridgecapcallhdlr_drvhandler_devhost_pm_power_off)
	},
	[__devhost_method_pm_power_off * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_power_off = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_power_off)
	},
	[__devhost_method_pm_reboot * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_pm_reboot = (&__actvbridgecapcallhdlr_drvhandler_devhost_pm_reboot)
	},
	[__devhost_method_pm_reboot * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_reboot = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_reboot)
	},
	[__devhost_method_pm_cpuhp_action * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_pm_cpuhp_action = (&__actvbridgecapcallhdlr_drvhandler_devhost_pm_cpuhp_action)
	},
	[__devhost_method_pm_cpuhp_action * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_cpuhp_action = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_pm_cpuhp_action)
	},
	[__devhost_method_procfs_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_procfs_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_procfs_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_procfs_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_procfs_read * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_procfs_read)
	},
	[__devhost_method_procfs_read * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_procfs_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_procfs_read)
	},
	[__devhost_method_procfs_write * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_procfs_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_procfs_write)
	},
	[__devhost_method_procfs_write * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_procfs_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_procfs_write)
	},
	[__devhost_method_sysfs_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_sysfs_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_sysfs_read * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_read)
	},
	[__devhost_method_sysfs_read * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_read = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_read)
	},
	[__devhost_method_sysfs_write * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_write)
	},
	[__devhost_method_sysfs_write * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_write)
	},
	[__devhost_method_sysfs_poll * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_poll = (&__actvbridgecapcallhdlr_drvhandler_devhost_sysfs_poll)
	},
	[__devhost_method_sysfs_poll * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_poll = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_sysfs_poll)
	},
	[__devhost_method_clock_rsvd_4 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_3 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_2 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_1 * 2] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_4 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_3 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_2 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_rsvd_1 * 2 + 1] = {
		.p_sysif_default_handler = (&sysif_actvhdlr_reserved_default_handler)
	},
	[__devhost_method_clock_settime * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_clock_settime = (&__actvbridgecapcallhdlr_drvhandler_devhost_clock_settime)
	},
	[__devhost_method_clock_settime * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_settime = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_settime)
	},
	[__devhost_method_clock_gettime * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_clock_gettime = (&__actvbridgecapcallhdlr_drvhandler_devhost_clock_gettime)
	},
	[__devhost_method_clock_gettime * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_gettime = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_gettime)
	},
	[__devhost_method_clock_getres * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_clock_getres = (&__actvbridgecapcallhdlr_drvhandler_devhost_clock_getres)
	},
	[__devhost_method_clock_getres * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_getres = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_getres)
	},
	[__devhost_method_clock_adjtime * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_clock_adjtime = (&__actvbridgecapcallhdlr_drvhandler_devhost_clock_adjtime)
	},
	[__devhost_method_clock_adjtime * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_adjtime = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_clock_adjtime)
	},
	[__devhost_method_transfs_mounted * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mounted = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mounted)
	},
	[__devhost_method_transfs_mounted * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mounted = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mounted)
	},
	[__devhost_method_transfs_unmounted * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unmounted = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unmounted)
	},
	[__devhost_method_transfs_unmounted * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_unmounted = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_unmounted)
	},
	[__devhost_method_transfs_drop_caches * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_drop_caches = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_drop_caches)
	},
	[__devhost_method_transfs_drop_caches * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_drop_caches = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_drop_caches)
	},
	[__devhost_method_transfs_mkdir * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mkdir = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mkdir)
	},
	[__devhost_method_transfs_mkdir * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mkdir = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mkdir)
	},
	[__devhost_method_transfs_rmdir * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rmdir = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rmdir)
	},
	[__devhost_method_transfs_rmdir * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_rmdir = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_rmdir)
	},
	[__devhost_method_transfs_create * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_create = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_create)
	},
	[__devhost_method_transfs_create * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_create = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_create)
	},
	[__devhost_method_transfs_unlink * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unlink = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_unlink)
	},
	[__devhost_method_transfs_unlink * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_unlink = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_unlink)
	},
	[__devhost_method_transfs_mknod * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mknod = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_mknod)
	},
	[__devhost_method_transfs_mknod * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mknod = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_mknod)
	},
	[__devhost_method_transfs_link * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_link = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_link)
	},
	[__devhost_method_transfs_link * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_link = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_link)
	},
	[__devhost_method_transfs_symlink * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_symlink = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_symlink)
	},
	[__devhost_method_transfs_symlink * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_symlink = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_symlink)
	},
	[__devhost_method_transfs_statfs * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_statfs = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_statfs)
	},
	[__devhost_method_transfs_statfs * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_statfs = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_statfs)
	},
	[__devhost_method_transfs_rename * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rename = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_rename)
	},
	[__devhost_method_transfs_rename * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_rename = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_rename)
	},
	[__devhost_method_transfs_lookup * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_lookup = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_lookup)
	},
	[__devhost_method_transfs_lookup * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_lookup = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_lookup)
	},
	[__devhost_method_transfs_setattr * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setattr)
	},
	[__devhost_method_transfs_setattr * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_setattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_setattr)
	},
	[__devhost_method_transfs_readlink * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readlink = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readlink)
	},
	[__devhost_method_transfs_readlink * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_readlink = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_readlink)
	},
	[__devhost_method_transfs_getattr * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getattr)
	},
	[__devhost_method_transfs_getattr * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_getattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_getattr)
	},
	[__devhost_method_transfs_listxattr * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_listxattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_listxattr)
	},
	[__devhost_method_transfs_listxattr * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_listxattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_listxattr)
	},
	[__devhost_method_transfs_getxattr * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getxattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_getxattr)
	},
	[__devhost_method_transfs_getxattr * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_getxattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_getxattr)
	},
	[__devhost_method_transfs_setxattr * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setxattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_setxattr)
	},
	[__devhost_method_transfs_setxattr * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_setxattr = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_setxattr)
	},
	[__devhost_method_transfs_tmpfile * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_tmpfile = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_tmpfile)
	},
	[__devhost_method_transfs_tmpfile * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_tmpfile = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_tmpfile)
	},
	[__devhost_method_transfs_kill_dentry * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_kill_dentry = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_kill_dentry)
	},
	[__devhost_method_transfs_kill_dentry * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_kill_dentry = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_kill_dentry)
	},
	[__devhost_method_transfs_node_put * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_node_put = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_node_put)
	},
	[__devhost_method_transfs_node_put * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_node_put = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_node_put)
	},
	[__devhost_method_transfs_sync * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_sync = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_sync)
	},
	[__devhost_method_transfs_sync * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_sync = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_sync)
	},
	[__devhost_method_transfs_write * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_write)
	},
	[__devhost_method_transfs_write * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_write = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_write)
	},
	[__devhost_method_transfs_fsync * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fsync = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fsync)
	},
	[__devhost_method_transfs_fsync * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_fsync = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_fsync)
	},
	[__devhost_method_transfs_readdir * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readdir = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_readdir)
	},
	[__devhost_method_transfs_readdir * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_readdir = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_readdir)
	},
	[__devhost_method_transfs_open * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_open = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_open)
	},
	[__devhost_method_transfs_open * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_open = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_open)
	},
	[__devhost_method_transfs_fallocate * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fallocate = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_fallocate)
	},
	[__devhost_method_transfs_fallocate * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_fallocate = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_fallocate)
	},
	[__devhost_method_transfs_close * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_close = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_close)
	},
	[__devhost_method_transfs_close * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_close = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_close)
	},
	[__devhost_method_transfs_ioctl * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_ioctl = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_ioctl)
	},
	[__devhost_method_transfs_ioctl * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_ioctl = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_ioctl)
	},
	[__devhost_method_transfs_direct_IO * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_direct_IO = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_direct_IO)
	},
	[__devhost_method_transfs_direct_IO * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_direct_IO = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_direct_IO)
	},
	[__devhost_method_transfs_update_opts * 2] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_transfs_update_opts = (&__actvbridgecapcallhdlr_drvhandler_devhost_transfs_update_opts)
	},
	[__devhost_method_transfs_update_opts * 2 + 1] = {
		.p__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_update_opts = (&__actvbridgecapcallhdlr_drvhandler_devhost_compat_transfs_update_opts)
	}
};

#endif
void sysif_show_devhost_methods(void)
{
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "core", "load_driver", __devhost_method_core_load_driver);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "core", "load_driver", __devhost_method_core_load_driver);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "core", "create_device", __devhost_method_core_create_device);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "core", "create_device", __devhost_method_core_create_device);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "core", "unload_driver", __devhost_method_core_unload_driver);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "core", "unload_driver", __devhost_method_core_unload_driver);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "core", "bind_device", __devhost_method_core_bind_device);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "core", "bind_device", __devhost_method_core_bind_device);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "core", "entropy_read", __devhost_method_core_entropy_read);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "core", "entropy_read", __devhost_method_core_entropy_read);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "rpc", "export", __devhost_method_rpc_export);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "rpc", "export", __devhost_method_rpc_export);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "rpc", "invoke", __devhost_method_rpc_invoke);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "rpc", "invoke", __devhost_method_rpc_invoke);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "open", __devhost_method_fops_open);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "open", __devhost_method_fops_open);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "close", __devhost_method_fops_close);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "close", __devhost_method_fops_close);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "read", __devhost_method_fops_read);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "read", __devhost_method_fops_read);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "write", __devhost_method_fops_write);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "write", __devhost_method_fops_write);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "ioctl", __devhost_method_fops_ioctl);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "ioctl", __devhost_method_fops_ioctl);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "llseek", __devhost_method_fops_llseek);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "llseek", __devhost_method_fops_llseek);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "mmap", __devhost_method_fops_mmap);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "mmap", __devhost_method_fops_mmap);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "munmap", __devhost_method_fops_munmap);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "munmap", __devhost_method_fops_munmap);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "sysfs_read", __devhost_method_fops_sysfs_read);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "sysfs_read", __devhost_method_fops_sysfs_read);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "sysfs_write", __devhost_method_fops_sysfs_write);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "sysfs_write", __devhost_method_fops_sysfs_write);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "epoll_ctl", __devhost_method_fops_epoll_ctl);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "epoll_ctl", __devhost_method_fops_epoll_ctl);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "epoll_close", __devhost_method_fops_epoll_close);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "epoll_close", __devhost_method_fops_epoll_close);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "epoll_et", __devhost_method_fops_epoll_et);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "epoll_et", __devhost_method_fops_epoll_et);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "fops", "epoll_reinit_add", __devhost_method_fops_epoll_reinit_add);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "fops", "epoll_reinit_add", __devhost_method_fops_epoll_reinit_add);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "block", "check_feature", __devhost_method_block_check_feature);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "block", "check_feature", __devhost_method_block_check_feature);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "block", "run_queue", __devhost_method_block_run_queue);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "block", "run_queue", __devhost_method_block_run_queue);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "block", "direct_access", __devhost_method_block_direct_access);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "block", "direct_access", __devhost_method_block_direct_access);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "block", "register_bio_notify", __devhost_method_block_register_bio_notify);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "block", "register_bio_notify", __devhost_method_block_register_bio_notify);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "net", "send", __devhost_method_net_send);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "net", "send", __devhost_method_net_send);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "net", "ioctl", __devhost_method_net_ioctl);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "net", "ioctl", __devhost_method_net_ioctl);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "net", "status", __devhost_method_net_status);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "net", "status", __devhost_method_net_status);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "net", "prepare", __devhost_method_net_prepare);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "net", "prepare", __devhost_method_net_prepare);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "net", "init", __devhost_method_net_init);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "net", "init", __devhost_method_net_init);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "net", "netlink_recv", __devhost_method_net_netlink_recv);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "net", "netlink_recv", __devhost_method_net_netlink_recv);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "pm", "action", __devhost_method_pm_action);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "pm", "action", __devhost_method_pm_action);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "pm", "prepare", __devhost_method_pm_prepare);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "pm", "prepare", __devhost_method_pm_prepare);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "pm", "power_off", __devhost_method_pm_power_off);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "pm", "power_off", __devhost_method_pm_power_off);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "pm", "reboot", __devhost_method_pm_reboot);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "pm", "reboot", __devhost_method_pm_reboot);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "pm", "cpuhp_action", __devhost_method_pm_cpuhp_action);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "pm", "cpuhp_action", __devhost_method_pm_cpuhp_action);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "procfs", "read", __devhost_method_procfs_read);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "procfs", "read", __devhost_method_procfs_read);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "procfs", "write", __devhost_method_procfs_write);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "procfs", "write", __devhost_method_procfs_write);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "sysfs", "read", __devhost_method_sysfs_read);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "sysfs", "read", __devhost_method_sysfs_read);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "sysfs", "write", __devhost_method_sysfs_write);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "sysfs", "write", __devhost_method_sysfs_write);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "sysfs", "poll", __devhost_method_sysfs_poll);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "sysfs", "poll", __devhost_method_sysfs_poll);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "clock", "settime", __devhost_method_clock_settime);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "clock", "settime", __devhost_method_clock_settime);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "clock", "gettime", __devhost_method_clock_gettime);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "clock", "gettime", __devhost_method_clock_gettime);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "clock", "getres", __devhost_method_clock_getres);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "clock", "getres", __devhost_method_clock_getres);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "clock", "adjtime", __devhost_method_clock_adjtime);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "clock", "adjtime", __devhost_method_clock_adjtime);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "mounted", __devhost_method_transfs_mounted);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "mounted", __devhost_method_transfs_mounted);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "unmounted", __devhost_method_transfs_unmounted);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "unmounted", __devhost_method_transfs_unmounted);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "drop_caches", __devhost_method_transfs_drop_caches);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "drop_caches", __devhost_method_transfs_drop_caches);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "mkdir", __devhost_method_transfs_mkdir);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "mkdir", __devhost_method_transfs_mkdir);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "rmdir", __devhost_method_transfs_rmdir);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "rmdir", __devhost_method_transfs_rmdir);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "create", __devhost_method_transfs_create);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "create", __devhost_method_transfs_create);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "unlink", __devhost_method_transfs_unlink);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "unlink", __devhost_method_transfs_unlink);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "mknod", __devhost_method_transfs_mknod);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "mknod", __devhost_method_transfs_mknod);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "link", __devhost_method_transfs_link);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "link", __devhost_method_transfs_link);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "symlink", __devhost_method_transfs_symlink);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "symlink", __devhost_method_transfs_symlink);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "statfs", __devhost_method_transfs_statfs);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "statfs", __devhost_method_transfs_statfs);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "rename", __devhost_method_transfs_rename);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "rename", __devhost_method_transfs_rename);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "lookup", __devhost_method_transfs_lookup);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "lookup", __devhost_method_transfs_lookup);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "setattr", __devhost_method_transfs_setattr);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "setattr", __devhost_method_transfs_setattr);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "readlink", __devhost_method_transfs_readlink);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "readlink", __devhost_method_transfs_readlink);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "getattr", __devhost_method_transfs_getattr);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "getattr", __devhost_method_transfs_getattr);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "listxattr", __devhost_method_transfs_listxattr);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "listxattr", __devhost_method_transfs_listxattr);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "getxattr", __devhost_method_transfs_getxattr);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "getxattr", __devhost_method_transfs_getxattr);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "setxattr", __devhost_method_transfs_setxattr);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "setxattr", __devhost_method_transfs_setxattr);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "tmpfile", __devhost_method_transfs_tmpfile);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "tmpfile", __devhost_method_transfs_tmpfile);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "kill_dentry", __devhost_method_transfs_kill_dentry);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "kill_dentry", __devhost_method_transfs_kill_dentry);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "node_put", __devhost_method_transfs_node_put);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "node_put", __devhost_method_transfs_node_put);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "sync", __devhost_method_transfs_sync);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "sync", __devhost_method_transfs_sync);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "write", __devhost_method_transfs_write);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "write", __devhost_method_transfs_write);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "fsync", __devhost_method_transfs_fsync);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "fsync", __devhost_method_transfs_fsync);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "readdir", __devhost_method_transfs_readdir);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "readdir", __devhost_method_transfs_readdir);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "open", __devhost_method_transfs_open);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "open", __devhost_method_transfs_open);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "fallocate", __devhost_method_transfs_fallocate);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "fallocate", __devhost_method_transfs_fallocate);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "close", __devhost_method_transfs_close);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "close", __devhost_method_transfs_close);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "ioctl", __devhost_method_transfs_ioctl);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "ioctl", __devhost_method_transfs_ioctl);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "direct_IO", __devhost_method_transfs_direct_IO);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "direct_IO", __devhost_method_transfs_direct_IO);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvcall", "drvcall_devhost", "transfs", "update_opts", __devhost_method_transfs_update_opts);
	hm_debug("method is %s_%s_%s_%s, callnum is %u\n", "actvhdlr", "drvhandler_devhost", "transfs", "update_opts", __devhost_method_transfs_update_opts);
	hm_info("%s_%s, max method num: %d\n", "devhost", "method", __devhost_method_MAX);
}

#endif
#endif

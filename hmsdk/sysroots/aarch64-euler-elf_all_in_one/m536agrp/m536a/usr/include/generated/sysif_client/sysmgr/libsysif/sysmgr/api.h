/*
* Automatically generated file; DO NOT EDIT.
* Automatically generated sysif apis for sysmgr
* Using command: ../recipe-sysroot-native/usr/bin/hm-dsl/hm-dsl sysif ../../../../../work-shared/hm-verif-kernel/git/ulibs/include/libsysif/sysmgr/api.sysif -I ../../../../../work-shared/hm-verif-kernel/git/ulibs/include --api-dest ../image/usr/include/generated/sysif_client/sysmgr/libsysif/sysmgr/api.h --server-dest ../image/usr/include/generated/sysif_server/sysmgr/libsysif/sysmgr/server.h --legacy-mode --override-selfcall
* Create: Mon Nov 28 09:47:55 2022
*/
#ifndef LIBSYSIF_SYSMGR_API_H
#define LIBSYSIF_SYSMGR_API_H
#ifndef LIBSYSIF_SYSMGR_COMMON_H
#define LIBSYSIF_SYSMGR_COMMON_H
#include <libsysif/utils_common.h>
#include <hongmeng/compiler.h>
#include <hongmeng/types.h>
#include <asm/actv_rpc.h>
#ifndef LIBSYSIF_BASE_API_COMMON_H
#define LIBSYSIF_BASE_API_COMMON_H
#include <stddef.h>
#include <stdint.h>
#include <hmkernel/capability.h>
struct sysif_reply_header {
	int32_t retval;
	uint32_t msgsz;
};

#define SYSIF_REPLY_LEN_MAX 256UL
extern void* hm_actvpool_prepare_ret(unsigned long long sender, unsigned long credential, unsigned long size);


extern struct arch_actv_local* hm_actv_current_arch_actv_local(void);


#endif
#include <stdint.h>
#include <unistd.h>
#include <hmkernel/sysconf.h>
#include <mqueue.h>
#include <libbunch/bunch_ipc.h>

#include <stdint.h>

struct sysif_data {
	/* 64: sysif data name buf len */
	char name[64];
};

enum {
	ACTVCALL_HMCALL_M35_KSUS,
	ACTVCALL_HMCALL_M35_PAJU,
};



#include <sys/stat.h>

#define PATHMGR_PATH_NAME_MAX 64
struct pathmgr_name {
	char path[PATHMGR_PATH_NAME_MAX];
};




#include <hmkernel/capability.h>

struct uname {
	char sysname[__SYSCONF_STR_LEN_MAX];
	char nodename[__SYSCONF_STR_LEN_MAX];
	char release[__SYSCONF_STR_LEN_MAX];
	char version[__SYSCONF_STR_LEN_MAX];
	char machine[__SYSCONF_STR_LEN_MAX];
	char domainname[__SYSCONF_STR_LEN_MAX];
};

/* This struct is compact for `struct sysinfo` in libc */
struct sys_info {
	uint64_t uptime;
	uint64_t loads_1;
	uint64_t loads_5;
	uint64_t loads_15;
	uint64_t total_ram;
	uint64_t avail_ram;
	uint64_t shared_ram;
	uint64_t buffer_ram;
	uint64_t total_swap;
	uint64_t avail_swap;
	uint64_t procs;
	uint64_t total_high;
	uint64_t free_high;

	/*
	 * ram start address, which is required by devhost to build
	 * "kernel" mapping for liblinux properly.
	 */
	uint64_t ramstart;
};

struct nodename {
	char nodename[__SYSCONF_STR_LEN_MAX];
};

enum {
	CPU_FLAGS_WITH_STATE,
	CPU_FLAGS_WITH_TIME,
};

struct trace_event {
	char name[KEV_EVENT_NAME_SIZE];
	char filter[KEV_EVENT_FILTER_SIZE];
	unsigned int enable;
};



#include <sys/stat.h>
#include <libmem/mstat.h>

/*
 * To support the mixed data model which means the client and the server
 * may use different data model. See the comment for limitation of data type
 * used in the sysif interfaces in <libsysif/base/api.h>.
 */
#define MEMMGR_SHM_NAME_MAX PATHMGR_PATH_NAME_MAX
struct memmgr_shm_name {
	char path[MEMMGR_SHM_NAME_MAX];
};

#define FS_SERVICE_NAME_MAX PATHMGR_PATH_NAME_MAX
struct fs_service_name {
	char name[FS_SERVICE_NAME_MAX];
};

#define VR_ANON_NAME_MAX PATHMGR_PATH_NAME_MAX
struct vr_anon_name {
	char name[VR_ANON_NAME_MAX];
};

struct shm_node_info {
	unsigned long long paddr;
};

struct hgtlb_mount_args_s {
	unsigned int order;
};

struct file_map_info_s {
	int shm_map_cnt;
};



#include <libhmsrv_sys/hm_procmgr.h>
#include <libhmsrv_sys/hm_proc_affinity.h>


#include <sys/stat.h>
#include <libhmsrv_sys/hm_mqueue.h>

/*
 * To support the mixed data model which means the client and the server
 * may use different data model. See the comment for limitation of data type
 * used in the sysif interfaces in <libsysif/base/api.h>.
 */
struct mqueuemgr_name {
	char name[MQUEUEMGR_NAME_MAX];
};



#include <libhmsrv_sys/hm_thread.h>
#include <libhmsrv_sys/hm_futex.h>

/*
 * To support the mixed data model which means the client and the server
 * may use different data model. See the comment for limitation of data type
 * used in the sysif interfaces in <libsysif/base/api.h>.
 */
struct threadmgr_thread_name {
	char name[HMCAP_THREAD_NAME_SIZE];
};

#define PATH_NAME_MAX 64
struct path_name {
	char path[PATH_NAME_MAX];
};



#include <hmkernel/vtimekeep.h>


#include <libhmsrv_sys/hm_signal.h>
/* For the user to set siginfo_t struct */
struct siginfo_set {
	int si_code;
};

#define SIGNAL_GET_SIGMASK		(0)
#define SIGNAL_SET_SIGMASK		(1)
#define SIGNAL_GETSET_SIGMASK		(2)
#define SIGNAL_SET_SIGMASK_RESTART	(3)

/*
 * This error code is used exclusively by set_sigmask,
 * a positive number is used here to distinguish it from the kernel.
 * Because actvcall_hmcall_signal_restore should return retval with unsigned long type.
 */
#define SIGNAL_RESTORE_INVALID	(1UL)


#include <hmkernel/capability.h>

/* current irqmgr only support max length 8 of hwconf */
#define IRQMGR_HWCONF_LEN_MAX	8U

struct irqmgr_version {
	char major;
	char minor;
	char patch;
	char build;
};

struct irqmgr_to_logic_arg {
	unsigned int hwconf[IRQMGR_HWCONF_LEN_MAX];
	unsigned int hwconf_len;
};

struct irqmgr_grant_arg {
	int irqctrl_id;
	rref_t irqctrl_rref;
	unsigned int logic_irq;
};

struct irqmgr_stat_arg {
	char name[IRQCTRL_NAME_LEN];
	struct bunch_ipc_attr attr;
};



#include <stdint.h>

/*
 * To support the mixed data model which means the client and the server
 * may use different data model. See the comment for limitation of data type
 * used in the sysif interfaces in <libsysif/base/api.h>.
 */
#define SECMGR_SEC_CONTEXT_MAX_LENGTH 64UL
struct secmgr_sec_context {
	char context[SECMGR_SEC_CONTEXT_MAX_LENGTH];
};



#define PROCFS_SIMPLE_DATA_LEN (SYSIF_REPLY_LEN_MAX - sizeof(unsigned long long))

/*
 * Note:
 *   The client and the server shall see the same sizeof(struct)
 */
struct procfs_simple_data {
	uint32_t size;
	char data[PROCFS_SIMPLE_DATA_LEN];
};

#define PROCFS_TAGNAME_MAX_LEN 32
struct procfs_tagname {
	char name[PROCFS_TAGNAME_MAX_LEN];
};



#include <libhmsrv_sys/hm_vm.h>

struct shm_region_array {
	uint64_t hpa[VM_SHM_REGIONS_NUM];
	uint64_t gpa[VM_SHM_REGIONS_NUM];
	uint64_t size[VM_SHM_REGIONS_NUM];
};


#include <libhmsrv_sys/hm_guard.h>

/*
 * To support the mixed data model which means the client and the server
 * may use different data model. See the comment for limitation of data type
 * used in the sysif interfaces in <libsysif/base/api.h>.
 */
#define guard_mask(id)		(1U << (id))

enum guard_task_type {
	TYPE_RUNNING = 0,
	TYPE_READY,
	TYPE_BLOCKED,
	TYPE_LOCKED,
	TYPE_MEM,
	NR_GUARD_TYPE,
};

enum guard_action_cmd {
	GUARD_ACTION_QUERY,
	GUARD_ACTION_DUMP,
};



#include <hmkernel/capability.h>

struct iovmgr_ops_arg {
	int iov_ctrl_id;
	unsigned int device_id;
	uint32_t type;
	int pasid;
	pid_t pid;
};



#include <hmkernel/module_ops.h>
#include <hmkernel/capability.h>

struct module_grant_arg {
	char mod_name[CAP_MODULE_NAME_LEN];
	rref_t mod_rref;
};




#define SYSMGR_ENTROPY_DATA_MAX_LEN	64
struct sysmgr_entropy_data {
	unsigned char buf[SYSMGR_ENTROPY_DATA_MAX_LEN];
	unsigned int len;
	/* health test fail count */
	unsigned int fail_count;
};




#include <libkbox/param.h>

struct kbox_region_name {
	char value[KBOX_REGION_NAME_SIZE];
};



#include <unistd.h>
#include <libbunch/bunch_ipc.h>
#include <libhmsrv_sys/hm_dump.h>

/*
 * To support the mixed data model which means the client and the server
 * may use different data model. See the comment for limitation of data type
 * used in the sysif interfaces in <libsysif/base/api.h>.
 */
enum dump_output_type {
	DUMP_OUTPUT_TYPE_BUNCH,
	DUMP_OUTPUT_TYPE_KLOG,
};



#define LIVEPATCH_NAME_MAX_LEN		32

struct livepatch_string {
	char name[LIVEPATCH_NAME_MAX_LEN];
};



#include <libperf/perf_event.h>



#include <lib/perfra/ksus.h>

#include <unistd.h>

enum hmspif_paju_cmd_e {
	HMSPIF_PAJU_CMD_PAJUMP = 1,
	HMSPIF_PAJU_CMD_PANOP = 2,
	HMSPIF_PAJU_CMD_QUERY = 3,
};

enum hmspif_paju_status_e {
	HMSPIF_PAJU_STATUS_INVALID = 0,
	HMSPIF_PAJU_STATUS_JUMP = 1,
	HMSPIF_PAJU_STATUS_NOP = 2,
};




#include <unistd.h>
#include <libhmlog/hmdynlog.h>
#include <libhmlog/hmlog.h>
struct dynlog_logspace {
	char value[HMLOG_SPACE_SIZE];
};



#include <hmkernel/types.h>


#include <stdint.h>



enum INJECT_FAULT_TYPE {
	FAULT_CRASH = 0,
	FAULT_MEM,
	FAULT_SCHED,
	FAULT_UNKNOWN,
};

enum FAULT_CRASH_TYPE {
	FAULT_CRASH_PANIC = 0,
	FAULT_CRASH_BUGON,
	FAULT_CRASH_DIVIDE_ZERO,
	FAULT_CRASH_UNKNOWN,
};

enum FAULT_MEM_TYPE {
	FAULT_MEM_OOM = 0,
	FAULT_MEM_ACCESS_NULL,
	FAULT_MEM_DOUBLE_FREE,
	FAULT_MEM_BIG_ARRAY,
	FAULT_MEM_UNKNOWN,
};

enum FAULT_SCHED_TYPE {
	FAULT_SCHED_LOOP_DEAD = 0,
	FAULT_SCHED_LOCK_DEAD,
	FAULT_SCHED_UNKNOWN,
};



#include <stdint.h>


#include <time.h>
#include <sys/sem.h>

#include <libhmsrv_sys/hm_ipc_sem.h>


#include <sys/procfs.h>


#include <stdint.h>

/*
 * To support the mixed data model which means the client and the server
 * may use different data model. See the comment for limitation of data type
 * used in the sysif interfaces in <libsysif/base/api.h>.
 */
enum RULE_NOTIFY_OPERATION {
	RULE_ADD    = 0,
	RULE_DEL    = 1,
};
enum RULE_APPEND_TYPE {
	TAIL_APPEND    = 0,
	HEAD_APPEND    = 1,
};


#include <libhmsrv_key/key.h>


#include <stdint.h>

/*
 * To support the mixed data model which means the client and the server
 * may use different data model. See the comment for limitation of data type
 * used in the sysif interfaces in <libsysif/base/api.h>.
 */


raw_static_assert(sizeof(struct sysif_data) <= 96,
                    hmcall_test_m4_arg_v2_is_too_large);
raw_static_assert(sizeof(struct sysif_data) <= 96,
                    hmcall_test_m11_arg_data_is_too_large);
raw_static_assert(sizeof(struct sysif_data) <= 96,
                    hmcall_test_m12_arg_data_is_too_large);
raw_static_assert(sizeof(struct sysif_data) <= 96,
                    hmcall_test_m17_arg_data_is_too_large);
raw_static_assert(sizeof(struct sysif_data) <= 96,
                    hmcall_test_m31_arg_data_is_too_large);
raw_static_assert(sizeof(cref_t) <= 96,
                    hmcall_path_add_path_arg_cref_is_too_large);
raw_static_assert(sizeof(struct pathmgr_name) <= 96,
                    hmcall_path_add_path_arg_name_is_too_large);
raw_static_assert(sizeof(mode_t) <= 96,
                    hmcall_path_add_path_arg_mode_is_too_large);
raw_static_assert(sizeof(struct pathmgr_name) <= 96,
                    hmcall_path_grant_path_arg_name_is_too_large);
raw_static_assert(sizeof(struct pathmgr_name) <= 96,
                    hmcall_path_del_path_arg_name_is_too_large);
raw_static_assert(sizeof(struct pathmgr_name) <= 96,
                    hmcall_path_acquire_path_arg_name_is_too_large);
raw_static_assert(sizeof(struct pathmgr_name) <= 96,
                    hmcall_path_release_path_arg_name_is_too_large);
raw_static_assert(sizeof(rref_t) <= 96,
                    hmcall_path_release_path_arg_rref_is_too_large);
raw_static_assert(sizeof(struct pathmgr_name) <= 96,
                    hmcall_path_stat_arg_name_is_too_large);
raw_static_assert(sizeof(struct bunch_ipc_attr) <= 96,
                    hmcall_path_stat_arg_attr_is_too_large);
raw_static_assert(sizeof(struct pathmgr_name) <= 96,
                    hmcall_path_chmod_arg_name_is_too_large);
raw_static_assert(sizeof(mode_t) <= 96,
                    hmcall_path_chmod_arg_mode_is_too_large);
raw_static_assert(sizeof(rref_t) <= 96,
                    hmcall_sysctrl_require_arg_rref_is_too_large);
raw_static_assert(sizeof(struct bunch_ipc_attr) <= 96,
                    hmcall_sysctrl_cpustat_arg_attr_is_too_large);
raw_static_assert(sizeof(struct nodename) <= 96,
                    hmcall_sysctrl_set_hostname_arg_name_is_too_large);
raw_static_assert(sizeof(struct trace_event) <= 96,
                    hmcall_sysctrl_kev_set_enable_arg_event_is_too_large);
raw_static_assert(sizeof(struct trace_event) <= 96,
                    hmcall_sysctrl_kev_set_filter_arg_event_is_too_large);
raw_static_assert(sizeof(struct fs_service_name) <= 96,
                    hmcall_mem_mmap_arg_service_name_is_too_large);
raw_static_assert(sizeof(struct memmgr_shm_name) <= 96,
                    hmcall_mem_shm_open_arg_name_is_too_large);
raw_static_assert(sizeof(mode_t) <= 96,
                    hmcall_mem_shm_open_arg_mode_is_too_large);
raw_static_assert(sizeof(struct memmgr_shm_name) <= 96,
                    hmcall_mem_shm_unlink_arg_name_is_too_large);
raw_static_assert(sizeof(xref_t) <= 96,
                    hmcall_mem_grant_shm_by_xref_arg_xref_is_too_large);
raw_static_assert(sizeof(xref_t) <= 96,
                    hmcall_mem_ashm_grant_trans_arg_xref_is_too_large);
raw_static_assert(sizeof(struct memmgr_shm_name) <= 96,
                    hmcall_mem_shm_chmod_arg_name_is_too_large);
raw_static_assert(sizeof(mode_t) <= 96,
                    hmcall_mem_shm_chmod_arg_mode_is_too_large);
raw_static_assert(sizeof(struct bunch_ipc_attr) <= 96,
                    hmcall_mem_stat_arg_attr_is_too_large);
raw_static_assert(sizeof(struct vr_anon_name) <= 96,
                    hmcall_mem_set_anon_name_arg_anon_name_is_too_large);
raw_static_assert(sizeof(struct hgtlb_mount_args_s) <= 96,
                    hmcall_mem_hugetlbfs_mount_arg_args_is_too_large);
raw_static_assert(sizeof(struct hm_spawn_req) <= 96,
                    hmcall_proc_spawn_arg_req_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_waitid_arg_pid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_wait4_arg_pid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_cnode_idx_of_arg_pid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_getpgid_arg_pid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_setpgid_arg_pid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_setpgid_arg_dst_pgrp_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_getsid_arg_pid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_setfgpgrp_arg_sid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_setfgpgrp_arg_pgid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_getfgpgrp_arg_sid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_signal_fgpgrp_arg_sid_is_too_large);
raw_static_assert(sizeof(uid_t) <= 96,
                    hmcall_proc_setuid_arg_uid_is_too_large);
raw_static_assert(sizeof(uid_t) <= 96,
                    hmcall_proc_setreuid_arg_ruid_is_too_large);
raw_static_assert(sizeof(uid_t) <= 96,
                    hmcall_proc_setreuid_arg_euid_is_too_large);
raw_static_assert(sizeof(uid_t) <= 96,
                    hmcall_proc_setresuid_arg_ruid_is_too_large);
raw_static_assert(sizeof(uid_t) <= 96,
                    hmcall_proc_setresuid_arg_euid_is_too_large);
raw_static_assert(sizeof(uid_t) <= 96,
                    hmcall_proc_setresuid_arg_suid_is_too_large);
raw_static_assert(sizeof(gid_t) <= 96,
                    hmcall_proc_setregid_arg_rgid_is_too_large);
raw_static_assert(sizeof(gid_t) <= 96,
                    hmcall_proc_setregid_arg_egid_is_too_large);
raw_static_assert(sizeof(gid_t) <= 96,
                    hmcall_proc_setgid_arg_gid_is_too_large);
raw_static_assert(sizeof(gid_t) <= 96,
                    hmcall_proc_setresgid_arg_rgid_is_too_large);
raw_static_assert(sizeof(gid_t) <= 96,
                    hmcall_proc_setresgid_arg_egid_is_too_large);
raw_static_assert(sizeof(gid_t) <= 96,
                    hmcall_proc_setresgid_arg_sgid_is_too_large);
raw_static_assert(sizeof(uid_t) <= 96,
                    hmcall_proc_setfsuid_arg_uid_is_too_large);
raw_static_assert(sizeof(gid_t) <= 96,
                    hmcall_proc_setfsgid_arg_gid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_stat_arg_pid_is_too_large);
raw_static_assert(sizeof(struct bunch_ipc_attr) <= 96,
                    hmcall_proc_stat_arg_attr_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_getrlimit_arg_pid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_setrlimit_arg_pid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_prlimit_arg_pid_is_too_large);
raw_static_assert(sizeof(enum pdebug_thread_req) <= 96,
                    hmcall_proc_debug_thread_arg_req_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_debug_thread_arg_tid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_debug_wait_status_arg_tid_is_too_large);
raw_static_assert(sizeof(enum pdebug_vspace_req) <= 96,
                    hmcall_proc_debug_vspace_arg_req_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_debug_vspace_arg_pid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_get_coredump_arg_pid_is_too_large);
raw_static_assert(sizeof(enum coredump_request) <= 96,
                    hmcall_proc_get_coredump_arg_request_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_set_coredump_arg_pid_is_too_large);
raw_static_assert(sizeof(union coredump_attr) <= 96,
                    hmcall_proc_set_coredump_arg_value_is_too_large);
raw_static_assert(sizeof(enum coredump_request) <= 96,
                    hmcall_proc_set_coredump_arg_request_is_too_large);
raw_static_assert(sizeof(cref_t) <= 96,
                    hmcall_proc_timer_create_arg_timer_cref_is_too_large);
raw_static_assert(sizeof(struct __siginfo) <= 96,
                    hmcall_proc_timer_create_arg_siginfo_is_too_large);
raw_static_assert(sizeof(struct hm_execve_req) <= 96,
                    hmcall_proc_execve_arg_req_is_too_large);
raw_static_assert(sizeof(cref_t) <= 96,
                    hmcall_proc_new_vspace_arg_base_pmem_is_too_large);
raw_static_assert(sizeof(struct sysarg_vm_config) <= 96,
                    hmcall_proc_new_vm_mmscd_arg_vm_conf_is_too_large);
raw_static_assert(sizeof(cref_t) <= 96,
                    hmcall_proc_new_vm_arg_base_pmem_is_too_large);
raw_static_assert(sizeof(struct sysarg_vm_config) <= 96,
                    hmcall_proc_new_vm_arg_vm_conf_is_too_large);
raw_static_assert(sizeof(struct cpucontext_name) <= 96,
                    hmcall_proc_new_cpucontext_mmscd_arg_name_is_too_large);
raw_static_assert(sizeof(cref_t) <= 96,
                    hmcall_proc_new_cpucontext_arg_base_pmem_is_too_large);
raw_static_assert(sizeof(struct cpucontext_name) <= 96,
                    hmcall_proc_new_cpucontext_arg_name_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_elf_load_info_arg_pid_is_too_large);
raw_static_assert(sizeof(struct bunch_ipc_attr) <= 96,
                    hmcall_proc_elf_load_info_arg_attr_is_too_large);
raw_static_assert(sizeof(struct proc_pm_config) <= 96,
                    hmcall_proc_pm_config_add_arg_config_is_too_large);
raw_static_assert(sizeof(cref_t) <= 96,
                    hmcall_proc_pm_dormancy_enter_arg_src_tcb_cref_is_too_large);
raw_static_assert(sizeof(enum proc_pm_attr) <= 96,
                    hmcall_proc_pm_dormancy_enter_arg_attr_is_too_large);
raw_static_assert(sizeof(struct hm_clone_req) <= 96,
                    hmcall_proc_clone_arg_req_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_proc_dyn_libs_data_arg_dyn_buf_is_too_large);
raw_static_assert(sizeof(struct event_args_s) <= 96,
                    hmcall_proc_register_event_arg_args_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_proc_affinity_get_arg_pid_is_too_large);
raw_static_assert(sizeof(struct mqueuemgr_name) <= 96,
                    hmcall_mqueue_open_arg_mqueue_is_too_large);
raw_static_assert(sizeof(time_t) <= 96,
                    hmcall_mqueue_send_arg_tv_sec_is_too_large);
raw_static_assert(sizeof(time_t) <= 96,
                    hmcall_mqueue_recv_arg_tv_sec_is_too_large);
raw_static_assert(sizeof(struct mqueuemgr_name) <= 96,
                    hmcall_mqueue_unlink_arg_mqueue_is_too_large);
raw_static_assert(sizeof(struct mqueuemgr_name) <= 96,
                    hmcall_mqueue_chmod_arg_mqueue_is_too_large);
raw_static_assert(sizeof(mode_t) <= 96,
                    hmcall_mqueue_chmod_arg_mode_is_too_large);
raw_static_assert(sizeof(cref_t) <= 96,
                    hmcall_thread_set_tid_address_arg_tcb_cref_is_too_large);
raw_static_assert(sizeof(cref_t) <= 96,
                    hmcall_thread_setname_arg_tcb_cref_is_too_large);
raw_static_assert(sizeof(struct threadmgr_thread_name) <= 96,
                    hmcall_thread_setname_arg_th_name_is_too_large);
raw_static_assert(sizeof(struct path_name) <= 96,
                    hmcall_thread_bind_info_arg_name_is_too_large);
raw_static_assert(sizeof(__cpuset_t) <= 96,
                    hmcall_thread_sched_setaffinity_arg_cpuset_is_too_large);
raw_static_assert(sizeof(struct thread_futex_wait_args) <= 96,
                    hmcall_thread_futex_wait_arg_args_is_too_large);
raw_static_assert(sizeof(struct thread_futex_wake_args) <= 96,
                    hmcall_thread_futex_wake_arg_args_is_too_large);
raw_static_assert(sizeof(struct thread_futex_requeue_args) <= 96,
                    hmcall_thread_futex_requeue_arg_args_is_too_large);
raw_static_assert(sizeof(struct vtimekeep_tock_policy) <= 96,
                    hmcall_time_set_tock_policy_arg_policy_is_too_large);
raw_static_assert(sizeof(struct siginfo_set) <= 96,
                    hmcall_signal_kill_arg_sig_set_is_too_large);
raw_static_assert(sizeof(struct siginfo_set) <= 96,
                    hmcall_signal_tkill_arg_sig_set_is_too_large);
raw_static_assert(sizeof(struct __siginfo) <= 96,
                    hmcall_signal_sigqueue_arg_siginfo_is_too_large);
raw_static_assert(sizeof(struct __siginfo) <= 96,
                    hmcall_signal_pthread_sigqueue_arg_siginfo_is_too_large);
raw_static_assert(sizeof(enum hm_sigaction_flag) <= 96,
                    hmcall_signal_set_signal_handler_arg_flag_is_too_large);
raw_static_assert(sizeof(struct sigstack) <= 96,
                    hmcall_signal_set_sigstack_arg_new_stack_is_too_large);
raw_static_assert(sizeof(time_t) <= 96,
                    hmcall_signal_timedwait_arg_tv_sec_is_too_large);
raw_static_assert(sizeof(struct irqmgr_grant_arg) <= 96,
                    hmcall_irq_grant_ctrl_arg_arg_is_too_large);
raw_static_assert(sizeof(struct irqmgr_to_logic_arg) <= 96,
                    hmcall_irq_to_logic_arg_arg_is_too_large);
raw_static_assert(sizeof(struct irqmgr_version) <= 96,
                    hmcall_irq_version_check_arg_expected_is_too_large);
raw_static_assert(sizeof(struct irqmgr_stat_arg) <= 96,
                    hmcall_irq_stat_arg_arg_is_too_large);
raw_static_assert(sizeof(struct secmgr_sec_context) <= 96,
                    hmcall_sec_setexeccon_arg_ctx_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_procfs_simple_read_arg_name_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_procfs_simple_pid_read_arg_name_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_procfs_simple_tid_read_arg_name_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_procfs_pid_read_arg_name_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_procfs_tid_read_arg_name_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_procfs_read_arg_name_buf_is_too_large);
raw_static_assert(sizeof(struct procfs_tagname) <= 96,
                    hmcall_procfs_pid_write_arg_name_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_procfs_pid_write_arg_name_buf_is_too_large);
raw_static_assert(sizeof(struct procfs_tagname) <= 96,
                    hmcall_procfs_tid_write_arg_name_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_procfs_tid_write_arg_name_buf_is_too_large);
raw_static_assert(sizeof(struct procfs_tagname) <= 96,
                    hmcall_procfs_write_arg_name_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_procfs_write_arg_name_buf_is_too_large);
raw_static_assert(sizeof(struct procfs_tagname) <= 96,
                    hmcall_procfs_yama_write_arg_name_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_procfs_simple_irq_read_arg_name_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_procfs_irq_read_arg_name_buf_is_too_large);
raw_static_assert(sizeof(struct procfs_tagname) <= 96,
                    hmcall_procfs_irq_write_arg_tagname_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_procfs_irq_write_arg_src_buf_is_too_large);
raw_static_assert(sizeof(xref_t) <= 96,
                    hmcall_vm_get_region_num_arg_vm_is_too_large);
raw_static_assert(sizeof(cref_t) <= 96,
                    hmcall_vm_map_iomem_arg_vm_is_too_large);
raw_static_assert(sizeof(rref_t) <= 96,
                    hmcall_vm_map_to_process_arg_vm_is_too_large);
raw_static_assert(sizeof(cref_t) <= 96,
                    hmcall_vm_map_shmmem_arg_vm_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_vm_map_ipcshm_arg_gpa_lists_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_vm_unmap_ipcshm_arg_gpa_lists_buf_is_too_large);
raw_static_assert(sizeof(struct fs_service_name) <= 96,
                    hmcall_vm_mmap_arg_service_name_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_vm_mmap_arg_gpa_list_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_vm_munmap_arg_gpa_list_buf_is_too_large);
raw_static_assert(sizeof(union guard_action_args) <= 96,
                    hmcall_guard_action_arg_args_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_guard_alive_arg_pid_is_too_large);
raw_static_assert(sizeof(struct iovmgr_ops_arg) <= 96,
                    hmcall_iov_add_device_arg_arg_is_too_large);
raw_static_assert(sizeof(struct iovmgr_ops_arg) <= 96,
                    hmcall_iov_attach_device_arg_arg_is_too_large);
raw_static_assert(sizeof(struct iovmgr_ops_arg) <= 96,
                    hmcall_iov_vspace_bind_arg_arg_is_too_large);
raw_static_assert(sizeof(struct iovmgr_ops_arg) <= 96,
                    hmcall_iov_vspace_unbind_arg_arg_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_resmgr_mount_arg_path_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_resmgr_umount_arg_path_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_resmgr_create_arg_path_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_resmgr_remove_arg_path_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_resmgr_read_arg_path_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_resmgr_write_arg_path_buf_is_too_large);
raw_static_assert(sizeof(struct module_grant_arg) <= 96,
                    hmcall_module_grant_ctrl_arg_arg_is_too_large);
raw_static_assert(sizeof(struct kbox_region_name) <= 96,
                    hmcall_kbox_open_region_arg_name_is_too_large);
raw_static_assert(sizeof(struct kbox_region_name) <= 96,
                    hmcall_kbox_close_region_arg_name_is_too_large);
raw_static_assert(sizeof(struct kbox_region_name) <= 96,
                    hmcall_kbox_create_region_arg_name_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_dump_thread_arg_tid_is_too_large);
raw_static_assert(sizeof(enum dump_output_type) <= 96,
                    hmcall_dump_thread_arg_output_type_is_too_large);
raw_static_assert(sizeof(struct bunch_ipc_attr) <= 96,
                    hmcall_dump_thread_arg_attr_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_livepatch_load_arg_pid_is_too_large);
raw_static_assert(sizeof(struct livepatch_string) <= 96,
                    hmcall_livepatch_load_arg_patch_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_livepatch_unload_arg_pid_is_too_large);
raw_static_assert(sizeof(struct livepatch_string) <= 96,
                    hmcall_livepatch_unload_arg_patch_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_livepatch_enable_arg_pid_is_too_large);
raw_static_assert(sizeof(struct livepatch_string) <= 96,
                    hmcall_livepatch_enable_arg_patch_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_livepatch_disable_arg_pid_is_too_large);
raw_static_assert(sizeof(struct livepatch_string) <= 96,
                    hmcall_livepatch_disable_arg_patch_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_livepatch_list_arg_pid_is_too_large);
raw_static_assert(sizeof(struct livepatch_string) <= 96,
                    hmcall_livepatch_list_arg_patch_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_livepatch_reserved_arg_pid_is_too_large);
raw_static_assert(sizeof(struct livepatch_string) <= 96,
                    hmcall_livepatch_reserved_arg_patch_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_hmspif_ksus_user_attach_process_arg_pid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_hmspif_paju_user_cmd_arg_pid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_dynlog_query_by_tid_arg_tid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_dynlog_read_by_tid_arg_tid_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_dynlog_update_by_tid_arg_tid_is_too_large);
raw_static_assert(sizeof(struct dynlog_logspace) <= 96,
                    hmcall_dynlog_query_by_lspace_arg_lspace_is_too_large);
raw_static_assert(sizeof(struct dynlog_logspace) <= 96,
                    hmcall_dynlog_read_by_lspace_arg_lspace_is_too_large);
raw_static_assert(sizeof(struct dynlog_logspace) <= 96,
                    hmcall_dynlog_update_by_lspace_arg_lspace_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_sysfs_read_arg_actv_buf_is_too_large);
raw_static_assert(sizeof(struct hm_actv_buf) <= 96,
                    hmcall_sysfs_write_arg_actv_buf_is_too_large);
raw_static_assert(sizeof(pid_t) <= 96,
                    hmcall_hack_procfs_status_arg_pid_is_too_large);
raw_static_assert(sizeof(enum RULE_APPEND_TYPE) <= 96,
                    hmcall_audit_notify_rule_update_arg_type_is_too_large);
raw_static_assert(sizeof(enum RULE_NOTIFY_OPERATION) <= 96,
                    hmcall_audit_notify_rule_update_arg_operat_is_too_large);
struct __actvret_hmcall_test_m1 {
	int v1;
};

struct __actvret_hmcall_test_m2 {
	unsigned long long actvpool_rref_simple;
	unsigned long long actvpool_rref_full;
};

struct __actvret_hmcall_test_m3 {
};

struct __actvret_hmcall_test_m4 {
};

struct __actvret_hmcall_test_m5 {
	int v1;
};

struct __actvret_hmcall_test_m6 {
	int v1;
	struct sysif_data v2;
};

struct __actvret_hmcall_test_m7 {
};

struct __actvret_hmcall_test_m8 {
};

struct __actvret_hmcall_test_m9 {
};

struct __actvret_hmcall_test_m10 {
};

struct __actvret_hmcall_test_m11 {
};

struct __actvret_hmcall_test_m12 {
};

struct __actvret_hmcall_test_m13 {
};

struct __actvret_hmcall_test_m14 {
};

struct __actvret_hmcall_test_m15 {
	unsigned long long actvpool_rref_nobind;
};

struct __actvret_hmcall_test_m16 {
};

struct __actvret_hmcall_test_m17 {
};

struct __actvret_hmcall_test_m18 {
};

struct __actvret_hmcall_test_m19 {
	struct sysif_data data;
};

struct __actvret_hmcall_test_m20 {
};

struct __actvret_hmcall_test_m21 {
	struct sysif_data data;
};

struct __actvret_hmcall_test_m22 {
};

struct __actvret_hmcall_test_m23 {
};

struct __actvret_hmcall_test_m24 {
};

struct __actvret_hmcall_test_m25 {
};

struct __actvret_hmcall_test_m26 {
};

struct __actvret_hmcall_test_m27 {
};

struct __actvret_hmcall_test_m28 {
};

struct __actvret_hmcall_test_m29 {
};

struct __actvret_hmcall_test_m30 {
};

struct __actvret_hmcall_test_m31 {
};

struct __actvret_hmcall_test_m32 {
};

struct __actvret_hmcall_test_m33 {
};

struct __actvret_hmcall_test_m34 {
};

struct __actvret_hmcall_test_m35 {
};

struct __actvret_hmcall_path_add_path {
};

struct __actvret_hmcall_path_grant_path {
};

struct __actvret_hmcall_path_del_path {
};

struct __actvret_hmcall_path_acquire_path {
	rref_t rref;
};

struct __actvret_hmcall_path_release_path {
};

struct __actvret_hmcall_path_stat {
};

struct __actvret_hmcall_path_chmod {
};

struct __actvret_hmcall_sysctrl_shutdown {
};

struct __actvret_hmcall_sysctrl_reboot {
};

struct __actvret_hmcall_sysctrl_sysconf_ulong {
	unsigned long long val;
};

struct __actvret_hmcall_sysctrl_sysconf_string {
};

struct __actvret_hmcall_sysctrl_uname {
	struct uname name;
};

struct __actvret_hmcall_sysctrl_require {
};

struct __actvret_hmcall_sysctrl_sysinfo {
	struct sys_info info;
};

struct __actvret_hmcall_sysctrl_cpustat {
};

struct __actvret_hmcall_sysctrl_attach_cpuctx {
};

struct __actvret_hmcall_sysctrl_detach_cpuctx {
};

struct __actvret_hmcall_sysctrl_check_cpuctx {
	unsigned int is_attached;
};

struct __actvret_hmcall_sysctrl_set_hostname {
};

struct __actvret_hmcall_sysctrl_set_klogport_level {
};

struct __actvret_hmcall_sysctrl_enable_klogport {
};

struct __actvret_hmcall_sysctrl_disable_klogport {
};

struct __actvret_hmcall_sysctrl_kev_read_event_number {
	unsigned int event_number;
};

struct __actvret_hmcall_sysctrl_kev_read_event_config {
	struct __sysctrl_kev_config event_config;
};

struct __actvret_hmcall_sysctrl_kev_set_enable {
};

struct __actvret_hmcall_sysctrl_kev_set_filter {
};

struct __actvret_hmcall_sysctrl_kev_print {
};

struct __actvret_hmcall_sysctrl_kev_klog {
};

struct __actvret_hmcall_mem_mmap {
	unsigned long long rvaddr;
};

struct __actvret_hmcall_mem_munmap {
};

struct __actvret_hmcall_mem_mremap {
	unsigned long long rvaddr;
};

struct __actvret_hmcall_mem_alloc_kmem {
	unsigned long vstart;
};

struct __actvret_hmcall_mem_free_kmem {
};

struct __actvret_hmcall_mem_alloc_pmem {
	unsigned long long pmem_cref;
};

struct __actvret_hmcall_mem_free_pmem {
};

struct __actvret_hmcall_mem_brk {
	unsigned long long rvaddr;
};

struct __actvret_hmcall_mem_madvise {
};

struct __actvret_hmcall_mem_mprotect {
};

struct __actvret_hmcall_mem_msync {
};

struct __actvret_hmcall_mem_mlock {
};

struct __actvret_hmcall_mem_munlock {
};

struct __actvret_hmcall_mem_mlockall {
};

struct __actvret_hmcall_mem_munlockall {
};

struct __actvret_hmcall_mem_drop_file_cache {
	size_t nr_droped;
};

struct __actvret_hmcall_mem_ioremap_prepare {
	unsigned long long rvaddr;
	unsigned long long sysmgr_rref;
};

struct __actvret_hmcall_mem_iomem_mmap_page {
};

struct __actvret_hmcall_mem_file_mapping_stat {
	struct file_map_info_s map_info;
};

struct __actvret_hmcall_mem_shm_open {
	unsigned long long ret_len;
	int shm_id;
};

struct __actvret_hmcall_mem_shm_open_anon {
	unsigned long long ret_len;
	int shm_id;
};

struct __actvret_hmcall_mem_shm_unlink {
};

struct __actvret_hmcall_mem_shm_unlink_anon {
};

struct __actvret_hmcall_mem_shm_close {
};

struct __actvret_hmcall_mem_shm_check_owner {
};

struct __actvret_hmcall_mem_shm_reclaim_pages {
};

struct __actvret_hmcall_mem_grant_shm_to_caller {
	unsigned long long key;
};

struct __actvret_hmcall_mem_grant_shm_by_xref {
	unsigned long long key;
};

struct __actvret_hmcall_mem_ashm_grant_trans {
};

struct __actvret_hmcall_mem_query_shm_info {
	struct shm_node_info shm_info;
};

struct __actvret_hmcall_mem_query_shm_paddr {
};

struct __actvret_hmcall_mem_shm_dump_info {
};

struct __actvret_hmcall_mem_shm_chmod {
};

struct __actvret_hmcall_mem_extend_ctable {
};

struct __actvret_hmcall_mem_extend_utable {
};

struct __actvret_hmcall_mem_extend_rtable {
};

struct __actvret_hmcall_mem_stat {
};

struct __actvret_hmcall_mem_set_anon_name {
};

struct __actvret_hmcall_mem_process_vm_access {
	unsigned int total_copied;
};

struct __actvret_hmcall_mem_mincore {
};

struct __actvret_hmcall_mem_calculate {
	struct memstat_deviation div;
};

struct __actvret_hmcall_mem_rmap_unmap_page {
};

struct __actvret_hmcall_mem_fs_stat_register {
};

struct __actvret_hmcall_mem_hugetlbfs_mount {
	unsigned int order;
};

struct __actvret_hmcall_mem_register_devhost {
};

struct __actvret_hmcall_mem_iomap_prepare {
	unsigned long long rva;
};

struct __actvret_hmcall_mem_iomap_populate {
};

struct __actvret_hmcall_mem_iomap_finish {
};

struct __actvret_hmcall_mem_iomap_statpage {
	unsigned long long pa;
	unsigned int prot;
};

struct __actvret_hmcall_mem_cma_dyn_init {
	unsigned int cma_id;
};

struct __actvret_hmcall_mem_cma_alloc {
	unsigned long long paddr;
};

struct __actvret_hmcall_mem_cma_free {
};

struct __actvret_hmcall_proc_spawn {
	pid_t pid;
	unsigned int child_cnode_idx;
};

struct __actvret_hmcall_proc_waitid {
	pid_t pid;
	int wstatus;
};

struct __actvret_hmcall_proc_wait4 {
	pid_t pid;
	int wstatus;
};

struct __actvret_hmcall_proc_exit {
};

struct __actvret_hmcall_proc_getpid {
};

struct __actvret_hmcall_proc_pid_of {
};

struct __actvret_hmcall_proc_getppid {
};

struct __actvret_hmcall_proc_cnode_idx_of {
	unsigned int cnode_idx;
};

struct __actvret_hmcall_proc_getpgid {
};

struct __actvret_hmcall_proc_setpgid {
};

struct __actvret_hmcall_proc_getsid {
};

struct __actvret_hmcall_proc_setsid {
};

struct __actvret_hmcall_proc_setfgpgrp {
};

struct __actvret_hmcall_proc_getfgpgrp {
};

struct __actvret_hmcall_proc_mysid {
};

struct __actvret_hmcall_proc_signal_fgpgrp {
};

struct __actvret_hmcall_proc_setuid {
};

struct __actvret_hmcall_proc_getuid {
	uid_t uid;
};

struct __actvret_hmcall_proc_geteuid {
	uid_t euid;
};

struct __actvret_hmcall_proc_getresuid {
	uid_t ruid;
	uid_t euid;
	uid_t suid;
};

struct __actvret_hmcall_proc_setreuid {
};

struct __actvret_hmcall_proc_setresuid {
};

struct __actvret_hmcall_proc_getgid {
	gid_t gid;
};

struct __actvret_hmcall_proc_getegid {
	gid_t egid;
};

struct __actvret_hmcall_proc_getresgid {
	gid_t rgid;
	gid_t egid;
	gid_t sgid;
};

struct __actvret_hmcall_proc_setregid {
};

struct __actvret_hmcall_proc_setgid {
};

struct __actvret_hmcall_proc_setresgid {
};

struct __actvret_hmcall_proc_setgroups {
};

struct __actvret_hmcall_proc_getgroups {
};

struct __actvret_hmcall_proc_setfsuid {
};

struct __actvret_hmcall_proc_setfsgid {
};

struct __actvret_hmcall_proc_stat {
};

struct __actvret_hmcall_proc_getrlimit {
	unsigned long long rlim_cur;
	unsigned long long rlim_max;
};

struct __actvret_hmcall_proc_setrlimit {
};

struct __actvret_hmcall_proc_prlimit {
	unsigned long long rlim_cur;
	unsigned long long rlim_max;
};

struct __actvret_hmcall_proc_debug_thread {
	rref_t thread_rref;
};

struct __actvret_hmcall_proc_debug_wait_status {
};

struct __actvret_hmcall_proc_debug_vspace {
	unsigned long long data;
};

struct __actvret_hmcall_proc_get_coredump {
	union coredump_attr result;
};

struct __actvret_hmcall_proc_set_coredump {
};

struct __actvret_hmcall_proc_nsid_of_cnode_idx {
	unsigned int nsid;
};

struct __actvret_hmcall_proc_timer_create {
};

struct __actvret_hmcall_proc_timer_settime {
	unsigned long long rem_value;
	unsigned long long old_interval;
};

struct __actvret_hmcall_proc_timer_gettime {
	unsigned long long rem_value;
	unsigned long long interval;
};

struct __actvret_hmcall_proc_timer_delete {
	cref_t timer_cref;
};

struct __actvret_hmcall_proc_timer_getoverrun {
	unsigned long long count;
};

struct __actvret_hmcall_proc_get_cputime {
	unsigned long long time_value;
};

struct __actvret_hmcall_proc_getrusage {
	struct rusage_compat64 usage;
};

struct __actvret_hmcall_proc_execve {
};

struct __actvret_hmcall_proc_new_permission {
	cref_t cref;
};

struct __actvret_hmcall_proc_new_vspace_mmscd {
	cref_t cref;
};

struct __actvret_hmcall_proc_new_vspace {
	cref_t cref;
};

struct __actvret_hmcall_proc_new_vm_mmscd {
	cref_t cref;
};

struct __actvret_hmcall_proc_new_vm {
	cref_t cref;
};

struct __actvret_hmcall_proc_new_cpucontext_mmscd {
	cref_t cref;
};

struct __actvret_hmcall_proc_new_cpucontext {
	cref_t cref;
};

struct __actvret_hmcall_proc_elf_load_info {
};

struct __actvret_hmcall_proc_pm_config_add {
};

struct __actvret_hmcall_proc_pm_config_cleanup {
};

struct __actvret_hmcall_proc_pm_dormancy_enter {
};

struct __actvret_hmcall_proc_show_pte {
};

struct __actvret_hmcall_proc_check_regs {
};

struct __actvret_hmcall_proc_get_dumpable {
	unsigned int dumpable;
};

struct __actvret_hmcall_proc_set_dumpable {
};

struct __actvret_hmcall_proc_set_subreaper {
};

struct __actvret_hmcall_proc_get_subreaper {
	int is_child_subreaper;
};

struct __actvret_hmcall_proc_set_privs {
};

struct __actvret_hmcall_proc_get_privs {
	bool no_new_privs;
};

struct __actvret_hmcall_proc_clone {
	pid_t tid;
	cref_t cref;
};

struct __actvret_hmcall_proc_dyn_libs_data {
};

struct __actvret_hmcall_proc_register_event {
};

struct __actvret_hmcall_proc_affinity_get {
	struct proc_affinity_info_s proc_affinity_info;
};

struct __actvret_hmcall_mqueue_open {
};

struct __actvret_hmcall_mqueue_send {
};

struct __actvret_hmcall_mqueue_recv {
	unsigned int msg_prio;
	unsigned long long msg_len;
};

struct __actvret_hmcall_mqueue_getsetattr {
	long long mq_flags;
	long long mq_maxmsg;
	long long mq_msgsize;
	long long mq_curmsgs;
};

struct __actvret_hmcall_mqueue_close {
};

struct __actvret_hmcall_mqueue_unlink {
};

struct __actvret_hmcall_mqueue_chmod {
};

struct __actvret_hmcall_thread_exit {
};

struct __actvret_hmcall_thread_kill {
};

struct __actvret_hmcall_thread_gettid {
};

struct __actvret_hmcall_thread_tid2cref {
	cref_t tcb_cref;
};

struct __actvret_hmcall_thread_set_tid_address {
};

struct __actvret_hmcall_thread_setname {
};

struct __actvret_hmcall_thread_set_pdeath_signal {
};

struct __actvret_hmcall_thread_get_pdeath_signal {
	int signum;
};

struct __actvret_hmcall_thread_set_robust_list {
};

struct __actvret_hmcall_thread_get_robust_list {
	unsigned long long head_ptr;
	unsigned long long len;
};

struct __actvret_hmcall_thread_freeze {
};

struct __actvret_hmcall_thread_thaw {
};

struct __actvret_hmcall_thread_setpersonality {
};

struct __actvret_hmcall_thread_getpersonality {
	unsigned long long personality;
};

struct __actvret_hmcall_thread_bind_info {
	uref_t nobuf_uref;
	uref_t buf_uref;
};

struct __actvret_hmcall_thread_set_tickless {
};

struct __actvret_hmcall_thread_set_runqueue {
};

struct __actvret_hmcall_thread_sched_setparam {
};

struct __actvret_hmcall_thread_sched_getparam {
};

struct __actvret_hmcall_thread_sched_setscheduler {
};

struct __actvret_hmcall_thread_sched_getscheduler {
};

struct __actvret_hmcall_thread_getseq {
	unsigned long long seq;
};

struct __actvret_hmcall_thread_setpriority {
};

struct __actvret_hmcall_thread_getpriority {
};

struct __actvret_hmcall_thread_sched_getattr {
};

struct __actvret_hmcall_thread_sched_get_interval_rr {
};

struct __actvret_hmcall_thread_sched_setaffinity {
};

struct __actvret_hmcall_thread_sched_getaffinity {
	__cpuset_t cpuset;
};

struct __actvret_hmcall_thread_update_vnotify_futex {
};

struct __actvret_hmcall_thread_futex_wait {
};

struct __actvret_hmcall_thread_futex_wake {
};

struct __actvret_hmcall_thread_futex_requeue {
};

struct __actvret_hmcall_time_set_clock {
};

struct __actvret_hmcall_time_set_tock_policy {
};

struct __actvret_hmcall_signal_kill {
};

struct __actvret_hmcall_signal_tkill {
};

struct __actvret_hmcall_signal_tgkill {
};

struct __actvret_hmcall_signal_sigqueue {
};

struct __actvret_hmcall_signal_pthread_sigqueue {
};

struct __actvret_hmcall_signal_set_signal_handler {
};

struct __actvret_hmcall_signal_read_signalfd {
	long long nread;
};

struct __actvret_hmcall_signal_read_signalevents {
	unsigned int revents;
};

struct __actvret_hmcall_signal_epoll_ctrl {
};

struct __actvret_hmcall_signal_init {
};

struct __actvret_hmcall_signal_set_sigmask {
	unsigned long long old_mask;
};

struct __actvret_hmcall_signal_get_pending_signal {
	unsigned long long pending_signal;
};

struct __actvret_hmcall_signal_drop_pending_signal {
	struct __siginfo siginfo;
};

struct __actvret_hmcall_signal_set_sigstack {
};

struct __actvret_hmcall_signal_set_sigaction_mask {
};

struct __actvret_hmcall_signal_timedwait {
	struct __siginfo siginfo;
};

struct __actvret_hmcall_signal_restore {
};

struct __actvret_hmcall_irq_grant_ctrl {
};

struct __actvret_hmcall_irq_default_phyctrl_id {
};

struct __actvret_hmcall_irq_to_logic {
};

struct __actvret_hmcall_irq_revoke_ctrl {
};

struct __actvret_hmcall_irq_version_get {
	struct irqmgr_version version;
};

struct __actvret_hmcall_irq_version_check {
};

struct __actvret_hmcall_irq_stat {
};

struct __actvret_hmcall_irq_suspend {
};

struct __actvret_hmcall_irq_resume {
};

struct __actvret_hmcall_sec_cred_cfg {
	unsigned int proc_num;
	unsigned int mask;
};

struct __actvret_hmcall_sec_setexeccon {
};

struct __actvret_hmcall_sec_shconf_set_field {
};

struct __actvret_hmcall_sec_crlread {
	unsigned int nread;
};

struct __actvret_hmcall_sec_crlwrite {
};

struct __actvret_hmcall_sec_umask {
};

struct __actvret_hmcall_procfs_simple_read {
	struct procfs_simple_data result;
};

struct __actvret_hmcall_procfs_simple_pid_read {
	struct procfs_simple_data result;
};

struct __actvret_hmcall_procfs_simple_tid_read {
	struct procfs_simple_data result;
};

struct __actvret_hmcall_procfs_pid_read {
};

struct __actvret_hmcall_procfs_tid_read {
};

struct __actvret_hmcall_procfs_read {
};

struct __actvret_hmcall_procfs_pid_write {
};

struct __actvret_hmcall_procfs_tid_write {
};

struct __actvret_hmcall_procfs_write {
};

struct __actvret_hmcall_procfs_yama_write {
};

struct __actvret_hmcall_procfs_get_allpids {
};

struct __actvret_hmcall_procfs_get_alltids {
};

struct __actvret_hmcall_procfs_get_irq_names {
};

struct __actvret_hmcall_procfs_simple_irq_read {
};

struct __actvret_hmcall_procfs_irq_read {
};

struct __actvret_hmcall_procfs_irq_write {
};

struct __actvret_hmcall_vm_get_region_num {
	unsigned int region_num;
};

struct __actvret_hmcall_vm_map_iomem {
};

struct __actvret_hmcall_vm_map_to_process {
};

struct __actvret_hmcall_vm_map_shmmem {
	struct shm_region_array shm_regions;
};

struct __actvret_hmcall_vm_populate_map {
};

struct __actvret_hmcall_vm_create_vm_vspace {
};

struct __actvret_hmcall_vm_destroy_vm_vspace {
};

struct __actvret_hmcall_vm_map_ipcshm {
};

struct __actvret_hmcall_vm_unmap_ipcshm {
};

struct __actvret_hmcall_vm_mmap {
};

struct __actvret_hmcall_vm_munmap {
};

struct __actvret_hmcall_vm_mmap_vdso {
};

struct __actvret_hmcall_vm_gpa_to_hpa {
	uintptr_t hpa;
};

struct __actvret_hmcall_vm_madvise {
};

struct __actvret_hmcall_vm_mclone {
};

struct __actvret_hmcall_ns_unshare {
};

struct __actvret_hmcall_ns_setns {
};

struct __actvret_hmcall_ns_get {
};

struct __actvret_hmcall_ns_put {
};

struct __actvret_hmcall_guard_action {
	union guard_stat stat;
};

struct __actvret_hmcall_guard_sysrq {
};

struct __actvret_hmcall_guard_alive {
};

struct __actvret_hmcall_iov_add_device {
};

struct __actvret_hmcall_iov_attach_device {
};

struct __actvret_hmcall_iov_vspace_bind {
};

struct __actvret_hmcall_iov_vspace_unbind {
};

struct __actvret_hmcall_resmgr_mount {
};

struct __actvret_hmcall_resmgr_umount {
};

struct __actvret_hmcall_resmgr_create {
};

struct __actvret_hmcall_resmgr_remove {
};

struct __actvret_hmcall_resmgr_read {
};

struct __actvret_hmcall_resmgr_write {
};

struct __actvret_hmcall_resmgr_mem_mapping {
	uintptr_t vaddr;
};

struct __actvret_hmcall_resmgr_mem_fs_charge {
	unsigned int nr_charged;
};

struct __actvret_hmcall_resmgr_mem_fs_uncharge {
};

struct __actvret_hmcall_module_grant_ctrl {
};

struct __actvret_hmcall_entropy_read {
	struct sysmgr_entropy_data data;
};

struct __actvret_hmcall_kbox_query_device {
	unsigned long long total_size;
	unsigned long long free_size;
	unsigned long long region_count;
};

struct __actvret_hmcall_kbox_query_region {
	struct kbox_region_name name;
	unsigned long long total_size;
	unsigned long long contained_data_size;
	bool dynamic;
};

struct __actvret_hmcall_kbox_open_region {
	unsigned long long vaddr;
	unsigned long long size;
};

struct __actvret_hmcall_kbox_close_region {
};

struct __actvret_hmcall_kbox_create_region {
};

struct __actvret_hmcall_kbox_delete_dynamic_regions {
};

struct __actvret_hmcall_dump_thread {
};

struct __actvret_hmcall_linuxemu_install_handler {
};

struct __actvret_hmcall_linuxemu_set_callsite {
};

struct __actvret_hmcall_livepatch_register_target {
};

struct __actvret_hmcall_livepatch_unregister_target {
};

struct __actvret_hmcall_livepatch_load {
};

struct __actvret_hmcall_livepatch_unload {
};

struct __actvret_hmcall_livepatch_enable {
};

struct __actvret_hmcall_livepatch_disable {
};

struct __actvret_hmcall_livepatch_list {
};

struct __actvret_hmcall_livepatch_reserved {
};

struct __actvret_hmcall_perf_create_session {
};

struct __actvret_hmcall_perf_config_event {
};

struct __actvret_hmcall_perf_start_session {
};

struct __actvret_hmcall_perf_stop_session {
};

struct __actvret_hmcall_perf_release_session {
};

struct __actvret_hmcall_perf_read_data {
	struct perf_read_data_ret_s data_ret;
};

struct __actvret_hmcall_hmspif_ksus_user_start_session {
};

struct __actvret_hmcall_hmspif_ksus_user_create_region {
	const void *rvaddr;
};

struct __actvret_hmcall_hmspif_ksus_user_attach_process {
};

struct __actvret_hmcall_hmspif_ksus_user_finish_session {
};

struct __actvret_hmcall_hmspif_paju_user_cmd {
};

struct __actvret_hmcall_dynlog_query_by_tid {
};

struct __actvret_hmcall_dynlog_read_by_tid {
};

struct __actvret_hmcall_dynlog_update_by_tid {
};

struct __actvret_hmcall_dynlog_query_by_lspace {
};

struct __actvret_hmcall_dynlog_read_by_lspace {
};

struct __actvret_hmcall_dynlog_update_by_lspace {
};

struct __actvret_hmcall_sysfs_read {
};

struct __actvret_hmcall_sysfs_write {
};

struct __actvret_hmcall_ftrace_modify_code {
};

struct __actvret_hmcall_hmtrace_alloc_eid {
	int eid;
};

struct __actvret_hmcall_hmtrace_free_eid {
};

struct __actvret_hmcall_inject_fault {
};

struct __actvret_hmcall_proc_capget {
	unsigned long long effective;
	unsigned long long permitted;
	unsigned long long inheritable;
	unsigned long long bset;
	unsigned long long amb;
	unsigned int sbits;
};

struct __actvret_hmcall_proc_capset {
};

struct __actvret_hmcall_proc_cap_bset_drop {
};

struct __actvret_hmcall_proc_cap_ambient_clear {
};

struct __actvret_hmcall_proc_cap_ambient_add {
};

struct __actvret_hmcall_proc_cap_ambient_cut {
};

struct __actvret_hmcall_proc_cap_sbits {
};

struct __actvret_hmcall_proc_cap_keep {
};

struct __actvret_hmcall_ipc_shmget {
	int shmid;
};

struct __actvret_hmcall_ipc_shmat {
	unsigned long long rvaddr;
};

struct __actvret_hmcall_ipc_shmdt {
};

struct __actvret_hmcall_ipc_shmctl {
};

struct __actvret_hmcall_ipc_shmctl_get {
};

struct __actvret_hmcall_ipc_msgget {
	int msqid;
};

struct __actvret_hmcall_ipc_msgsnd {
};

struct __actvret_hmcall_ipc_msgrcv {
	unsigned int msg_len;
	long long mtype;
};

struct __actvret_hmcall_ipc_msgctl {
};

struct __actvret_hmcall_ipc_semget {
	int semid;
};

struct __actvret_hmcall_ipc_semop {
};

struct __actvret_hmcall_ipc_semctl {
};

struct __actvret_hmcall_hack_procfs_status {
};

struct __actvret_hmcall_audit_notify_rule_update {
};

struct __actvret_hmcall_key_install_keyring {
};

struct __actvret_hmcall_key_lookup_keyring {
	void *key_addr;
};

struct __actvret_hmcall_cert_verify_path_and_chksum {
};

union __actvret_hmcall {
	struct __actvret_hmcall_test_m1 test_m1;
	struct __actvret_hmcall_test_m2 test_m2;
	struct __actvret_hmcall_test_m3 test_m3;
	struct __actvret_hmcall_test_m4 test_m4;
	struct __actvret_hmcall_test_m5 test_m5;
	struct __actvret_hmcall_test_m6 test_m6;
	struct __actvret_hmcall_test_m7 test_m7;
	struct __actvret_hmcall_test_m8 test_m8;
	struct __actvret_hmcall_test_m9 test_m9;
	struct __actvret_hmcall_test_m10 test_m10;
	struct __actvret_hmcall_test_m11 test_m11;
	struct __actvret_hmcall_test_m12 test_m12;
	struct __actvret_hmcall_test_m13 test_m13;
	struct __actvret_hmcall_test_m14 test_m14;
	struct __actvret_hmcall_test_m15 test_m15;
	struct __actvret_hmcall_test_m16 test_m16;
	struct __actvret_hmcall_test_m17 test_m17;
	struct __actvret_hmcall_test_m18 test_m18;
	struct __actvret_hmcall_test_m19 test_m19;
	struct __actvret_hmcall_test_m20 test_m20;
	struct __actvret_hmcall_test_m21 test_m21;
	struct __actvret_hmcall_test_m22 test_m22;
	struct __actvret_hmcall_test_m23 test_m23;
	struct __actvret_hmcall_test_m24 test_m24;
	struct __actvret_hmcall_test_m25 test_m25;
	struct __actvret_hmcall_test_m26 test_m26;
	struct __actvret_hmcall_test_m27 test_m27;
	struct __actvret_hmcall_test_m28 test_m28;
	struct __actvret_hmcall_test_m29 test_m29;
	struct __actvret_hmcall_test_m30 test_m30;
	struct __actvret_hmcall_test_m31 test_m31;
	struct __actvret_hmcall_test_m32 test_m32;
	struct __actvret_hmcall_test_m33 test_m33;
	struct __actvret_hmcall_test_m34 test_m34;
	struct __actvret_hmcall_test_m35 test_m35;
	struct __actvret_hmcall_path_add_path path_add_path;
	struct __actvret_hmcall_path_grant_path path_grant_path;
	struct __actvret_hmcall_path_del_path path_del_path;
	struct __actvret_hmcall_path_acquire_path path_acquire_path;
	struct __actvret_hmcall_path_release_path path_release_path;
	struct __actvret_hmcall_path_stat path_stat;
	struct __actvret_hmcall_path_chmod path_chmod;
	struct __actvret_hmcall_sysctrl_shutdown sysctrl_shutdown;
	struct __actvret_hmcall_sysctrl_reboot sysctrl_reboot;
	struct __actvret_hmcall_sysctrl_sysconf_ulong sysctrl_sysconf_ulong;
	struct __actvret_hmcall_sysctrl_sysconf_string sysctrl_sysconf_string;
	struct __actvret_hmcall_sysctrl_uname sysctrl_uname;
	struct __actvret_hmcall_sysctrl_require sysctrl_require;
	struct __actvret_hmcall_sysctrl_sysinfo sysctrl_sysinfo;
	struct __actvret_hmcall_sysctrl_cpustat sysctrl_cpustat;
	struct __actvret_hmcall_sysctrl_attach_cpuctx sysctrl_attach_cpuctx;
	struct __actvret_hmcall_sysctrl_detach_cpuctx sysctrl_detach_cpuctx;
	struct __actvret_hmcall_sysctrl_check_cpuctx sysctrl_check_cpuctx;
	struct __actvret_hmcall_sysctrl_set_hostname sysctrl_set_hostname;
	struct __actvret_hmcall_sysctrl_set_klogport_level sysctrl_set_klogport_level;
	struct __actvret_hmcall_sysctrl_enable_klogport sysctrl_enable_klogport;
	struct __actvret_hmcall_sysctrl_disable_klogport sysctrl_disable_klogport;
	struct __actvret_hmcall_sysctrl_kev_read_event_number sysctrl_kev_read_event_number;
	struct __actvret_hmcall_sysctrl_kev_read_event_config sysctrl_kev_read_event_config;
	struct __actvret_hmcall_sysctrl_kev_set_enable sysctrl_kev_set_enable;
	struct __actvret_hmcall_sysctrl_kev_set_filter sysctrl_kev_set_filter;
	struct __actvret_hmcall_sysctrl_kev_print sysctrl_kev_print;
	struct __actvret_hmcall_sysctrl_kev_klog sysctrl_kev_klog;
	struct __actvret_hmcall_mem_mmap mem_mmap;
	struct __actvret_hmcall_mem_munmap mem_munmap;
	struct __actvret_hmcall_mem_mremap mem_mremap;
	struct __actvret_hmcall_mem_alloc_kmem mem_alloc_kmem;
	struct __actvret_hmcall_mem_free_kmem mem_free_kmem;
	struct __actvret_hmcall_mem_alloc_pmem mem_alloc_pmem;
	struct __actvret_hmcall_mem_free_pmem mem_free_pmem;
	struct __actvret_hmcall_mem_brk mem_brk;
	struct __actvret_hmcall_mem_madvise mem_madvise;
	struct __actvret_hmcall_mem_mprotect mem_mprotect;
	struct __actvret_hmcall_mem_msync mem_msync;
	struct __actvret_hmcall_mem_mlock mem_mlock;
	struct __actvret_hmcall_mem_munlock mem_munlock;
	struct __actvret_hmcall_mem_mlockall mem_mlockall;
	struct __actvret_hmcall_mem_munlockall mem_munlockall;
	struct __actvret_hmcall_mem_drop_file_cache mem_drop_file_cache;
	struct __actvret_hmcall_mem_ioremap_prepare mem_ioremap_prepare;
	struct __actvret_hmcall_mem_iomem_mmap_page mem_iomem_mmap_page;
	struct __actvret_hmcall_mem_file_mapping_stat mem_file_mapping_stat;
	struct __actvret_hmcall_mem_shm_open mem_shm_open;
	struct __actvret_hmcall_mem_shm_open_anon mem_shm_open_anon;
	struct __actvret_hmcall_mem_shm_unlink mem_shm_unlink;
	struct __actvret_hmcall_mem_shm_unlink_anon mem_shm_unlink_anon;
	struct __actvret_hmcall_mem_shm_close mem_shm_close;
	struct __actvret_hmcall_mem_shm_check_owner mem_shm_check_owner;
	struct __actvret_hmcall_mem_shm_reclaim_pages mem_shm_reclaim_pages;
	struct __actvret_hmcall_mem_grant_shm_to_caller mem_grant_shm_to_caller;
	struct __actvret_hmcall_mem_grant_shm_by_xref mem_grant_shm_by_xref;
	struct __actvret_hmcall_mem_ashm_grant_trans mem_ashm_grant_trans;
	struct __actvret_hmcall_mem_query_shm_info mem_query_shm_info;
	struct __actvret_hmcall_mem_query_shm_paddr mem_query_shm_paddr;
	struct __actvret_hmcall_mem_shm_dump_info mem_shm_dump_info;
	struct __actvret_hmcall_mem_shm_chmod mem_shm_chmod;
	struct __actvret_hmcall_mem_extend_ctable mem_extend_ctable;
	struct __actvret_hmcall_mem_extend_utable mem_extend_utable;
	struct __actvret_hmcall_mem_extend_rtable mem_extend_rtable;
	struct __actvret_hmcall_mem_stat mem_stat;
	struct __actvret_hmcall_mem_set_anon_name mem_set_anon_name;
	struct __actvret_hmcall_mem_process_vm_access mem_process_vm_access;
	struct __actvret_hmcall_mem_mincore mem_mincore;
	struct __actvret_hmcall_mem_calculate mem_calculate;
	struct __actvret_hmcall_mem_rmap_unmap_page mem_rmap_unmap_page;
	struct __actvret_hmcall_mem_fs_stat_register mem_fs_stat_register;
	struct __actvret_hmcall_mem_hugetlbfs_mount mem_hugetlbfs_mount;
	struct __actvret_hmcall_mem_register_devhost mem_register_devhost;
	struct __actvret_hmcall_mem_iomap_prepare mem_iomap_prepare;
	struct __actvret_hmcall_mem_iomap_populate mem_iomap_populate;
	struct __actvret_hmcall_mem_iomap_finish mem_iomap_finish;
	struct __actvret_hmcall_mem_iomap_statpage mem_iomap_statpage;
	struct __actvret_hmcall_mem_cma_dyn_init mem_cma_dyn_init;
	struct __actvret_hmcall_mem_cma_alloc mem_cma_alloc;
	struct __actvret_hmcall_mem_cma_free mem_cma_free;
	struct __actvret_hmcall_proc_spawn proc_spawn;
	struct __actvret_hmcall_proc_waitid proc_waitid;
	struct __actvret_hmcall_proc_wait4 proc_wait4;
	struct __actvret_hmcall_proc_exit proc_exit;
	struct __actvret_hmcall_proc_getpid proc_getpid;
	struct __actvret_hmcall_proc_pid_of proc_pid_of;
	struct __actvret_hmcall_proc_getppid proc_getppid;
	struct __actvret_hmcall_proc_cnode_idx_of proc_cnode_idx_of;
	struct __actvret_hmcall_proc_getpgid proc_getpgid;
	struct __actvret_hmcall_proc_setpgid proc_setpgid;
	struct __actvret_hmcall_proc_getsid proc_getsid;
	struct __actvret_hmcall_proc_setsid proc_setsid;
	struct __actvret_hmcall_proc_setfgpgrp proc_setfgpgrp;
	struct __actvret_hmcall_proc_getfgpgrp proc_getfgpgrp;
	struct __actvret_hmcall_proc_mysid proc_mysid;
	struct __actvret_hmcall_proc_signal_fgpgrp proc_signal_fgpgrp;
	struct __actvret_hmcall_proc_setuid proc_setuid;
	struct __actvret_hmcall_proc_getuid proc_getuid;
	struct __actvret_hmcall_proc_geteuid proc_geteuid;
	struct __actvret_hmcall_proc_getresuid proc_getresuid;
	struct __actvret_hmcall_proc_setreuid proc_setreuid;
	struct __actvret_hmcall_proc_setresuid proc_setresuid;
	struct __actvret_hmcall_proc_getgid proc_getgid;
	struct __actvret_hmcall_proc_getegid proc_getegid;
	struct __actvret_hmcall_proc_getresgid proc_getresgid;
	struct __actvret_hmcall_proc_setregid proc_setregid;
	struct __actvret_hmcall_proc_setgid proc_setgid;
	struct __actvret_hmcall_proc_setresgid proc_setresgid;
	struct __actvret_hmcall_proc_setgroups proc_setgroups;
	struct __actvret_hmcall_proc_getgroups proc_getgroups;
	struct __actvret_hmcall_proc_setfsuid proc_setfsuid;
	struct __actvret_hmcall_proc_setfsgid proc_setfsgid;
	struct __actvret_hmcall_proc_stat proc_stat;
	struct __actvret_hmcall_proc_getrlimit proc_getrlimit;
	struct __actvret_hmcall_proc_setrlimit proc_setrlimit;
	struct __actvret_hmcall_proc_prlimit proc_prlimit;
	struct __actvret_hmcall_proc_debug_thread proc_debug_thread;
	struct __actvret_hmcall_proc_debug_wait_status proc_debug_wait_status;
	struct __actvret_hmcall_proc_debug_vspace proc_debug_vspace;
	struct __actvret_hmcall_proc_get_coredump proc_get_coredump;
	struct __actvret_hmcall_proc_set_coredump proc_set_coredump;
	struct __actvret_hmcall_proc_nsid_of_cnode_idx proc_nsid_of_cnode_idx;
	struct __actvret_hmcall_proc_timer_create proc_timer_create;
	struct __actvret_hmcall_proc_timer_settime proc_timer_settime;
	struct __actvret_hmcall_proc_timer_gettime proc_timer_gettime;
	struct __actvret_hmcall_proc_timer_delete proc_timer_delete;
	struct __actvret_hmcall_proc_timer_getoverrun proc_timer_getoverrun;
	struct __actvret_hmcall_proc_get_cputime proc_get_cputime;
	struct __actvret_hmcall_proc_getrusage proc_getrusage;
	struct __actvret_hmcall_proc_execve proc_execve;
	struct __actvret_hmcall_proc_new_permission proc_new_permission;
	struct __actvret_hmcall_proc_new_vspace_mmscd proc_new_vspace_mmscd;
	struct __actvret_hmcall_proc_new_vspace proc_new_vspace;
	struct __actvret_hmcall_proc_new_vm_mmscd proc_new_vm_mmscd;
	struct __actvret_hmcall_proc_new_vm proc_new_vm;
	struct __actvret_hmcall_proc_new_cpucontext_mmscd proc_new_cpucontext_mmscd;
	struct __actvret_hmcall_proc_new_cpucontext proc_new_cpucontext;
	struct __actvret_hmcall_proc_elf_load_info proc_elf_load_info;
	struct __actvret_hmcall_proc_pm_config_add proc_pm_config_add;
	struct __actvret_hmcall_proc_pm_config_cleanup proc_pm_config_cleanup;
	struct __actvret_hmcall_proc_pm_dormancy_enter proc_pm_dormancy_enter;
	struct __actvret_hmcall_proc_show_pte proc_show_pte;
	struct __actvret_hmcall_proc_check_regs proc_check_regs;
	struct __actvret_hmcall_proc_get_dumpable proc_get_dumpable;
	struct __actvret_hmcall_proc_set_dumpable proc_set_dumpable;
	struct __actvret_hmcall_proc_set_subreaper proc_set_subreaper;
	struct __actvret_hmcall_proc_get_subreaper proc_get_subreaper;
	struct __actvret_hmcall_proc_set_privs proc_set_privs;
	struct __actvret_hmcall_proc_get_privs proc_get_privs;
	struct __actvret_hmcall_proc_clone proc_clone;
	struct __actvret_hmcall_proc_dyn_libs_data proc_dyn_libs_data;
	struct __actvret_hmcall_proc_register_event proc_register_event;
	struct __actvret_hmcall_proc_affinity_get proc_affinity_get;
	struct __actvret_hmcall_mqueue_open mqueue_open;
	struct __actvret_hmcall_mqueue_send mqueue_send;
	struct __actvret_hmcall_mqueue_recv mqueue_recv;
	struct __actvret_hmcall_mqueue_getsetattr mqueue_getsetattr;
	struct __actvret_hmcall_mqueue_close mqueue_close;
	struct __actvret_hmcall_mqueue_unlink mqueue_unlink;
	struct __actvret_hmcall_mqueue_chmod mqueue_chmod;
	struct __actvret_hmcall_thread_exit thread_exit;
	struct __actvret_hmcall_thread_kill thread_kill;
	struct __actvret_hmcall_thread_gettid thread_gettid;
	struct __actvret_hmcall_thread_tid2cref thread_tid2cref;
	struct __actvret_hmcall_thread_set_tid_address thread_set_tid_address;
	struct __actvret_hmcall_thread_setname thread_setname;
	struct __actvret_hmcall_thread_set_pdeath_signal thread_set_pdeath_signal;
	struct __actvret_hmcall_thread_get_pdeath_signal thread_get_pdeath_signal;
	struct __actvret_hmcall_thread_set_robust_list thread_set_robust_list;
	struct __actvret_hmcall_thread_get_robust_list thread_get_robust_list;
	struct __actvret_hmcall_thread_freeze thread_freeze;
	struct __actvret_hmcall_thread_thaw thread_thaw;
	struct __actvret_hmcall_thread_setpersonality thread_setpersonality;
	struct __actvret_hmcall_thread_getpersonality thread_getpersonality;
	struct __actvret_hmcall_thread_bind_info thread_bind_info;
	struct __actvret_hmcall_thread_set_tickless thread_set_tickless;
	struct __actvret_hmcall_thread_set_runqueue thread_set_runqueue;
	struct __actvret_hmcall_thread_sched_setparam thread_sched_setparam;
	struct __actvret_hmcall_thread_sched_getparam thread_sched_getparam;
	struct __actvret_hmcall_thread_sched_setscheduler thread_sched_setscheduler;
	struct __actvret_hmcall_thread_sched_getscheduler thread_sched_getscheduler;
	struct __actvret_hmcall_thread_getseq thread_getseq;
	struct __actvret_hmcall_thread_setpriority thread_setpriority;
	struct __actvret_hmcall_thread_getpriority thread_getpriority;
	struct __actvret_hmcall_thread_sched_getattr thread_sched_getattr;
	struct __actvret_hmcall_thread_sched_get_interval_rr thread_sched_get_interval_rr;
	struct __actvret_hmcall_thread_sched_setaffinity thread_sched_setaffinity;
	struct __actvret_hmcall_thread_sched_getaffinity thread_sched_getaffinity;
	struct __actvret_hmcall_thread_update_vnotify_futex thread_update_vnotify_futex;
	struct __actvret_hmcall_thread_futex_wait thread_futex_wait;
	struct __actvret_hmcall_thread_futex_wake thread_futex_wake;
	struct __actvret_hmcall_thread_futex_requeue thread_futex_requeue;
	struct __actvret_hmcall_time_set_clock time_set_clock;
	struct __actvret_hmcall_time_set_tock_policy time_set_tock_policy;
	struct __actvret_hmcall_signal_kill signal_kill;
	struct __actvret_hmcall_signal_tkill signal_tkill;
	struct __actvret_hmcall_signal_tgkill signal_tgkill;
	struct __actvret_hmcall_signal_sigqueue signal_sigqueue;
	struct __actvret_hmcall_signal_pthread_sigqueue signal_pthread_sigqueue;
	struct __actvret_hmcall_signal_set_signal_handler signal_set_signal_handler;
	struct __actvret_hmcall_signal_read_signalfd signal_read_signalfd;
	struct __actvret_hmcall_signal_read_signalevents signal_read_signalevents;
	struct __actvret_hmcall_signal_epoll_ctrl signal_epoll_ctrl;
	struct __actvret_hmcall_signal_init signal_init;
	struct __actvret_hmcall_signal_set_sigmask signal_set_sigmask;
	struct __actvret_hmcall_signal_get_pending_signal signal_get_pending_signal;
	struct __actvret_hmcall_signal_drop_pending_signal signal_drop_pending_signal;
	struct __actvret_hmcall_signal_set_sigstack signal_set_sigstack;
	struct __actvret_hmcall_signal_set_sigaction_mask signal_set_sigaction_mask;
	struct __actvret_hmcall_signal_timedwait signal_timedwait;
	struct __actvret_hmcall_signal_restore signal_restore;
	struct __actvret_hmcall_irq_grant_ctrl irq_grant_ctrl;
	struct __actvret_hmcall_irq_default_phyctrl_id irq_default_phyctrl_id;
	struct __actvret_hmcall_irq_to_logic irq_to_logic;
	struct __actvret_hmcall_irq_revoke_ctrl irq_revoke_ctrl;
	struct __actvret_hmcall_irq_version_get irq_version_get;
	struct __actvret_hmcall_irq_version_check irq_version_check;
	struct __actvret_hmcall_irq_stat irq_stat;
	struct __actvret_hmcall_irq_suspend irq_suspend;
	struct __actvret_hmcall_irq_resume irq_resume;
	struct __actvret_hmcall_sec_cred_cfg sec_cred_cfg;
	struct __actvret_hmcall_sec_setexeccon sec_setexeccon;
	struct __actvret_hmcall_sec_shconf_set_field sec_shconf_set_field;
	struct __actvret_hmcall_sec_crlread sec_crlread;
	struct __actvret_hmcall_sec_crlwrite sec_crlwrite;
	struct __actvret_hmcall_sec_umask sec_umask;
	struct __actvret_hmcall_procfs_simple_read procfs_simple_read;
	struct __actvret_hmcall_procfs_simple_pid_read procfs_simple_pid_read;
	struct __actvret_hmcall_procfs_simple_tid_read procfs_simple_tid_read;
	struct __actvret_hmcall_procfs_pid_read procfs_pid_read;
	struct __actvret_hmcall_procfs_tid_read procfs_tid_read;
	struct __actvret_hmcall_procfs_read procfs_read;
	struct __actvret_hmcall_procfs_pid_write procfs_pid_write;
	struct __actvret_hmcall_procfs_tid_write procfs_tid_write;
	struct __actvret_hmcall_procfs_write procfs_write;
	struct __actvret_hmcall_procfs_yama_write procfs_yama_write;
	struct __actvret_hmcall_procfs_get_allpids procfs_get_allpids;
	struct __actvret_hmcall_procfs_get_alltids procfs_get_alltids;
	struct __actvret_hmcall_procfs_get_irq_names procfs_get_irq_names;
	struct __actvret_hmcall_procfs_simple_irq_read procfs_simple_irq_read;
	struct __actvret_hmcall_procfs_irq_read procfs_irq_read;
	struct __actvret_hmcall_procfs_irq_write procfs_irq_write;
	struct __actvret_hmcall_vm_get_region_num vm_get_region_num;
	struct __actvret_hmcall_vm_map_iomem vm_map_iomem;
	struct __actvret_hmcall_vm_map_to_process vm_map_to_process;
	struct __actvret_hmcall_vm_map_shmmem vm_map_shmmem;
	struct __actvret_hmcall_vm_populate_map vm_populate_map;
	struct __actvret_hmcall_vm_create_vm_vspace vm_create_vm_vspace;
	struct __actvret_hmcall_vm_destroy_vm_vspace vm_destroy_vm_vspace;
	struct __actvret_hmcall_vm_map_ipcshm vm_map_ipcshm;
	struct __actvret_hmcall_vm_unmap_ipcshm vm_unmap_ipcshm;
	struct __actvret_hmcall_vm_mmap vm_mmap;
	struct __actvret_hmcall_vm_munmap vm_munmap;
	struct __actvret_hmcall_vm_mmap_vdso vm_mmap_vdso;
	struct __actvret_hmcall_vm_gpa_to_hpa vm_gpa_to_hpa;
	struct __actvret_hmcall_vm_madvise vm_madvise;
	struct __actvret_hmcall_vm_mclone vm_mclone;
	struct __actvret_hmcall_ns_unshare ns_unshare;
	struct __actvret_hmcall_ns_setns ns_setns;
	struct __actvret_hmcall_ns_get ns_get;
	struct __actvret_hmcall_ns_put ns_put;
	struct __actvret_hmcall_guard_action guard_action;
	struct __actvret_hmcall_guard_sysrq guard_sysrq;
	struct __actvret_hmcall_guard_alive guard_alive;
	struct __actvret_hmcall_iov_add_device iov_add_device;
	struct __actvret_hmcall_iov_attach_device iov_attach_device;
	struct __actvret_hmcall_iov_vspace_bind iov_vspace_bind;
	struct __actvret_hmcall_iov_vspace_unbind iov_vspace_unbind;
	struct __actvret_hmcall_resmgr_mount resmgr_mount;
	struct __actvret_hmcall_resmgr_umount resmgr_umount;
	struct __actvret_hmcall_resmgr_create resmgr_create;
	struct __actvret_hmcall_resmgr_remove resmgr_remove;
	struct __actvret_hmcall_resmgr_read resmgr_read;
	struct __actvret_hmcall_resmgr_write resmgr_write;
	struct __actvret_hmcall_resmgr_mem_mapping resmgr_mem_mapping;
	struct __actvret_hmcall_resmgr_mem_fs_charge resmgr_mem_fs_charge;
	struct __actvret_hmcall_resmgr_mem_fs_uncharge resmgr_mem_fs_uncharge;
	struct __actvret_hmcall_module_grant_ctrl module_grant_ctrl;
	struct __actvret_hmcall_entropy_read entropy_read;
	struct __actvret_hmcall_kbox_query_device kbox_query_device;
	struct __actvret_hmcall_kbox_query_region kbox_query_region;
	struct __actvret_hmcall_kbox_open_region kbox_open_region;
	struct __actvret_hmcall_kbox_close_region kbox_close_region;
	struct __actvret_hmcall_kbox_create_region kbox_create_region;
	struct __actvret_hmcall_kbox_delete_dynamic_regions kbox_delete_dynamic_regions;
	struct __actvret_hmcall_dump_thread dump_thread;
	struct __actvret_hmcall_linuxemu_install_handler linuxemu_install_handler;
	struct __actvret_hmcall_linuxemu_set_callsite linuxemu_set_callsite;
	struct __actvret_hmcall_livepatch_register_target livepatch_register_target;
	struct __actvret_hmcall_livepatch_unregister_target livepatch_unregister_target;
	struct __actvret_hmcall_livepatch_load livepatch_load;
	struct __actvret_hmcall_livepatch_unload livepatch_unload;
	struct __actvret_hmcall_livepatch_enable livepatch_enable;
	struct __actvret_hmcall_livepatch_disable livepatch_disable;
	struct __actvret_hmcall_livepatch_list livepatch_list;
	struct __actvret_hmcall_livepatch_reserved livepatch_reserved;
	struct __actvret_hmcall_perf_create_session perf_create_session;
	struct __actvret_hmcall_perf_config_event perf_config_event;
	struct __actvret_hmcall_perf_start_session perf_start_session;
	struct __actvret_hmcall_perf_stop_session perf_stop_session;
	struct __actvret_hmcall_perf_release_session perf_release_session;
	struct __actvret_hmcall_perf_read_data perf_read_data;
	struct __actvret_hmcall_hmspif_ksus_user_start_session hmspif_ksus_user_start_session;
	struct __actvret_hmcall_hmspif_ksus_user_create_region hmspif_ksus_user_create_region;
	struct __actvret_hmcall_hmspif_ksus_user_attach_process hmspif_ksus_user_attach_process;
	struct __actvret_hmcall_hmspif_ksus_user_finish_session hmspif_ksus_user_finish_session;
	struct __actvret_hmcall_hmspif_paju_user_cmd hmspif_paju_user_cmd;
	struct __actvret_hmcall_dynlog_query_by_tid dynlog_query_by_tid;
	struct __actvret_hmcall_dynlog_read_by_tid dynlog_read_by_tid;
	struct __actvret_hmcall_dynlog_update_by_tid dynlog_update_by_tid;
	struct __actvret_hmcall_dynlog_query_by_lspace dynlog_query_by_lspace;
	struct __actvret_hmcall_dynlog_read_by_lspace dynlog_read_by_lspace;
	struct __actvret_hmcall_dynlog_update_by_lspace dynlog_update_by_lspace;
	struct __actvret_hmcall_sysfs_read sysfs_read;
	struct __actvret_hmcall_sysfs_write sysfs_write;
	struct __actvret_hmcall_ftrace_modify_code ftrace_modify_code;
	struct __actvret_hmcall_hmtrace_alloc_eid hmtrace_alloc_eid;
	struct __actvret_hmcall_hmtrace_free_eid hmtrace_free_eid;
	struct __actvret_hmcall_inject_fault inject_fault;
	struct __actvret_hmcall_proc_capget proc_capget;
	struct __actvret_hmcall_proc_capset proc_capset;
	struct __actvret_hmcall_proc_cap_bset_drop proc_cap_bset_drop;
	struct __actvret_hmcall_proc_cap_ambient_clear proc_cap_ambient_clear;
	struct __actvret_hmcall_proc_cap_ambient_add proc_cap_ambient_add;
	struct __actvret_hmcall_proc_cap_ambient_cut proc_cap_ambient_cut;
	struct __actvret_hmcall_proc_cap_sbits proc_cap_sbits;
	struct __actvret_hmcall_proc_cap_keep proc_cap_keep;
	struct __actvret_hmcall_ipc_shmget ipc_shmget;
	struct __actvret_hmcall_ipc_shmat ipc_shmat;
	struct __actvret_hmcall_ipc_shmdt ipc_shmdt;
	struct __actvret_hmcall_ipc_shmctl ipc_shmctl;
	struct __actvret_hmcall_ipc_shmctl_get ipc_shmctl_get;
	struct __actvret_hmcall_ipc_msgget ipc_msgget;
	struct __actvret_hmcall_ipc_msgsnd ipc_msgsnd;
	struct __actvret_hmcall_ipc_msgrcv ipc_msgrcv;
	struct __actvret_hmcall_ipc_msgctl ipc_msgctl;
	struct __actvret_hmcall_ipc_semget ipc_semget;
	struct __actvret_hmcall_ipc_semop ipc_semop;
	struct __actvret_hmcall_ipc_semctl ipc_semctl;
	struct __actvret_hmcall_hack_procfs_status hack_procfs_status;
	struct __actvret_hmcall_audit_notify_rule_update audit_notify_rule_update;
	struct __actvret_hmcall_key_install_keyring key_install_keyring;
	struct __actvret_hmcall_key_lookup_keyring key_lookup_keyring;
	struct __actvret_hmcall_cert_verify_path_and_chksum cert_verify_path_and_chksum;
};

enum __sysmgr_mgr {
	__sysmgr_INVAL_mgr=0,
	__sysmgr_test_mgr,
	__sysmgr_path_mgr,
	__sysmgr_sysctrl_mgr,
	__sysmgr_mem_mgr,
	__sysmgr_proc_mgr,
	__sysmgr_mqueue_mgr,
	__sysmgr_thread_mgr,
	__sysmgr_time_mgr,
	__sysmgr_signal_mgr,
	__sysmgr_irq_mgr,
	__sysmgr_sec_mgr,
	__sysmgr_procfs_mgr,
	__sysmgr_vm_mgr,
	__sysmgr_ns_mgr,
	__sysmgr_guard_mgr,
	__sysmgr_iov_mgr,
	__sysmgr_resmgr_mgr,
	__sysmgr_module_mgr,
	__sysmgr_entropy_mgr,
	__sysmgr_kbox_mgr,
	__sysmgr_dump_mgr,
	__sysmgr_linuxemu_mgr,
	__sysmgr_livepatch_mgr,
	__sysmgr_perf_mgr,
	__sysmgr_hmspif_mgr,
	__sysmgr_dynlog_mgr,
	__sysmgr_sysfs_mgr,
	__sysmgr_ftrace_mgr,
	__sysmgr_hmtrace_mgr,
	__sysmgr_inject_mgr,
	__sysmgr_posixcaps_mgr,
	__sysmgr_ipc_mgr,
	__sysmgr_hack_mgr,
	__sysmgr_audit_mgr,
	__sysmgr_key_mgr,
	__sysmgr_cert_mgr,
	__sysmgr_MAX_mgr,
};

#define __sysmgr_method_MIN __ACTV_HIGHTABLE_START
#define __sysmgr_method_test_m1 (__ACTV_HIGHTABLE_START + 1)
#define __sysmgr_method_test_m2 (__ACTV_HIGHTABLE_START + 2)
#define __sysmgr_method_test_m3 (__ACTV_HIGHTABLE_START + 3)
#define __sysmgr_method_test_m4 (__ACTV_HIGHTABLE_START + 4)
#define __sysmgr_method_test_m5 (__ACTV_HIGHTABLE_START + 5)
#define __sysmgr_method_test_m6 (__ACTV_HIGHTABLE_START + 6)
#define __sysmgr_method_test_m7 (__ACTV_HIGHTABLE_START + 7)
#define __sysmgr_method_test_m8 (__ACTV_HIGHTABLE_START + 8)
#define __sysmgr_method_test_m9 (__ACTV_HIGHTABLE_START + 9)
#define __sysmgr_method_test_m10 (__ACTV_HIGHTABLE_START + 10)
#define __sysmgr_method_test_m11 (__ACTV_HIGHTABLE_START + 11)
#define __sysmgr_method_test_m12 (__ACTV_HIGHTABLE_START + 12)
#define __sysmgr_method_test_m13 (__ACTV_HIGHTABLE_START + 13)
#define __sysmgr_method_test_m14 (__ACTV_HIGHTABLE_START + 14)
#define __sysmgr_method_test_m15 (__ACTV_HIGHTABLE_START + 15)
#define __sysmgr_method_test_m16 (__ACTV_HIGHTABLE_START + 16)
#define __sysmgr_method_test_m17 (__ACTV_HIGHTABLE_START + 17)
#define __sysmgr_method_test_m18 (__ACTV_HIGHTABLE_START + 18)
#define __sysmgr_method_test_m19 (__ACTV_HIGHTABLE_START + 19)
#define __sysmgr_method_test_m20 (__ACTV_HIGHTABLE_START + 20)
#define __sysmgr_method_test_m21 (__ACTV_HIGHTABLE_START + 21)
#define __sysmgr_method_test_m22 (__ACTV_HIGHTABLE_START + 22)
#define __sysmgr_method_test_m23 (__ACTV_HIGHTABLE_START + 23)
#define __sysmgr_method_test_m24 (__ACTV_HIGHTABLE_START + 24)
#define __sysmgr_method_test_m25 (__ACTV_HIGHTABLE_START + 25)
#define __sysmgr_method_test_m26 (__ACTV_HIGHTABLE_START + 26)
#define __sysmgr_method_test_m27 (__ACTV_HIGHTABLE_START + 27)
#define __sysmgr_method_test_m28 (__ACTV_HIGHTABLE_START + 28)
#define __sysmgr_method_test_m29 (__ACTV_HIGHTABLE_START + 29)
#define __sysmgr_method_test_m30 (__ACTV_HIGHTABLE_START + 30)
#define __sysmgr_method_test_m31 (__ACTV_HIGHTABLE_START + 31)
#define __sysmgr_method_test_m32 (__ACTV_HIGHTABLE_START + 32)
#define __sysmgr_method_test_m33 (__ACTV_HIGHTABLE_START + 33)
#define __sysmgr_method_test_m34 (__ACTV_HIGHTABLE_START + 34)
#define __sysmgr_method_test_m35 (__ACTV_HIGHTABLE_START + 35)
#define __sysmgr_method_test_rsvd_29 (__ACTV_HIGHTABLE_START + 36)
#define __sysmgr_method_test_rsvd_28 (__ACTV_HIGHTABLE_START + 37)
#define __sysmgr_method_test_rsvd_27 (__ACTV_HIGHTABLE_START + 38)
#define __sysmgr_method_test_rsvd_26 (__ACTV_HIGHTABLE_START + 39)
#define __sysmgr_method_test_rsvd_25 (__ACTV_HIGHTABLE_START + 40)
#define __sysmgr_method_test_rsvd_24 (__ACTV_HIGHTABLE_START + 41)
#define __sysmgr_method_test_rsvd_23 (__ACTV_HIGHTABLE_START + 42)
#define __sysmgr_method_test_rsvd_22 (__ACTV_HIGHTABLE_START + 43)
#define __sysmgr_method_test_rsvd_21 (__ACTV_HIGHTABLE_START + 44)
#define __sysmgr_method_test_rsvd_20 (__ACTV_HIGHTABLE_START + 45)
#define __sysmgr_method_test_rsvd_19 (__ACTV_HIGHTABLE_START + 46)
#define __sysmgr_method_test_rsvd_18 (__ACTV_HIGHTABLE_START + 47)
#define __sysmgr_method_test_rsvd_17 (__ACTV_HIGHTABLE_START + 48)
#define __sysmgr_method_test_rsvd_16 (__ACTV_HIGHTABLE_START + 49)
#define __sysmgr_method_test_rsvd_15 (__ACTV_HIGHTABLE_START + 50)
#define __sysmgr_method_test_rsvd_14 (__ACTV_HIGHTABLE_START + 51)
#define __sysmgr_method_test_rsvd_13 (__ACTV_HIGHTABLE_START + 52)
#define __sysmgr_method_test_rsvd_12 (__ACTV_HIGHTABLE_START + 53)
#define __sysmgr_method_test_rsvd_11 (__ACTV_HIGHTABLE_START + 54)
#define __sysmgr_method_test_rsvd_10 (__ACTV_HIGHTABLE_START + 55)
#define __sysmgr_method_test_rsvd_9 (__ACTV_HIGHTABLE_START + 56)
#define __sysmgr_method_test_rsvd_8 (__ACTV_HIGHTABLE_START + 57)
#define __sysmgr_method_test_rsvd_7 (__ACTV_HIGHTABLE_START + 58)
#define __sysmgr_method_test_rsvd_6 (__ACTV_HIGHTABLE_START + 59)
#define __sysmgr_method_test_rsvd_5 (__ACTV_HIGHTABLE_START + 60)
#define __sysmgr_method_test_rsvd_4 (__ACTV_HIGHTABLE_START + 61)
#define __sysmgr_method_test_rsvd_3 (__ACTV_HIGHTABLE_START + 62)
#define __sysmgr_method_test_rsvd_2 (__ACTV_HIGHTABLE_START + 63)
#define __sysmgr_method_test_rsvd_1 (__ACTV_HIGHTABLE_START + 64)
#define __sysmgr_method_path_add_path (__ACTV_HIGHTABLE_START + 65)
#define __sysmgr_method_path_grant_path (__ACTV_HIGHTABLE_START + 66)
#define __sysmgr_method_path_del_path (__ACTV_HIGHTABLE_START + 67)
#define __sysmgr_method_path_acquire_path (__ACTV_HIGHTABLE_START + 68)
#define __sysmgr_method_path_release_path (__ACTV_HIGHTABLE_START + 69)
#define __sysmgr_method_path_stat (__ACTV_HIGHTABLE_START + 70)
#define __sysmgr_method_path_chmod (__ACTV_HIGHTABLE_START + 71)
#define __sysmgr_method_path_rsvd_1 (__ACTV_HIGHTABLE_START + 72)
#define __sysmgr_method_sysctrl_shutdown (__ACTV_HIGHTABLE_START + 73)
#define __sysmgr_method_sysctrl_reboot (__ACTV_HIGHTABLE_START + 74)
#define __sysmgr_method_sysctrl_sysconf_ulong (__ACTV_HIGHTABLE_START + 75)
#define __sysmgr_method_sysctrl_sysconf_string (__ACTV_HIGHTABLE_START + 76)
#define __sysmgr_method_sysctrl_uname (__ACTV_HIGHTABLE_START + 77)
#define __sysmgr_method_sysctrl_require (__ACTV_HIGHTABLE_START + 78)
#define __sysmgr_method_sysctrl_sysinfo (__ACTV_HIGHTABLE_START + 79)
#define __sysmgr_method_sysctrl_cpustat (__ACTV_HIGHTABLE_START + 80)
#define __sysmgr_method_sysctrl_attach_cpuctx (__ACTV_HIGHTABLE_START + 81)
#define __sysmgr_method_sysctrl_detach_cpuctx (__ACTV_HIGHTABLE_START + 82)
#define __sysmgr_method_sysctrl_check_cpuctx (__ACTV_HIGHTABLE_START + 83)
#define __sysmgr_method_sysctrl_set_hostname (__ACTV_HIGHTABLE_START + 84)
#define __sysmgr_method_sysctrl_set_klogport_level (__ACTV_HIGHTABLE_START + 85)
#define __sysmgr_method_sysctrl_enable_klogport (__ACTV_HIGHTABLE_START + 86)
#define __sysmgr_method_sysctrl_disable_klogport (__ACTV_HIGHTABLE_START + 87)
#define __sysmgr_method_sysctrl_kev_read_event_number (__ACTV_HIGHTABLE_START + 88)
#define __sysmgr_method_sysctrl_kev_read_event_config (__ACTV_HIGHTABLE_START + 89)
#define __sysmgr_method_sysctrl_kev_set_enable (__ACTV_HIGHTABLE_START + 90)
#define __sysmgr_method_sysctrl_kev_set_filter (__ACTV_HIGHTABLE_START + 91)
#define __sysmgr_method_sysctrl_kev_print (__ACTV_HIGHTABLE_START + 92)
#define __sysmgr_method_sysctrl_kev_klog (__ACTV_HIGHTABLE_START + 93)
#define __sysmgr_method_sysctrl_rsvd_11 (__ACTV_HIGHTABLE_START + 94)
#define __sysmgr_method_sysctrl_rsvd_10 (__ACTV_HIGHTABLE_START + 95)
#define __sysmgr_method_sysctrl_rsvd_9 (__ACTV_HIGHTABLE_START + 96)
#define __sysmgr_method_sysctrl_rsvd_8 (__ACTV_HIGHTABLE_START + 97)
#define __sysmgr_method_sysctrl_rsvd_7 (__ACTV_HIGHTABLE_START + 98)
#define __sysmgr_method_sysctrl_rsvd_6 (__ACTV_HIGHTABLE_START + 99)
#define __sysmgr_method_sysctrl_rsvd_5 (__ACTV_HIGHTABLE_START + 100)
#define __sysmgr_method_sysctrl_rsvd_4 (__ACTV_HIGHTABLE_START + 101)
#define __sysmgr_method_sysctrl_rsvd_3 (__ACTV_HIGHTABLE_START + 102)
#define __sysmgr_method_sysctrl_rsvd_2 (__ACTV_HIGHTABLE_START + 103)
#define __sysmgr_method_sysctrl_rsvd_1 (__ACTV_HIGHTABLE_START + 104)
#define __sysmgr_method_mem_mmap (__ACTV_HIGHTABLE_START + 105)
#define __sysmgr_method_mem_munmap (__ACTV_HIGHTABLE_START + 106)
#define __sysmgr_method_mem_mremap (__ACTV_HIGHTABLE_START + 107)
#define __sysmgr_method_mem_alloc_kmem (__ACTV_HIGHTABLE_START + 108)
#define __sysmgr_method_mem_free_kmem (__ACTV_HIGHTABLE_START + 109)
#define __sysmgr_method_mem_alloc_pmem (__ACTV_HIGHTABLE_START + 110)
#define __sysmgr_method_mem_free_pmem (__ACTV_HIGHTABLE_START + 111)
#define __sysmgr_method_mem_brk (__ACTV_HIGHTABLE_START + 112)
#define __sysmgr_method_mem_madvise (__ACTV_HIGHTABLE_START + 113)
#define __sysmgr_method_mem_mprotect (__ACTV_HIGHTABLE_START + 114)
#define __sysmgr_method_mem_msync (__ACTV_HIGHTABLE_START + 115)
#define __sysmgr_method_mem_mlock (__ACTV_HIGHTABLE_START + 116)
#define __sysmgr_method_mem_munlock (__ACTV_HIGHTABLE_START + 117)
#define __sysmgr_method_mem_mlockall (__ACTV_HIGHTABLE_START + 118)
#define __sysmgr_method_mem_munlockall (__ACTV_HIGHTABLE_START + 119)
#define __sysmgr_method_mem_drop_file_cache (__ACTV_HIGHTABLE_START + 120)
#define __sysmgr_method_mem_ioremap_prepare (__ACTV_HIGHTABLE_START + 121)
#define __sysmgr_method_mem_iomem_mmap_page (__ACTV_HIGHTABLE_START + 122)
#define __sysmgr_method_mem_file_mapping_stat (__ACTV_HIGHTABLE_START + 123)
#define __sysmgr_method_mem_shm_open (__ACTV_HIGHTABLE_START + 124)
#define __sysmgr_method_mem_shm_open_anon (__ACTV_HIGHTABLE_START + 125)
#define __sysmgr_method_mem_shm_unlink (__ACTV_HIGHTABLE_START + 126)
#define __sysmgr_method_mem_shm_unlink_anon (__ACTV_HIGHTABLE_START + 127)
#define __sysmgr_method_mem_shm_close (__ACTV_HIGHTABLE_START + 128)
#define __sysmgr_method_mem_shm_check_owner (__ACTV_HIGHTABLE_START + 129)
#define __sysmgr_method_mem_shm_reclaim_pages (__ACTV_HIGHTABLE_START + 130)
#define __sysmgr_method_mem_grant_shm_to_caller (__ACTV_HIGHTABLE_START + 131)
#define __sysmgr_method_mem_grant_shm_by_xref (__ACTV_HIGHTABLE_START + 132)
#define __sysmgr_method_mem_ashm_grant_trans (__ACTV_HIGHTABLE_START + 133)
#define __sysmgr_method_mem_query_shm_info (__ACTV_HIGHTABLE_START + 134)
#define __sysmgr_method_mem_query_shm_paddr (__ACTV_HIGHTABLE_START + 135)
#define __sysmgr_method_mem_shm_dump_info (__ACTV_HIGHTABLE_START + 136)
#define __sysmgr_method_mem_shm_chmod (__ACTV_HIGHTABLE_START + 137)
#define __sysmgr_method_mem_extend_ctable (__ACTV_HIGHTABLE_START + 138)
#define __sysmgr_method_mem_extend_utable (__ACTV_HIGHTABLE_START + 139)
#define __sysmgr_method_mem_extend_rtable (__ACTV_HIGHTABLE_START + 140)
#define __sysmgr_method_mem_stat (__ACTV_HIGHTABLE_START + 141)
#define __sysmgr_method_mem_set_anon_name (__ACTV_HIGHTABLE_START + 142)
#define __sysmgr_method_mem_process_vm_access (__ACTV_HIGHTABLE_START + 143)
#define __sysmgr_method_mem_mincore (__ACTV_HIGHTABLE_START + 144)
#define __sysmgr_method_mem_calculate (__ACTV_HIGHTABLE_START + 145)
#define __sysmgr_method_mem_rmap_unmap_page (__ACTV_HIGHTABLE_START + 146)
#define __sysmgr_method_mem_fs_stat_register (__ACTV_HIGHTABLE_START + 147)
#define __sysmgr_method_mem_hugetlbfs_mount (__ACTV_HIGHTABLE_START + 148)
#define __sysmgr_method_mem_register_devhost (__ACTV_HIGHTABLE_START + 149)
#define __sysmgr_method_mem_iomap_prepare (__ACTV_HIGHTABLE_START + 150)
#define __sysmgr_method_mem_iomap_populate (__ACTV_HIGHTABLE_START + 151)
#define __sysmgr_method_mem_iomap_finish (__ACTV_HIGHTABLE_START + 152)
#define __sysmgr_method_mem_iomap_statpage (__ACTV_HIGHTABLE_START + 153)
#define __sysmgr_method_mem_cma_dyn_init (__ACTV_HIGHTABLE_START + 154)
#define __sysmgr_method_mem_cma_alloc (__ACTV_HIGHTABLE_START + 155)
#define __sysmgr_method_mem_cma_free (__ACTV_HIGHTABLE_START + 156)
#define __sysmgr_method_mem_rsvd_12 (__ACTV_HIGHTABLE_START + 157)
#define __sysmgr_method_mem_rsvd_11 (__ACTV_HIGHTABLE_START + 158)
#define __sysmgr_method_mem_rsvd_10 (__ACTV_HIGHTABLE_START + 159)
#define __sysmgr_method_mem_rsvd_9 (__ACTV_HIGHTABLE_START + 160)
#define __sysmgr_method_mem_rsvd_8 (__ACTV_HIGHTABLE_START + 161)
#define __sysmgr_method_mem_rsvd_7 (__ACTV_HIGHTABLE_START + 162)
#define __sysmgr_method_mem_rsvd_6 (__ACTV_HIGHTABLE_START + 163)
#define __sysmgr_method_mem_rsvd_5 (__ACTV_HIGHTABLE_START + 164)
#define __sysmgr_method_mem_rsvd_4 (__ACTV_HIGHTABLE_START + 165)
#define __sysmgr_method_mem_rsvd_3 (__ACTV_HIGHTABLE_START + 166)
#define __sysmgr_method_mem_rsvd_2 (__ACTV_HIGHTABLE_START + 167)
#define __sysmgr_method_mem_rsvd_1 (__ACTV_HIGHTABLE_START + 168)
#define __sysmgr_method_proc_spawn (__ACTV_HIGHTABLE_START + 169)
#define __sysmgr_method_proc_waitid (__ACTV_HIGHTABLE_START + 170)
#define __sysmgr_method_proc_wait4 (__ACTV_HIGHTABLE_START + 171)
#define __sysmgr_method_proc_exit (__ACTV_HIGHTABLE_START + 172)
#define __sysmgr_method_proc_getpid (__ACTV_HIGHTABLE_START + 173)
#define __sysmgr_method_proc_pid_of (__ACTV_HIGHTABLE_START + 174)
#define __sysmgr_method_proc_getppid (__ACTV_HIGHTABLE_START + 175)
#define __sysmgr_method_proc_cnode_idx_of (__ACTV_HIGHTABLE_START + 176)
#define __sysmgr_method_proc_getpgid (__ACTV_HIGHTABLE_START + 177)
#define __sysmgr_method_proc_setpgid (__ACTV_HIGHTABLE_START + 178)
#define __sysmgr_method_proc_getsid (__ACTV_HIGHTABLE_START + 179)
#define __sysmgr_method_proc_setsid (__ACTV_HIGHTABLE_START + 180)
#define __sysmgr_method_proc_setfgpgrp (__ACTV_HIGHTABLE_START + 181)
#define __sysmgr_method_proc_getfgpgrp (__ACTV_HIGHTABLE_START + 182)
#define __sysmgr_method_proc_mysid (__ACTV_HIGHTABLE_START + 183)
#define __sysmgr_method_proc_signal_fgpgrp (__ACTV_HIGHTABLE_START + 184)
#define __sysmgr_method_proc_setuid (__ACTV_HIGHTABLE_START + 185)
#define __sysmgr_method_proc_getuid (__ACTV_HIGHTABLE_START + 186)
#define __sysmgr_method_proc_geteuid (__ACTV_HIGHTABLE_START + 187)
#define __sysmgr_method_proc_getresuid (__ACTV_HIGHTABLE_START + 188)
#define __sysmgr_method_proc_setreuid (__ACTV_HIGHTABLE_START + 189)
#define __sysmgr_method_proc_setresuid (__ACTV_HIGHTABLE_START + 190)
#define __sysmgr_method_proc_getgid (__ACTV_HIGHTABLE_START + 191)
#define __sysmgr_method_proc_getegid (__ACTV_HIGHTABLE_START + 192)
#define __sysmgr_method_proc_getresgid (__ACTV_HIGHTABLE_START + 193)
#define __sysmgr_method_proc_setregid (__ACTV_HIGHTABLE_START + 194)
#define __sysmgr_method_proc_setgid (__ACTV_HIGHTABLE_START + 195)
#define __sysmgr_method_proc_setresgid (__ACTV_HIGHTABLE_START + 196)
#define __sysmgr_method_proc_setgroups (__ACTV_HIGHTABLE_START + 197)
#define __sysmgr_method_proc_getgroups (__ACTV_HIGHTABLE_START + 198)
#define __sysmgr_method_proc_setfsuid (__ACTV_HIGHTABLE_START + 199)
#define __sysmgr_method_proc_setfsgid (__ACTV_HIGHTABLE_START + 200)
#define __sysmgr_method_proc_stat (__ACTV_HIGHTABLE_START + 201)
#define __sysmgr_method_proc_getrlimit (__ACTV_HIGHTABLE_START + 202)
#define __sysmgr_method_proc_setrlimit (__ACTV_HIGHTABLE_START + 203)
#define __sysmgr_method_proc_prlimit (__ACTV_HIGHTABLE_START + 204)
#define __sysmgr_method_proc_debug_thread (__ACTV_HIGHTABLE_START + 205)
#define __sysmgr_method_proc_debug_wait_status (__ACTV_HIGHTABLE_START + 206)
#define __sysmgr_method_proc_debug_vspace (__ACTV_HIGHTABLE_START + 207)
#define __sysmgr_method_proc_get_coredump (__ACTV_HIGHTABLE_START + 208)
#define __sysmgr_method_proc_set_coredump (__ACTV_HIGHTABLE_START + 209)
#define __sysmgr_method_proc_nsid_of_cnode_idx (__ACTV_HIGHTABLE_START + 210)
#define __sysmgr_method_proc_timer_create (__ACTV_HIGHTABLE_START + 211)
#define __sysmgr_method_proc_timer_settime (__ACTV_HIGHTABLE_START + 212)
#define __sysmgr_method_proc_timer_gettime (__ACTV_HIGHTABLE_START + 213)
#define __sysmgr_method_proc_timer_delete (__ACTV_HIGHTABLE_START + 214)
#define __sysmgr_method_proc_timer_getoverrun (__ACTV_HIGHTABLE_START + 215)
#define __sysmgr_method_proc_get_cputime (__ACTV_HIGHTABLE_START + 216)
#define __sysmgr_method_proc_getrusage (__ACTV_HIGHTABLE_START + 217)
#define __sysmgr_method_proc_execve (__ACTV_HIGHTABLE_START + 218)
#define __sysmgr_method_proc_new_permission (__ACTV_HIGHTABLE_START + 219)
#define __sysmgr_method_proc_new_vspace_mmscd (__ACTV_HIGHTABLE_START + 220)
#define __sysmgr_method_proc_new_vspace (__ACTV_HIGHTABLE_START + 221)
#define __sysmgr_method_proc_new_vm_mmscd (__ACTV_HIGHTABLE_START + 222)
#define __sysmgr_method_proc_new_vm (__ACTV_HIGHTABLE_START + 223)
#define __sysmgr_method_proc_new_cpucontext_mmscd (__ACTV_HIGHTABLE_START + 224)
#define __sysmgr_method_proc_new_cpucontext (__ACTV_HIGHTABLE_START + 225)
#define __sysmgr_method_proc_elf_load_info (__ACTV_HIGHTABLE_START + 226)
#define __sysmgr_method_proc_pm_config_add (__ACTV_HIGHTABLE_START + 227)
#define __sysmgr_method_proc_pm_config_cleanup (__ACTV_HIGHTABLE_START + 228)
#define __sysmgr_method_proc_pm_dormancy_enter (__ACTV_HIGHTABLE_START + 229)
#define __sysmgr_method_proc_show_pte (__ACTV_HIGHTABLE_START + 230)
#define __sysmgr_method_proc_check_regs (__ACTV_HIGHTABLE_START + 231)
#define __sysmgr_method_proc_get_dumpable (__ACTV_HIGHTABLE_START + 232)
#define __sysmgr_method_proc_set_dumpable (__ACTV_HIGHTABLE_START + 233)
#define __sysmgr_method_proc_set_subreaper (__ACTV_HIGHTABLE_START + 234)
#define __sysmgr_method_proc_get_subreaper (__ACTV_HIGHTABLE_START + 235)
#define __sysmgr_method_proc_set_privs (__ACTV_HIGHTABLE_START + 236)
#define __sysmgr_method_proc_get_privs (__ACTV_HIGHTABLE_START + 237)
#define __sysmgr_method_proc_clone (__ACTV_HIGHTABLE_START + 238)
#define __sysmgr_method_proc_dyn_libs_data (__ACTV_HIGHTABLE_START + 239)
#define __sysmgr_method_proc_register_event (__ACTV_HIGHTABLE_START + 240)
#define __sysmgr_method_proc_affinity_get (__ACTV_HIGHTABLE_START + 241)
#define __sysmgr_method_proc_rsvd_55 (__ACTV_HIGHTABLE_START + 242)
#define __sysmgr_method_proc_rsvd_54 (__ACTV_HIGHTABLE_START + 243)
#define __sysmgr_method_proc_rsvd_53 (__ACTV_HIGHTABLE_START + 244)
#define __sysmgr_method_proc_rsvd_52 (__ACTV_HIGHTABLE_START + 245)
#define __sysmgr_method_proc_rsvd_51 (__ACTV_HIGHTABLE_START + 246)
#define __sysmgr_method_proc_rsvd_50 (__ACTV_HIGHTABLE_START + 247)
#define __sysmgr_method_proc_rsvd_49 (__ACTV_HIGHTABLE_START + 248)
#define __sysmgr_method_proc_rsvd_48 (__ACTV_HIGHTABLE_START + 249)
#define __sysmgr_method_proc_rsvd_47 (__ACTV_HIGHTABLE_START + 250)
#define __sysmgr_method_proc_rsvd_46 (__ACTV_HIGHTABLE_START + 251)
#define __sysmgr_method_proc_rsvd_45 (__ACTV_HIGHTABLE_START + 252)
#define __sysmgr_method_proc_rsvd_44 (__ACTV_HIGHTABLE_START + 253)
#define __sysmgr_method_proc_rsvd_43 (__ACTV_HIGHTABLE_START + 254)
#define __sysmgr_method_proc_rsvd_42 (__ACTV_HIGHTABLE_START + 255)
#define __sysmgr_method_proc_rsvd_41 (__ACTV_HIGHTABLE_START + 256)
#define __sysmgr_method_proc_rsvd_40 (__ACTV_HIGHTABLE_START + 257)
#define __sysmgr_method_proc_rsvd_39 (__ACTV_HIGHTABLE_START + 258)
#define __sysmgr_method_proc_rsvd_38 (__ACTV_HIGHTABLE_START + 259)
#define __sysmgr_method_proc_rsvd_37 (__ACTV_HIGHTABLE_START + 260)
#define __sysmgr_method_proc_rsvd_36 (__ACTV_HIGHTABLE_START + 261)
#define __sysmgr_method_proc_rsvd_35 (__ACTV_HIGHTABLE_START + 262)
#define __sysmgr_method_proc_rsvd_34 (__ACTV_HIGHTABLE_START + 263)
#define __sysmgr_method_proc_rsvd_33 (__ACTV_HIGHTABLE_START + 264)
#define __sysmgr_method_proc_rsvd_32 (__ACTV_HIGHTABLE_START + 265)
#define __sysmgr_method_proc_rsvd_31 (__ACTV_HIGHTABLE_START + 266)
#define __sysmgr_method_proc_rsvd_30 (__ACTV_HIGHTABLE_START + 267)
#define __sysmgr_method_proc_rsvd_29 (__ACTV_HIGHTABLE_START + 268)
#define __sysmgr_method_proc_rsvd_28 (__ACTV_HIGHTABLE_START + 269)
#define __sysmgr_method_proc_rsvd_27 (__ACTV_HIGHTABLE_START + 270)
#define __sysmgr_method_proc_rsvd_26 (__ACTV_HIGHTABLE_START + 271)
#define __sysmgr_method_proc_rsvd_25 (__ACTV_HIGHTABLE_START + 272)
#define __sysmgr_method_proc_rsvd_24 (__ACTV_HIGHTABLE_START + 273)
#define __sysmgr_method_proc_rsvd_23 (__ACTV_HIGHTABLE_START + 274)
#define __sysmgr_method_proc_rsvd_22 (__ACTV_HIGHTABLE_START + 275)
#define __sysmgr_method_proc_rsvd_21 (__ACTV_HIGHTABLE_START + 276)
#define __sysmgr_method_proc_rsvd_20 (__ACTV_HIGHTABLE_START + 277)
#define __sysmgr_method_proc_rsvd_19 (__ACTV_HIGHTABLE_START + 278)
#define __sysmgr_method_proc_rsvd_18 (__ACTV_HIGHTABLE_START + 279)
#define __sysmgr_method_proc_rsvd_17 (__ACTV_HIGHTABLE_START + 280)
#define __sysmgr_method_proc_rsvd_16 (__ACTV_HIGHTABLE_START + 281)
#define __sysmgr_method_proc_rsvd_15 (__ACTV_HIGHTABLE_START + 282)
#define __sysmgr_method_proc_rsvd_14 (__ACTV_HIGHTABLE_START + 283)
#define __sysmgr_method_proc_rsvd_13 (__ACTV_HIGHTABLE_START + 284)
#define __sysmgr_method_proc_rsvd_12 (__ACTV_HIGHTABLE_START + 285)
#define __sysmgr_method_proc_rsvd_11 (__ACTV_HIGHTABLE_START + 286)
#define __sysmgr_method_proc_rsvd_10 (__ACTV_HIGHTABLE_START + 287)
#define __sysmgr_method_proc_rsvd_9 (__ACTV_HIGHTABLE_START + 288)
#define __sysmgr_method_proc_rsvd_8 (__ACTV_HIGHTABLE_START + 289)
#define __sysmgr_method_proc_rsvd_7 (__ACTV_HIGHTABLE_START + 290)
#define __sysmgr_method_proc_rsvd_6 (__ACTV_HIGHTABLE_START + 291)
#define __sysmgr_method_proc_rsvd_5 (__ACTV_HIGHTABLE_START + 292)
#define __sysmgr_method_proc_rsvd_4 (__ACTV_HIGHTABLE_START + 293)
#define __sysmgr_method_proc_rsvd_3 (__ACTV_HIGHTABLE_START + 294)
#define __sysmgr_method_proc_rsvd_2 (__ACTV_HIGHTABLE_START + 295)
#define __sysmgr_method_proc_rsvd_1 (__ACTV_HIGHTABLE_START + 296)
#define __sysmgr_method_mqueue_open (__ACTV_HIGHTABLE_START + 297)
#define __sysmgr_method_mqueue_send (__ACTV_HIGHTABLE_START + 298)
#define __sysmgr_method_mqueue_recv (__ACTV_HIGHTABLE_START + 299)
#define __sysmgr_method_mqueue_getsetattr (__ACTV_HIGHTABLE_START + 300)
#define __sysmgr_method_mqueue_close (__ACTV_HIGHTABLE_START + 301)
#define __sysmgr_method_mqueue_unlink (__ACTV_HIGHTABLE_START + 302)
#define __sysmgr_method_mqueue_chmod (__ACTV_HIGHTABLE_START + 303)
#define __sysmgr_method_mqueue_rsvd_1 (__ACTV_HIGHTABLE_START + 304)
#define __sysmgr_method_thread_exit (__ACTV_HIGHTABLE_START + 305)
#define __sysmgr_method_thread_kill (__ACTV_HIGHTABLE_START + 306)
#define __sysmgr_method_thread_gettid (__ACTV_HIGHTABLE_START + 307)
#define __sysmgr_method_thread_tid2cref (__ACTV_HIGHTABLE_START + 308)
#define __sysmgr_method_thread_set_tid_address (__ACTV_HIGHTABLE_START + 309)
#define __sysmgr_method_thread_setname (__ACTV_HIGHTABLE_START + 310)
#define __sysmgr_method_thread_set_pdeath_signal (__ACTV_HIGHTABLE_START + 311)
#define __sysmgr_method_thread_get_pdeath_signal (__ACTV_HIGHTABLE_START + 312)
#define __sysmgr_method_thread_set_robust_list (__ACTV_HIGHTABLE_START + 313)
#define __sysmgr_method_thread_get_robust_list (__ACTV_HIGHTABLE_START + 314)
#define __sysmgr_method_thread_freeze (__ACTV_HIGHTABLE_START + 315)
#define __sysmgr_method_thread_thaw (__ACTV_HIGHTABLE_START + 316)
#define __sysmgr_method_thread_setpersonality (__ACTV_HIGHTABLE_START + 317)
#define __sysmgr_method_thread_getpersonality (__ACTV_HIGHTABLE_START + 318)
#define __sysmgr_method_thread_bind_info (__ACTV_HIGHTABLE_START + 319)
#define __sysmgr_method_thread_set_tickless (__ACTV_HIGHTABLE_START + 320)
#define __sysmgr_method_thread_set_runqueue (__ACTV_HIGHTABLE_START + 321)
#define __sysmgr_method_thread_sched_setparam (__ACTV_HIGHTABLE_START + 322)
#define __sysmgr_method_thread_sched_getparam (__ACTV_HIGHTABLE_START + 323)
#define __sysmgr_method_thread_sched_setscheduler (__ACTV_HIGHTABLE_START + 324)
#define __sysmgr_method_thread_sched_getscheduler (__ACTV_HIGHTABLE_START + 325)
#define __sysmgr_method_thread_getseq (__ACTV_HIGHTABLE_START + 326)
#define __sysmgr_method_thread_setpriority (__ACTV_HIGHTABLE_START + 327)
#define __sysmgr_method_thread_getpriority (__ACTV_HIGHTABLE_START + 328)
#define __sysmgr_method_thread_sched_getattr (__ACTV_HIGHTABLE_START + 329)
#define __sysmgr_method_thread_sched_get_interval_rr (__ACTV_HIGHTABLE_START + 330)
#define __sysmgr_method_thread_sched_setaffinity (__ACTV_HIGHTABLE_START + 331)
#define __sysmgr_method_thread_sched_getaffinity (__ACTV_HIGHTABLE_START + 332)
#define __sysmgr_method_thread_update_vnotify_futex (__ACTV_HIGHTABLE_START + 333)
#define __sysmgr_method_thread_futex_wait (__ACTV_HIGHTABLE_START + 334)
#define __sysmgr_method_thread_futex_wake (__ACTV_HIGHTABLE_START + 335)
#define __sysmgr_method_thread_futex_requeue (__ACTV_HIGHTABLE_START + 336)
#define __sysmgr_method_time_set_clock (__ACTV_HIGHTABLE_START + 337)
#define __sysmgr_method_time_set_tock_policy (__ACTV_HIGHTABLE_START + 338)
#define __sysmgr_method_signal_kill (__ACTV_HIGHTABLE_START + 339)
#define __sysmgr_method_signal_tkill (__ACTV_HIGHTABLE_START + 340)
#define __sysmgr_method_signal_tgkill (__ACTV_HIGHTABLE_START + 341)
#define __sysmgr_method_signal_sigqueue (__ACTV_HIGHTABLE_START + 342)
#define __sysmgr_method_signal_pthread_sigqueue (__ACTV_HIGHTABLE_START + 343)
#define __sysmgr_method_signal_set_signal_handler (__ACTV_HIGHTABLE_START + 344)
#define __sysmgr_method_signal_read_signalfd (__ACTV_HIGHTABLE_START + 345)
#define __sysmgr_method_signal_read_signalevents (__ACTV_HIGHTABLE_START + 346)
#define __sysmgr_method_signal_epoll_ctrl (__ACTV_HIGHTABLE_START + 347)
#define __sysmgr_method_signal_init (__ACTV_HIGHTABLE_START + 348)
#define __sysmgr_method_signal_set_sigmask (__ACTV_HIGHTABLE_START + 349)
#define __sysmgr_method_signal_get_pending_signal (__ACTV_HIGHTABLE_START + 350)
#define __sysmgr_method_signal_drop_pending_signal (__ACTV_HIGHTABLE_START + 351)
#define __sysmgr_method_signal_set_sigstack (__ACTV_HIGHTABLE_START + 352)
#define __sysmgr_method_signal_set_sigaction_mask (__ACTV_HIGHTABLE_START + 353)
#define __sysmgr_method_signal_timedwait (__ACTV_HIGHTABLE_START + 354)
#define __sysmgr_method_signal_restore (__ACTV_HIGHTABLE_START + 355)
#define __sysmgr_method_signal_rsvd_15 (__ACTV_HIGHTABLE_START + 356)
#define __sysmgr_method_signal_rsvd_14 (__ACTV_HIGHTABLE_START + 357)
#define __sysmgr_method_signal_rsvd_13 (__ACTV_HIGHTABLE_START + 358)
#define __sysmgr_method_signal_rsvd_12 (__ACTV_HIGHTABLE_START + 359)
#define __sysmgr_method_signal_rsvd_11 (__ACTV_HIGHTABLE_START + 360)
#define __sysmgr_method_signal_rsvd_10 (__ACTV_HIGHTABLE_START + 361)
#define __sysmgr_method_signal_rsvd_9 (__ACTV_HIGHTABLE_START + 362)
#define __sysmgr_method_signal_rsvd_8 (__ACTV_HIGHTABLE_START + 363)
#define __sysmgr_method_signal_rsvd_7 (__ACTV_HIGHTABLE_START + 364)
#define __sysmgr_method_signal_rsvd_6 (__ACTV_HIGHTABLE_START + 365)
#define __sysmgr_method_signal_rsvd_5 (__ACTV_HIGHTABLE_START + 366)
#define __sysmgr_method_signal_rsvd_4 (__ACTV_HIGHTABLE_START + 367)
#define __sysmgr_method_signal_rsvd_3 (__ACTV_HIGHTABLE_START + 368)
#define __sysmgr_method_signal_rsvd_2 (__ACTV_HIGHTABLE_START + 369)
#define __sysmgr_method_signal_rsvd_1 (__ACTV_HIGHTABLE_START + 370)
#define __sysmgr_method_irq_grant_ctrl (__ACTV_HIGHTABLE_START + 371)
#define __sysmgr_method_irq_default_phyctrl_id (__ACTV_HIGHTABLE_START + 372)
#define __sysmgr_method_irq_to_logic (__ACTV_HIGHTABLE_START + 373)
#define __sysmgr_method_irq_revoke_ctrl (__ACTV_HIGHTABLE_START + 374)
#define __sysmgr_method_irq_version_get (__ACTV_HIGHTABLE_START + 375)
#define __sysmgr_method_irq_version_check (__ACTV_HIGHTABLE_START + 376)
#define __sysmgr_method_irq_stat (__ACTV_HIGHTABLE_START + 377)
#define __sysmgr_method_irq_suspend (__ACTV_HIGHTABLE_START + 378)
#define __sysmgr_method_irq_resume (__ACTV_HIGHTABLE_START + 379)
#define __sysmgr_method_irq_rsvd_7 (__ACTV_HIGHTABLE_START + 380)
#define __sysmgr_method_irq_rsvd_6 (__ACTV_HIGHTABLE_START + 381)
#define __sysmgr_method_irq_rsvd_5 (__ACTV_HIGHTABLE_START + 382)
#define __sysmgr_method_irq_rsvd_4 (__ACTV_HIGHTABLE_START + 383)
#define __sysmgr_method_irq_rsvd_3 (__ACTV_HIGHTABLE_START + 384)
#define __sysmgr_method_irq_rsvd_2 (__ACTV_HIGHTABLE_START + 385)
#define __sysmgr_method_irq_rsvd_1 (__ACTV_HIGHTABLE_START + 386)
#define __sysmgr_method_sec_cred_cfg (__ACTV_HIGHTABLE_START + 387)
#define __sysmgr_method_sec_setexeccon (__ACTV_HIGHTABLE_START + 388)
#define __sysmgr_method_sec_shconf_set_field (__ACTV_HIGHTABLE_START + 389)
#define __sysmgr_method_sec_crlread (__ACTV_HIGHTABLE_START + 390)
#define __sysmgr_method_sec_crlwrite (__ACTV_HIGHTABLE_START + 391)
#define __sysmgr_method_sec_umask (__ACTV_HIGHTABLE_START + 392)
#define __sysmgr_method_sec_rsvd_2 (__ACTV_HIGHTABLE_START + 393)
#define __sysmgr_method_sec_rsvd_1 (__ACTV_HIGHTABLE_START + 394)
#define __sysmgr_method_procfs_simple_read (__ACTV_HIGHTABLE_START + 395)
#define __sysmgr_method_procfs_simple_pid_read (__ACTV_HIGHTABLE_START + 396)
#define __sysmgr_method_procfs_simple_tid_read (__ACTV_HIGHTABLE_START + 397)
#define __sysmgr_method_procfs_pid_read (__ACTV_HIGHTABLE_START + 398)
#define __sysmgr_method_procfs_tid_read (__ACTV_HIGHTABLE_START + 399)
#define __sysmgr_method_procfs_read (__ACTV_HIGHTABLE_START + 400)
#define __sysmgr_method_procfs_pid_write (__ACTV_HIGHTABLE_START + 401)
#define __sysmgr_method_procfs_tid_write (__ACTV_HIGHTABLE_START + 402)
#define __sysmgr_method_procfs_write (__ACTV_HIGHTABLE_START + 403)
#define __sysmgr_method_procfs_yama_write (__ACTV_HIGHTABLE_START + 404)
#define __sysmgr_method_procfs_get_allpids (__ACTV_HIGHTABLE_START + 405)
#define __sysmgr_method_procfs_get_alltids (__ACTV_HIGHTABLE_START + 406)
#define __sysmgr_method_procfs_get_irq_names (__ACTV_HIGHTABLE_START + 407)
#define __sysmgr_method_procfs_simple_irq_read (__ACTV_HIGHTABLE_START + 408)
#define __sysmgr_method_procfs_irq_read (__ACTV_HIGHTABLE_START + 409)
#define __sysmgr_method_procfs_irq_write (__ACTV_HIGHTABLE_START + 410)
#define __sysmgr_method_procfs_rsvd_6 (__ACTV_HIGHTABLE_START + 411)
#define __sysmgr_method_procfs_rsvd_5 (__ACTV_HIGHTABLE_START + 412)
#define __sysmgr_method_procfs_rsvd_4 (__ACTV_HIGHTABLE_START + 413)
#define __sysmgr_method_procfs_rsvd_3 (__ACTV_HIGHTABLE_START + 414)
#define __sysmgr_method_procfs_rsvd_2 (__ACTV_HIGHTABLE_START + 415)
#define __sysmgr_method_procfs_rsvd_1 (__ACTV_HIGHTABLE_START + 416)
#define __sysmgr_method_vm_get_region_num (__ACTV_HIGHTABLE_START + 417)
#define __sysmgr_method_vm_map_iomem (__ACTV_HIGHTABLE_START + 418)
#define __sysmgr_method_vm_map_to_process (__ACTV_HIGHTABLE_START + 419)
#define __sysmgr_method_vm_map_shmmem (__ACTV_HIGHTABLE_START + 420)
#define __sysmgr_method_vm_populate_map (__ACTV_HIGHTABLE_START + 421)
#define __sysmgr_method_vm_create_vm_vspace (__ACTV_HIGHTABLE_START + 422)
#define __sysmgr_method_vm_destroy_vm_vspace (__ACTV_HIGHTABLE_START + 423)
#define __sysmgr_method_vm_map_ipcshm (__ACTV_HIGHTABLE_START + 424)
#define __sysmgr_method_vm_unmap_ipcshm (__ACTV_HIGHTABLE_START + 425)
#define __sysmgr_method_vm_mmap (__ACTV_HIGHTABLE_START + 426)
#define __sysmgr_method_vm_munmap (__ACTV_HIGHTABLE_START + 427)
#define __sysmgr_method_vm_mmap_vdso (__ACTV_HIGHTABLE_START + 428)
#define __sysmgr_method_vm_gpa_to_hpa (__ACTV_HIGHTABLE_START + 429)
#define __sysmgr_method_vm_madvise (__ACTV_HIGHTABLE_START + 430)
#define __sysmgr_method_vm_mclone (__ACTV_HIGHTABLE_START + 431)
#define __sysmgr_method_vm_rsvd_1 (__ACTV_HIGHTABLE_START + 432)
#define __sysmgr_method_ns_unshare (__ACTV_HIGHTABLE_START + 433)
#define __sysmgr_method_ns_setns (__ACTV_HIGHTABLE_START + 434)
#define __sysmgr_method_ns_get (__ACTV_HIGHTABLE_START + 435)
#define __sysmgr_method_ns_put (__ACTV_HIGHTABLE_START + 436)
#define __sysmgr_method_guard_action (__ACTV_HIGHTABLE_START + 437)
#define __sysmgr_method_guard_sysrq (__ACTV_HIGHTABLE_START + 438)
#define __sysmgr_method_guard_alive (__ACTV_HIGHTABLE_START + 439)
#define __sysmgr_method_guard_rsvd_1 (__ACTV_HIGHTABLE_START + 440)
#define __sysmgr_method_iov_add_device (__ACTV_HIGHTABLE_START + 441)
#define __sysmgr_method_iov_attach_device (__ACTV_HIGHTABLE_START + 442)
#define __sysmgr_method_iov_vspace_bind (__ACTV_HIGHTABLE_START + 443)
#define __sysmgr_method_iov_vspace_unbind (__ACTV_HIGHTABLE_START + 444)
#define __sysmgr_method_iov_rsvd_4 (__ACTV_HIGHTABLE_START + 445)
#define __sysmgr_method_iov_rsvd_3 (__ACTV_HIGHTABLE_START + 446)
#define __sysmgr_method_iov_rsvd_2 (__ACTV_HIGHTABLE_START + 447)
#define __sysmgr_method_iov_rsvd_1 (__ACTV_HIGHTABLE_START + 448)
#define __sysmgr_method_resmgr_mount (__ACTV_HIGHTABLE_START + 449)
#define __sysmgr_method_resmgr_umount (__ACTV_HIGHTABLE_START + 450)
#define __sysmgr_method_resmgr_create (__ACTV_HIGHTABLE_START + 451)
#define __sysmgr_method_resmgr_remove (__ACTV_HIGHTABLE_START + 452)
#define __sysmgr_method_resmgr_read (__ACTV_HIGHTABLE_START + 453)
#define __sysmgr_method_resmgr_write (__ACTV_HIGHTABLE_START + 454)
#define __sysmgr_method_resmgr_mem_mapping (__ACTV_HIGHTABLE_START + 455)
#define __sysmgr_method_resmgr_mem_fs_charge (__ACTV_HIGHTABLE_START + 456)
#define __sysmgr_method_resmgr_mem_fs_uncharge (__ACTV_HIGHTABLE_START + 457)
#define __sysmgr_method_module_grant_ctrl (__ACTV_HIGHTABLE_START + 458)
#define __sysmgr_method_module_rsvd_1 (__ACTV_HIGHTABLE_START + 459)
#define __sysmgr_method_entropy_read (__ACTV_HIGHTABLE_START + 460)
#define __sysmgr_method_entropy_rsvd_1 (__ACTV_HIGHTABLE_START + 461)
#define __sysmgr_method_kbox_query_device (__ACTV_HIGHTABLE_START + 462)
#define __sysmgr_method_kbox_query_region (__ACTV_HIGHTABLE_START + 463)
#define __sysmgr_method_kbox_open_region (__ACTV_HIGHTABLE_START + 464)
#define __sysmgr_method_kbox_close_region (__ACTV_HIGHTABLE_START + 465)
#define __sysmgr_method_kbox_create_region (__ACTV_HIGHTABLE_START + 466)
#define __sysmgr_method_kbox_delete_dynamic_regions (__ACTV_HIGHTABLE_START + 467)
#define __sysmgr_method_kbox_rsvd_2 (__ACTV_HIGHTABLE_START + 468)
#define __sysmgr_method_kbox_rsvd_1 (__ACTV_HIGHTABLE_START + 469)
#define __sysmgr_method_dump_thread (__ACTV_HIGHTABLE_START + 470)
#define __sysmgr_method_dump_rsvd_1 (__ACTV_HIGHTABLE_START + 471)
#define __sysmgr_method_linuxemu_install_handler (__ACTV_HIGHTABLE_START + 472)
#define __sysmgr_method_linuxemu_set_callsite (__ACTV_HIGHTABLE_START + 473)
#define __sysmgr_method_linuxemu_rsvd_2 (__ACTV_HIGHTABLE_START + 474)
#define __sysmgr_method_linuxemu_rsvd_1 (__ACTV_HIGHTABLE_START + 475)
#define __sysmgr_method_livepatch_register_target (__ACTV_HIGHTABLE_START + 476)
#define __sysmgr_method_livepatch_unregister_target (__ACTV_HIGHTABLE_START + 477)
#define __sysmgr_method_livepatch_load (__ACTV_HIGHTABLE_START + 478)
#define __sysmgr_method_livepatch_unload (__ACTV_HIGHTABLE_START + 479)
#define __sysmgr_method_livepatch_enable (__ACTV_HIGHTABLE_START + 480)
#define __sysmgr_method_livepatch_disable (__ACTV_HIGHTABLE_START + 481)
#define __sysmgr_method_livepatch_list (__ACTV_HIGHTABLE_START + 482)
#define __sysmgr_method_livepatch_reserved (__ACTV_HIGHTABLE_START + 483)
#define __sysmgr_method_livepatch_rsvd_8 (__ACTV_HIGHTABLE_START + 484)
#define __sysmgr_method_livepatch_rsvd_7 (__ACTV_HIGHTABLE_START + 485)
#define __sysmgr_method_livepatch_rsvd_6 (__ACTV_HIGHTABLE_START + 486)
#define __sysmgr_method_livepatch_rsvd_5 (__ACTV_HIGHTABLE_START + 487)
#define __sysmgr_method_livepatch_rsvd_4 (__ACTV_HIGHTABLE_START + 488)
#define __sysmgr_method_livepatch_rsvd_3 (__ACTV_HIGHTABLE_START + 489)
#define __sysmgr_method_livepatch_rsvd_2 (__ACTV_HIGHTABLE_START + 490)
#define __sysmgr_method_livepatch_rsvd_1 (__ACTV_HIGHTABLE_START + 491)
#define __sysmgr_method_perf_create_session (__ACTV_HIGHTABLE_START + 492)
#define __sysmgr_method_perf_config_event (__ACTV_HIGHTABLE_START + 493)
#define __sysmgr_method_perf_start_session (__ACTV_HIGHTABLE_START + 494)
#define __sysmgr_method_perf_stop_session (__ACTV_HIGHTABLE_START + 495)
#define __sysmgr_method_perf_release_session (__ACTV_HIGHTABLE_START + 496)
#define __sysmgr_method_perf_read_data (__ACTV_HIGHTABLE_START + 497)
#define __sysmgr_method_perf_rsvd_2 (__ACTV_HIGHTABLE_START + 498)
#define __sysmgr_method_perf_rsvd_1 (__ACTV_HIGHTABLE_START + 499)
#define __sysmgr_method_hmspif_ksus_user_start_session (__ACTV_HIGHTABLE_START + 500)
#define __sysmgr_method_hmspif_ksus_user_create_region (__ACTV_HIGHTABLE_START + 501)
#define __sysmgr_method_hmspif_ksus_user_attach_process (__ACTV_HIGHTABLE_START + 502)
#define __sysmgr_method_hmspif_ksus_user_finish_session (__ACTV_HIGHTABLE_START + 503)
#define __sysmgr_method_hmspif_paju_user_cmd (__ACTV_HIGHTABLE_START + 504)
#define __sysmgr_method_hmspif_rsvd_3 (__ACTV_HIGHTABLE_START + 505)
#define __sysmgr_method_hmspif_rsvd_2 (__ACTV_HIGHTABLE_START + 506)
#define __sysmgr_method_hmspif_rsvd_1 (__ACTV_HIGHTABLE_START + 507)
#define __sysmgr_method_dynlog_query_by_tid (__ACTV_HIGHTABLE_START + 508)
#define __sysmgr_method_dynlog_read_by_tid (__ACTV_HIGHTABLE_START + 509)
#define __sysmgr_method_dynlog_update_by_tid (__ACTV_HIGHTABLE_START + 510)
#define __sysmgr_method_dynlog_query_by_lspace (__ACTV_HIGHTABLE_START + 511)
#define __sysmgr_method_dynlog_read_by_lspace (__ACTV_HIGHTABLE_START + 512)
#define __sysmgr_method_dynlog_update_by_lspace (__ACTV_HIGHTABLE_START + 513)
#define __sysmgr_method_dynlog_rsvd_2 (__ACTV_HIGHTABLE_START + 514)
#define __sysmgr_method_dynlog_rsvd_1 (__ACTV_HIGHTABLE_START + 515)
#define __sysmgr_method_sysfs_read (__ACTV_HIGHTABLE_START + 516)
#define __sysmgr_method_sysfs_write (__ACTV_HIGHTABLE_START + 517)
#define __sysmgr_method_ftrace_modify_code (__ACTV_HIGHTABLE_START + 518)
#define __sysmgr_method_ftrace_rsvd_1 (__ACTV_HIGHTABLE_START + 519)
#define __sysmgr_method_hmtrace_alloc_eid (__ACTV_HIGHTABLE_START + 520)
#define __sysmgr_method_hmtrace_free_eid (__ACTV_HIGHTABLE_START + 521)
#define __sysmgr_method_hmtrace_rsvd_14 (__ACTV_HIGHTABLE_START + 522)
#define __sysmgr_method_hmtrace_rsvd_13 (__ACTV_HIGHTABLE_START + 523)
#define __sysmgr_method_hmtrace_rsvd_12 (__ACTV_HIGHTABLE_START + 524)
#define __sysmgr_method_hmtrace_rsvd_11 (__ACTV_HIGHTABLE_START + 525)
#define __sysmgr_method_hmtrace_rsvd_10 (__ACTV_HIGHTABLE_START + 526)
#define __sysmgr_method_hmtrace_rsvd_9 (__ACTV_HIGHTABLE_START + 527)
#define __sysmgr_method_hmtrace_rsvd_8 (__ACTV_HIGHTABLE_START + 528)
#define __sysmgr_method_hmtrace_rsvd_7 (__ACTV_HIGHTABLE_START + 529)
#define __sysmgr_method_hmtrace_rsvd_6 (__ACTV_HIGHTABLE_START + 530)
#define __sysmgr_method_hmtrace_rsvd_5 (__ACTV_HIGHTABLE_START + 531)
#define __sysmgr_method_hmtrace_rsvd_4 (__ACTV_HIGHTABLE_START + 532)
#define __sysmgr_method_hmtrace_rsvd_3 (__ACTV_HIGHTABLE_START + 533)
#define __sysmgr_method_hmtrace_rsvd_2 (__ACTV_HIGHTABLE_START + 534)
#define __sysmgr_method_hmtrace_rsvd_1 (__ACTV_HIGHTABLE_START + 535)
#define __sysmgr_method_inject_fault (__ACTV_HIGHTABLE_START + 536)
#define __sysmgr_method_inject_rsvd_1 (__ACTV_HIGHTABLE_START + 537)
#define __sysmgr_method_proc_capget (__ACTV_HIGHTABLE_START + 538)
#define __sysmgr_method_proc_capset (__ACTV_HIGHTABLE_START + 539)
#define __sysmgr_method_proc_cap_bset_drop (__ACTV_HIGHTABLE_START + 540)
#define __sysmgr_method_proc_cap_ambient_clear (__ACTV_HIGHTABLE_START + 541)
#define __sysmgr_method_proc_cap_ambient_add (__ACTV_HIGHTABLE_START + 542)
#define __sysmgr_method_proc_cap_ambient_cut (__ACTV_HIGHTABLE_START + 543)
#define __sysmgr_method_proc_cap_sbits (__ACTV_HIGHTABLE_START + 544)
#define __sysmgr_method_proc_cap_keep (__ACTV_HIGHTABLE_START + 545)
#define __sysmgr_method_posixcaps_rsvd_8 (__ACTV_HIGHTABLE_START + 546)
#define __sysmgr_method_posixcaps_rsvd_7 (__ACTV_HIGHTABLE_START + 547)
#define __sysmgr_method_posixcaps_rsvd_6 (__ACTV_HIGHTABLE_START + 548)
#define __sysmgr_method_posixcaps_rsvd_5 (__ACTV_HIGHTABLE_START + 549)
#define __sysmgr_method_posixcaps_rsvd_4 (__ACTV_HIGHTABLE_START + 550)
#define __sysmgr_method_posixcaps_rsvd_3 (__ACTV_HIGHTABLE_START + 551)
#define __sysmgr_method_posixcaps_rsvd_2 (__ACTV_HIGHTABLE_START + 552)
#define __sysmgr_method_posixcaps_rsvd_1 (__ACTV_HIGHTABLE_START + 553)
#define __sysmgr_method_ipc_shmget (__ACTV_HIGHTABLE_START + 554)
#define __sysmgr_method_ipc_shmat (__ACTV_HIGHTABLE_START + 555)
#define __sysmgr_method_ipc_shmdt (__ACTV_HIGHTABLE_START + 556)
#define __sysmgr_method_ipc_shmctl (__ACTV_HIGHTABLE_START + 557)
#define __sysmgr_method_ipc_shmctl_get (__ACTV_HIGHTABLE_START + 558)
#define __sysmgr_method_ipc_msgget (__ACTV_HIGHTABLE_START + 559)
#define __sysmgr_method_ipc_msgsnd (__ACTV_HIGHTABLE_START + 560)
#define __sysmgr_method_ipc_msgrcv (__ACTV_HIGHTABLE_START + 561)
#define __sysmgr_method_ipc_msgctl (__ACTV_HIGHTABLE_START + 562)
#define __sysmgr_method_ipc_semget (__ACTV_HIGHTABLE_START + 563)
#define __sysmgr_method_ipc_semop (__ACTV_HIGHTABLE_START + 564)
#define __sysmgr_method_ipc_semctl (__ACTV_HIGHTABLE_START + 565)
#define __sysmgr_method_ipc_rsvd_4 (__ACTV_HIGHTABLE_START + 566)
#define __sysmgr_method_ipc_rsvd_3 (__ACTV_HIGHTABLE_START + 567)
#define __sysmgr_method_ipc_rsvd_2 (__ACTV_HIGHTABLE_START + 568)
#define __sysmgr_method_ipc_rsvd_1 (__ACTV_HIGHTABLE_START + 569)
#define __sysmgr_method_hack_procfs_status (__ACTV_HIGHTABLE_START + 570)
#define __sysmgr_method_hack_rsvd_1 (__ACTV_HIGHTABLE_START + 571)
#define __sysmgr_method_audit_notify_rule_update (__ACTV_HIGHTABLE_START + 572)
#define __sysmgr_method_key_install_keyring (__ACTV_HIGHTABLE_START + 573)
#define __sysmgr_method_key_lookup_keyring (__ACTV_HIGHTABLE_START + 574)
#define __sysmgr_method_key_rsvd_2 (__ACTV_HIGHTABLE_START + 575)
#define __sysmgr_method_key_rsvd_1 (__ACTV_HIGHTABLE_START + 576)
#define __sysmgr_method_cert_verify_path_and_chksum (__ACTV_HIGHTABLE_START + 577)
#define __sysmgr_method_cert_rsvd_3 (__ACTV_HIGHTABLE_START + 578)
#define __sysmgr_method_cert_rsvd_2 (__ACTV_HIGHTABLE_START + 579)
#define __sysmgr_method_cert_rsvd_1 (__ACTV_HIGHTABLE_START + 580)
#define __sysmgr_method_MAX_NOCOMPAT (__ACTV_HIGHTABLE_START + 581)
#define __sysmgr_method_MAX_COMPAT ((__ACTV_HIGHTABLE_START + 581) * 2)
raw_static_assert(sizeof(struct __actvret_hmcall_test_m1) < 512,
                hmcall_test_m1_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m2) < 512,
                hmcall_test_m2_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m3) < 512,
                hmcall_test_m3_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m4) < 512,
                hmcall_test_m4_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m5) < 512,
                hmcall_test_m5_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m6) < 512,
                hmcall_test_m6_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m7) < 512,
                hmcall_test_m7_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m8) < 512,
                hmcall_test_m8_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m9) < 512,
                hmcall_test_m9_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m10) < 512,
                hmcall_test_m10_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m11) < 512,
                hmcall_test_m11_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m12) < 512,
                hmcall_test_m12_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m13) < 512,
                hmcall_test_m13_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m14) < 512,
                hmcall_test_m14_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m15) < 512,
                hmcall_test_m15_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m16) < 512,
                hmcall_test_m16_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m17) < 512,
                hmcall_test_m17_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m18) < 512,
                hmcall_test_m18_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m19) < 512,
                hmcall_test_m19_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m20) < 512,
                hmcall_test_m20_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m21) < 512,
                hmcall_test_m21_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m22) < 512,
                hmcall_test_m22_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m23) < 512,
                hmcall_test_m23_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m24) < 512,
                hmcall_test_m24_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m25) < 512,
                hmcall_test_m25_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m26) < 512,
                hmcall_test_m26_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m27) < 512,
                hmcall_test_m27_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m28) < 512,
                hmcall_test_m28_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m29) < 512,
                hmcall_test_m29_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m30) < 512,
                hmcall_test_m30_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m31) < 512,
                hmcall_test_m31_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m32) < 512,
                hmcall_test_m32_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m33) < 512,
                hmcall_test_m33_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m34) < 512,
                hmcall_test_m34_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_test_m35) < 512,
                hmcall_test_m35_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_path_add_path) < 512,
                hmcall_path_add_path_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_path_grant_path) < 512,
                hmcall_path_grant_path_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_path_del_path) < 512,
                hmcall_path_del_path_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_path_acquire_path) < 512,
                hmcall_path_acquire_path_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_path_release_path) < 512,
                hmcall_path_release_path_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_path_stat) < 512,
                hmcall_path_stat_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_path_chmod) < 512,
                hmcall_path_chmod_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_shutdown) < 512,
                hmcall_sysctrl_shutdown_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_reboot) < 512,
                hmcall_sysctrl_reboot_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_sysconf_ulong) < 512,
                hmcall_sysctrl_sysconf_ulong_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_sysconf_string) < 512,
                hmcall_sysctrl_sysconf_string_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_uname) < 512,
                hmcall_sysctrl_uname_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_require) < 512,
                hmcall_sysctrl_require_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_sysinfo) < 512,
                hmcall_sysctrl_sysinfo_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_cpustat) < 512,
                hmcall_sysctrl_cpustat_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_attach_cpuctx) < 512,
                hmcall_sysctrl_attach_cpuctx_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_detach_cpuctx) < 512,
                hmcall_sysctrl_detach_cpuctx_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_check_cpuctx) < 512,
                hmcall_sysctrl_check_cpuctx_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_set_hostname) < 512,
                hmcall_sysctrl_set_hostname_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_set_klogport_level) < 512,
                hmcall_sysctrl_set_klogport_level_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_enable_klogport) < 512,
                hmcall_sysctrl_enable_klogport_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_disable_klogport) < 512,
                hmcall_sysctrl_disable_klogport_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_kev_read_event_number) < 512,
                hmcall_sysctrl_kev_read_event_number_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_kev_read_event_config) < 512,
                hmcall_sysctrl_kev_read_event_config_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_kev_set_enable) < 512,
                hmcall_sysctrl_kev_set_enable_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_kev_set_filter) < 512,
                hmcall_sysctrl_kev_set_filter_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_kev_print) < 512,
                hmcall_sysctrl_kev_print_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysctrl_kev_klog) < 512,
                hmcall_sysctrl_kev_klog_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_mmap) < 512,
                hmcall_mem_mmap_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_munmap) < 512,
                hmcall_mem_munmap_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_mremap) < 512,
                hmcall_mem_mremap_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_alloc_kmem) < 512,
                hmcall_mem_alloc_kmem_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_free_kmem) < 512,
                hmcall_mem_free_kmem_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_alloc_pmem) < 512,
                hmcall_mem_alloc_pmem_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_free_pmem) < 512,
                hmcall_mem_free_pmem_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_brk) < 512,
                hmcall_mem_brk_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_madvise) < 512,
                hmcall_mem_madvise_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_mprotect) < 512,
                hmcall_mem_mprotect_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_msync) < 512,
                hmcall_mem_msync_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_mlock) < 512,
                hmcall_mem_mlock_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_munlock) < 512,
                hmcall_mem_munlock_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_mlockall) < 512,
                hmcall_mem_mlockall_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_munlockall) < 512,
                hmcall_mem_munlockall_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_drop_file_cache) < 512,
                hmcall_mem_drop_file_cache_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_ioremap_prepare) < 512,
                hmcall_mem_ioremap_prepare_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_iomem_mmap_page) < 512,
                hmcall_mem_iomem_mmap_page_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_file_mapping_stat) < 512,
                hmcall_mem_file_mapping_stat_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_shm_open) < 512,
                hmcall_mem_shm_open_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_shm_open_anon) < 512,
                hmcall_mem_shm_open_anon_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_shm_unlink) < 512,
                hmcall_mem_shm_unlink_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_shm_unlink_anon) < 512,
                hmcall_mem_shm_unlink_anon_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_shm_close) < 512,
                hmcall_mem_shm_close_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_shm_check_owner) < 512,
                hmcall_mem_shm_check_owner_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_shm_reclaim_pages) < 512,
                hmcall_mem_shm_reclaim_pages_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_grant_shm_to_caller) < 512,
                hmcall_mem_grant_shm_to_caller_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_grant_shm_by_xref) < 512,
                hmcall_mem_grant_shm_by_xref_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_ashm_grant_trans) < 512,
                hmcall_mem_ashm_grant_trans_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_query_shm_info) < 512,
                hmcall_mem_query_shm_info_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_query_shm_paddr) < 512,
                hmcall_mem_query_shm_paddr_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_shm_dump_info) < 512,
                hmcall_mem_shm_dump_info_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_shm_chmod) < 512,
                hmcall_mem_shm_chmod_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_extend_ctable) < 512,
                hmcall_mem_extend_ctable_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_extend_utable) < 512,
                hmcall_mem_extend_utable_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_extend_rtable) < 512,
                hmcall_mem_extend_rtable_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_stat) < 512,
                hmcall_mem_stat_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_set_anon_name) < 512,
                hmcall_mem_set_anon_name_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_process_vm_access) < 512,
                hmcall_mem_process_vm_access_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_mincore) < 512,
                hmcall_mem_mincore_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_calculate) < 512,
                hmcall_mem_calculate_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_rmap_unmap_page) < 512,
                hmcall_mem_rmap_unmap_page_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_fs_stat_register) < 512,
                hmcall_mem_fs_stat_register_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_hugetlbfs_mount) < 512,
                hmcall_mem_hugetlbfs_mount_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_register_devhost) < 512,
                hmcall_mem_register_devhost_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_iomap_prepare) < 512,
                hmcall_mem_iomap_prepare_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_iomap_populate) < 512,
                hmcall_mem_iomap_populate_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_iomap_finish) < 512,
                hmcall_mem_iomap_finish_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_iomap_statpage) < 512,
                hmcall_mem_iomap_statpage_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_cma_dyn_init) < 512,
                hmcall_mem_cma_dyn_init_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_cma_alloc) < 512,
                hmcall_mem_cma_alloc_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mem_cma_free) < 512,
                hmcall_mem_cma_free_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_spawn) < 512,
                hmcall_proc_spawn_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_waitid) < 512,
                hmcall_proc_waitid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_wait4) < 512,
                hmcall_proc_wait4_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_exit) < 512,
                hmcall_proc_exit_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getpid) < 512,
                hmcall_proc_getpid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_pid_of) < 512,
                hmcall_proc_pid_of_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getppid) < 512,
                hmcall_proc_getppid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_cnode_idx_of) < 512,
                hmcall_proc_cnode_idx_of_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getpgid) < 512,
                hmcall_proc_getpgid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setpgid) < 512,
                hmcall_proc_setpgid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getsid) < 512,
                hmcall_proc_getsid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setsid) < 512,
                hmcall_proc_setsid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setfgpgrp) < 512,
                hmcall_proc_setfgpgrp_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getfgpgrp) < 512,
                hmcall_proc_getfgpgrp_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_mysid) < 512,
                hmcall_proc_mysid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_signal_fgpgrp) < 512,
                hmcall_proc_signal_fgpgrp_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setuid) < 512,
                hmcall_proc_setuid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getuid) < 512,
                hmcall_proc_getuid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_geteuid) < 512,
                hmcall_proc_geteuid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getresuid) < 512,
                hmcall_proc_getresuid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setreuid) < 512,
                hmcall_proc_setreuid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setresuid) < 512,
                hmcall_proc_setresuid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getgid) < 512,
                hmcall_proc_getgid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getegid) < 512,
                hmcall_proc_getegid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getresgid) < 512,
                hmcall_proc_getresgid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setregid) < 512,
                hmcall_proc_setregid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setgid) < 512,
                hmcall_proc_setgid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setresgid) < 512,
                hmcall_proc_setresgid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setgroups) < 512,
                hmcall_proc_setgroups_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getgroups) < 512,
                hmcall_proc_getgroups_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setfsuid) < 512,
                hmcall_proc_setfsuid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setfsgid) < 512,
                hmcall_proc_setfsgid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_stat) < 512,
                hmcall_proc_stat_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getrlimit) < 512,
                hmcall_proc_getrlimit_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_setrlimit) < 512,
                hmcall_proc_setrlimit_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_prlimit) < 512,
                hmcall_proc_prlimit_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_debug_thread) < 512,
                hmcall_proc_debug_thread_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_debug_wait_status) < 512,
                hmcall_proc_debug_wait_status_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_debug_vspace) < 512,
                hmcall_proc_debug_vspace_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_get_coredump) < 512,
                hmcall_proc_get_coredump_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_set_coredump) < 512,
                hmcall_proc_set_coredump_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_nsid_of_cnode_idx) < 512,
                hmcall_proc_nsid_of_cnode_idx_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_timer_create) < 512,
                hmcall_proc_timer_create_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_timer_settime) < 512,
                hmcall_proc_timer_settime_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_timer_gettime) < 512,
                hmcall_proc_timer_gettime_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_timer_delete) < 512,
                hmcall_proc_timer_delete_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_timer_getoverrun) < 512,
                hmcall_proc_timer_getoverrun_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_get_cputime) < 512,
                hmcall_proc_get_cputime_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_getrusage) < 512,
                hmcall_proc_getrusage_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_execve) < 512,
                hmcall_proc_execve_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_new_permission) < 512,
                hmcall_proc_new_permission_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_new_vspace_mmscd) < 512,
                hmcall_proc_new_vspace_mmscd_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_new_vspace) < 512,
                hmcall_proc_new_vspace_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_new_vm_mmscd) < 512,
                hmcall_proc_new_vm_mmscd_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_new_vm) < 512,
                hmcall_proc_new_vm_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_new_cpucontext_mmscd) < 512,
                hmcall_proc_new_cpucontext_mmscd_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_new_cpucontext) < 512,
                hmcall_proc_new_cpucontext_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_elf_load_info) < 512,
                hmcall_proc_elf_load_info_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_pm_config_add) < 512,
                hmcall_proc_pm_config_add_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_pm_config_cleanup) < 512,
                hmcall_proc_pm_config_cleanup_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_pm_dormancy_enter) < 512,
                hmcall_proc_pm_dormancy_enter_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_show_pte) < 512,
                hmcall_proc_show_pte_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_check_regs) < 512,
                hmcall_proc_check_regs_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_get_dumpable) < 512,
                hmcall_proc_get_dumpable_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_set_dumpable) < 512,
                hmcall_proc_set_dumpable_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_set_subreaper) < 512,
                hmcall_proc_set_subreaper_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_get_subreaper) < 512,
                hmcall_proc_get_subreaper_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_set_privs) < 512,
                hmcall_proc_set_privs_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_get_privs) < 512,
                hmcall_proc_get_privs_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_clone) < 512,
                hmcall_proc_clone_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_dyn_libs_data) < 512,
                hmcall_proc_dyn_libs_data_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_register_event) < 512,
                hmcall_proc_register_event_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_affinity_get) < 512,
                hmcall_proc_affinity_get_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mqueue_open) < 512,
                hmcall_mqueue_open_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mqueue_send) < 512,
                hmcall_mqueue_send_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mqueue_recv) < 512,
                hmcall_mqueue_recv_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mqueue_getsetattr) < 512,
                hmcall_mqueue_getsetattr_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mqueue_close) < 512,
                hmcall_mqueue_close_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mqueue_unlink) < 512,
                hmcall_mqueue_unlink_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_mqueue_chmod) < 512,
                hmcall_mqueue_chmod_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_exit) < 512,
                hmcall_thread_exit_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_kill) < 512,
                hmcall_thread_kill_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_gettid) < 512,
                hmcall_thread_gettid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_tid2cref) < 512,
                hmcall_thread_tid2cref_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_set_tid_address) < 512,
                hmcall_thread_set_tid_address_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_setname) < 512,
                hmcall_thread_setname_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_set_pdeath_signal) < 512,
                hmcall_thread_set_pdeath_signal_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_get_pdeath_signal) < 512,
                hmcall_thread_get_pdeath_signal_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_set_robust_list) < 512,
                hmcall_thread_set_robust_list_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_get_robust_list) < 512,
                hmcall_thread_get_robust_list_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_freeze) < 512,
                hmcall_thread_freeze_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_thaw) < 512,
                hmcall_thread_thaw_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_setpersonality) < 512,
                hmcall_thread_setpersonality_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_getpersonality) < 512,
                hmcall_thread_getpersonality_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_bind_info) < 512,
                hmcall_thread_bind_info_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_set_tickless) < 512,
                hmcall_thread_set_tickless_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_set_runqueue) < 512,
                hmcall_thread_set_runqueue_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_sched_setparam) < 512,
                hmcall_thread_sched_setparam_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_sched_getparam) < 512,
                hmcall_thread_sched_getparam_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_sched_setscheduler) < 512,
                hmcall_thread_sched_setscheduler_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_sched_getscheduler) < 512,
                hmcall_thread_sched_getscheduler_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_getseq) < 512,
                hmcall_thread_getseq_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_setpriority) < 512,
                hmcall_thread_setpriority_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_getpriority) < 512,
                hmcall_thread_getpriority_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_sched_getattr) < 512,
                hmcall_thread_sched_getattr_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_sched_get_interval_rr) < 512,
                hmcall_thread_sched_get_interval_rr_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_sched_setaffinity) < 512,
                hmcall_thread_sched_setaffinity_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_sched_getaffinity) < 512,
                hmcall_thread_sched_getaffinity_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_update_vnotify_futex) < 512,
                hmcall_thread_update_vnotify_futex_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_futex_wait) < 512,
                hmcall_thread_futex_wait_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_futex_wake) < 512,
                hmcall_thread_futex_wake_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_thread_futex_requeue) < 512,
                hmcall_thread_futex_requeue_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_time_set_clock) < 512,
                hmcall_time_set_clock_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_time_set_tock_policy) < 512,
                hmcall_time_set_tock_policy_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_kill) < 512,
                hmcall_signal_kill_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_tkill) < 512,
                hmcall_signal_tkill_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_tgkill) < 512,
                hmcall_signal_tgkill_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_sigqueue) < 512,
                hmcall_signal_sigqueue_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_pthread_sigqueue) < 512,
                hmcall_signal_pthread_sigqueue_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_set_signal_handler) < 512,
                hmcall_signal_set_signal_handler_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_read_signalfd) < 512,
                hmcall_signal_read_signalfd_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_read_signalevents) < 512,
                hmcall_signal_read_signalevents_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_epoll_ctrl) < 512,
                hmcall_signal_epoll_ctrl_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_init) < 512,
                hmcall_signal_init_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_set_sigmask) < 512,
                hmcall_signal_set_sigmask_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_get_pending_signal) < 512,
                hmcall_signal_get_pending_signal_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_drop_pending_signal) < 512,
                hmcall_signal_drop_pending_signal_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_set_sigstack) < 512,
                hmcall_signal_set_sigstack_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_set_sigaction_mask) < 512,
                hmcall_signal_set_sigaction_mask_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_timedwait) < 512,
                hmcall_signal_timedwait_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_signal_restore) < 512,
                hmcall_signal_restore_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_irq_grant_ctrl) < 512,
                hmcall_irq_grant_ctrl_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_irq_default_phyctrl_id) < 512,
                hmcall_irq_default_phyctrl_id_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_irq_to_logic) < 512,
                hmcall_irq_to_logic_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_irq_revoke_ctrl) < 512,
                hmcall_irq_revoke_ctrl_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_irq_version_get) < 512,
                hmcall_irq_version_get_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_irq_version_check) < 512,
                hmcall_irq_version_check_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_irq_stat) < 512,
                hmcall_irq_stat_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_irq_suspend) < 512,
                hmcall_irq_suspend_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_irq_resume) < 512,
                hmcall_irq_resume_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sec_cred_cfg) < 512,
                hmcall_sec_cred_cfg_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sec_setexeccon) < 512,
                hmcall_sec_setexeccon_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sec_shconf_set_field) < 512,
                hmcall_sec_shconf_set_field_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sec_crlread) < 512,
                hmcall_sec_crlread_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sec_crlwrite) < 512,
                hmcall_sec_crlwrite_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sec_umask) < 512,
                hmcall_sec_umask_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_simple_read) < 512,
                hmcall_procfs_simple_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_simple_pid_read) < 512,
                hmcall_procfs_simple_pid_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_simple_tid_read) < 512,
                hmcall_procfs_simple_tid_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_pid_read) < 512,
                hmcall_procfs_pid_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_tid_read) < 512,
                hmcall_procfs_tid_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_read) < 512,
                hmcall_procfs_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_pid_write) < 512,
                hmcall_procfs_pid_write_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_tid_write) < 512,
                hmcall_procfs_tid_write_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_write) < 512,
                hmcall_procfs_write_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_yama_write) < 512,
                hmcall_procfs_yama_write_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_get_allpids) < 512,
                hmcall_procfs_get_allpids_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_get_alltids) < 512,
                hmcall_procfs_get_alltids_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_get_irq_names) < 512,
                hmcall_procfs_get_irq_names_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_simple_irq_read) < 512,
                hmcall_procfs_simple_irq_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_irq_read) < 512,
                hmcall_procfs_irq_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_procfs_irq_write) < 512,
                hmcall_procfs_irq_write_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_get_region_num) < 512,
                hmcall_vm_get_region_num_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_map_iomem) < 512,
                hmcall_vm_map_iomem_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_map_to_process) < 512,
                hmcall_vm_map_to_process_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_map_shmmem) < 512,
                hmcall_vm_map_shmmem_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_populate_map) < 512,
                hmcall_vm_populate_map_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_create_vm_vspace) < 512,
                hmcall_vm_create_vm_vspace_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_destroy_vm_vspace) < 512,
                hmcall_vm_destroy_vm_vspace_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_map_ipcshm) < 512,
                hmcall_vm_map_ipcshm_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_unmap_ipcshm) < 512,
                hmcall_vm_unmap_ipcshm_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_mmap) < 512,
                hmcall_vm_mmap_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_munmap) < 512,
                hmcall_vm_munmap_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_mmap_vdso) < 512,
                hmcall_vm_mmap_vdso_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_gpa_to_hpa) < 512,
                hmcall_vm_gpa_to_hpa_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_madvise) < 512,
                hmcall_vm_madvise_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_vm_mclone) < 512,
                hmcall_vm_mclone_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ns_unshare) < 512,
                hmcall_ns_unshare_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ns_setns) < 512,
                hmcall_ns_setns_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ns_get) < 512,
                hmcall_ns_get_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ns_put) < 512,
                hmcall_ns_put_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_guard_action) < 512,
                hmcall_guard_action_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_guard_sysrq) < 512,
                hmcall_guard_sysrq_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_guard_alive) < 512,
                hmcall_guard_alive_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_iov_add_device) < 512,
                hmcall_iov_add_device_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_iov_attach_device) < 512,
                hmcall_iov_attach_device_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_iov_vspace_bind) < 512,
                hmcall_iov_vspace_bind_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_iov_vspace_unbind) < 512,
                hmcall_iov_vspace_unbind_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_resmgr_mount) < 512,
                hmcall_resmgr_mount_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_resmgr_umount) < 512,
                hmcall_resmgr_umount_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_resmgr_create) < 512,
                hmcall_resmgr_create_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_resmgr_remove) < 512,
                hmcall_resmgr_remove_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_resmgr_read) < 512,
                hmcall_resmgr_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_resmgr_write) < 512,
                hmcall_resmgr_write_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_resmgr_mem_mapping) < 512,
                hmcall_resmgr_mem_mapping_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_resmgr_mem_fs_charge) < 512,
                hmcall_resmgr_mem_fs_charge_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_resmgr_mem_fs_uncharge) < 512,
                hmcall_resmgr_mem_fs_uncharge_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_module_grant_ctrl) < 512,
                hmcall_module_grant_ctrl_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_entropy_read) < 512,
                hmcall_entropy_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_kbox_query_device) < 512,
                hmcall_kbox_query_device_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_kbox_query_region) < 512,
                hmcall_kbox_query_region_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_kbox_open_region) < 512,
                hmcall_kbox_open_region_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_kbox_close_region) < 512,
                hmcall_kbox_close_region_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_kbox_create_region) < 512,
                hmcall_kbox_create_region_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_kbox_delete_dynamic_regions) < 512,
                hmcall_kbox_delete_dynamic_regions_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_dump_thread) < 512,
                hmcall_dump_thread_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_linuxemu_install_handler) < 512,
                hmcall_linuxemu_install_handler_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_linuxemu_set_callsite) < 512,
                hmcall_linuxemu_set_callsite_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_livepatch_register_target) < 512,
                hmcall_livepatch_register_target_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_livepatch_unregister_target) < 512,
                hmcall_livepatch_unregister_target_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_livepatch_load) < 512,
                hmcall_livepatch_load_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_livepatch_unload) < 512,
                hmcall_livepatch_unload_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_livepatch_enable) < 512,
                hmcall_livepatch_enable_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_livepatch_disable) < 512,
                hmcall_livepatch_disable_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_livepatch_list) < 512,
                hmcall_livepatch_list_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_livepatch_reserved) < 512,
                hmcall_livepatch_reserved_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_perf_create_session) < 512,
                hmcall_perf_create_session_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_perf_config_event) < 512,
                hmcall_perf_config_event_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_perf_start_session) < 512,
                hmcall_perf_start_session_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_perf_stop_session) < 512,
                hmcall_perf_stop_session_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_perf_release_session) < 512,
                hmcall_perf_release_session_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_perf_read_data) < 512,
                hmcall_perf_read_data_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_hmspif_ksus_user_start_session) < 512,
                hmcall_hmspif_ksus_user_start_session_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_hmspif_ksus_user_create_region) < 512,
                hmcall_hmspif_ksus_user_create_region_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_hmspif_ksus_user_attach_process) < 512,
                hmcall_hmspif_ksus_user_attach_process_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_hmspif_ksus_user_finish_session) < 512,
                hmcall_hmspif_ksus_user_finish_session_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_hmspif_paju_user_cmd) < 512,
                hmcall_hmspif_paju_user_cmd_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_dynlog_query_by_tid) < 512,
                hmcall_dynlog_query_by_tid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_dynlog_read_by_tid) < 512,
                hmcall_dynlog_read_by_tid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_dynlog_update_by_tid) < 512,
                hmcall_dynlog_update_by_tid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_dynlog_query_by_lspace) < 512,
                hmcall_dynlog_query_by_lspace_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_dynlog_read_by_lspace) < 512,
                hmcall_dynlog_read_by_lspace_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_dynlog_update_by_lspace) < 512,
                hmcall_dynlog_update_by_lspace_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysfs_read) < 512,
                hmcall_sysfs_read_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_sysfs_write) < 512,
                hmcall_sysfs_write_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ftrace_modify_code) < 512,
                hmcall_ftrace_modify_code_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_hmtrace_alloc_eid) < 512,
                hmcall_hmtrace_alloc_eid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_hmtrace_free_eid) < 512,
                hmcall_hmtrace_free_eid_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_inject_fault) < 512,
                hmcall_inject_fault_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_capget) < 512,
                hmcall_proc_capget_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_capset) < 512,
                hmcall_proc_capset_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_cap_bset_drop) < 512,
                hmcall_proc_cap_bset_drop_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_cap_ambient_clear) < 512,
                hmcall_proc_cap_ambient_clear_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_cap_ambient_add) < 512,
                hmcall_proc_cap_ambient_add_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_cap_ambient_cut) < 512,
                hmcall_proc_cap_ambient_cut_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_cap_sbits) < 512,
                hmcall_proc_cap_sbits_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_proc_cap_keep) < 512,
                hmcall_proc_cap_keep_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ipc_shmget) < 512,
                hmcall_ipc_shmget_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ipc_shmat) < 512,
                hmcall_ipc_shmat_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ipc_shmdt) < 512,
                hmcall_ipc_shmdt_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ipc_shmctl) < 512,
                hmcall_ipc_shmctl_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ipc_shmctl_get) < 512,
                hmcall_ipc_shmctl_get_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ipc_msgget) < 512,
                hmcall_ipc_msgget_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ipc_msgsnd) < 512,
                hmcall_ipc_msgsnd_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ipc_msgrcv) < 512,
                hmcall_ipc_msgrcv_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ipc_msgctl) < 512,
                hmcall_ipc_msgctl_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ipc_semget) < 512,
                hmcall_ipc_semget_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ipc_semop) < 512,
                hmcall_ipc_semop_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_ipc_semctl) < 512,
                hmcall_ipc_semctl_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_hack_procfs_status) < 512,
                hmcall_hack_procfs_status_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_audit_notify_rule_update) < 512,
                hmcall_audit_notify_rule_update_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_key_install_keyring) < 512,
                hmcall_key_install_keyring_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_key_lookup_keyring) < 512,
                hmcall_key_lookup_keyring_too_many_actvret_data);
raw_static_assert(sizeof(struct __actvret_hmcall_cert_verify_path_and_chksum) < 512,
                hmcall_cert_verify_path_and_chksum_too_many_actvret_data);
raw_static_assert(sizeof(union __actvret_hmcall) < 512,
        hmcall_too_many_actvret_data);
extern int __actvcall_hmcall_test_m1(unsigned long long __rpc_info, void *__buf, const void *a, int b, unsigned long c, unsigned long long x);


extern int __actvcapcall_hmcall_test_m1(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *a, int b, unsigned long c, unsigned long long x);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m1(bool is_xact_fwd, bool is_xact_allow_refwd, const void *a, int b, unsigned long c, unsigned long long x, struct __actvret_hmcall_test_m1 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m1;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m1(rpc_info, __ret, a, b, c, x);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m1(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *a, int b, unsigned long c, unsigned long long x, struct __actvret_hmcall_test_m1 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m1;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m1(__rref, rpc_info, __ret, a, b, c, x);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m1(const void *a, int b, unsigned long c, unsigned long long x, struct __actvret_hmcall_test_m1 *__ret)
{
	return actvxactcall_hmcall_test_m1(false, false, a, b, c, x, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m1(rref_t __rref, const void *a, int b, unsigned long c, unsigned long long x, struct __actvret_hmcall_test_m1 *__ret)
{
	return actvxactcapcall_hmcall_test_m1(false, false, __rref, a, b, c, x, __ret);
}

extern unsigned long __actvcall_hmcall_test_m2(unsigned long long __rpc_info, void *__buf, int z);


extern unsigned long __actvcapcall_hmcall_test_m2(rref_t __rref, unsigned long long __rpc_info, void *__buf, int z);


static inline unsigned long __attribute__((always_inline)) actvxactcall_hmcall_test_m2(bool is_xact_fwd, bool is_xact_allow_refwd, int z, struct __actvret_hmcall_test_m2 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m2;
	unsigned long __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m2(rpc_info, __ret, z);
	} while (__res == (unsigned long)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline unsigned long __attribute__((always_inline)) actvxactcapcall_hmcall_test_m2(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int z, struct __actvret_hmcall_test_m2 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m2;
	unsigned long __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m2(__rref, rpc_info, __ret, z);
	} while (__res == (unsigned long)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline unsigned long __attribute__((always_inline)) actvcall_hmcall_test_m2(int z, struct __actvret_hmcall_test_m2 *__ret)
{
	return actvxactcall_hmcall_test_m2(false, false, z, __ret);
}

static inline unsigned long __attribute__((always_inline)) actvcapcall_hmcall_test_m2(rref_t __rref, int z, struct __actvret_hmcall_test_m2 *__ret)
{
	return actvxactcapcall_hmcall_test_m2(false, false, __rref, z, __ret);
}

extern int __actvcall_hmcall_test_m3(unsigned long long __rpc_info, void *__buf, int v1, const void *send_buf, unsigned long buf_len);


extern int __actvcapcall_hmcall_test_m3(rref_t __rref, unsigned long long __rpc_info, void *__buf, int v1, const void *send_buf, unsigned long buf_len);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m3(bool is_xact_fwd, bool is_xact_allow_refwd, int v1, const void *send_buf, unsigned long buf_len)
{
	const unsigned long __callno = __sysmgr_method_test_m3;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m3(rpc_info, NULL, v1, send_buf, buf_len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m3(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int v1, const void *send_buf, unsigned long buf_len)
{
	const unsigned long __callno = __sysmgr_method_test_m3;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m3(__rref, rpc_info, NULL, v1, send_buf, buf_len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m3(int v1, const void *send_buf, unsigned long buf_len)
{
	return actvxactcall_hmcall_test_m3(false, false, v1, send_buf, buf_len);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m3(rref_t __rref, int v1, const void *send_buf, unsigned long buf_len)
{
	return actvxactcapcall_hmcall_test_m3(false, false, __rref, v1, send_buf, buf_len);
}

extern int __actvcall_hmcall_test_m4(unsigned long long __rpc_info, void *__buf, int v1, struct sysif_data v2);


extern int __actvcapcall_hmcall_test_m4(rref_t __rref, unsigned long long __rpc_info, void *__buf, int v1, struct sysif_data v2);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m4(bool is_xact_fwd, bool is_xact_allow_refwd, int v1, struct sysif_data v2)
{
	const unsigned long __callno = __sysmgr_method_test_m4;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysif_data), __arch_actv_rpc_stksz_alignment(struct sysif_data));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m4(rpc_info, NULL, v1, v2);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m4(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int v1, struct sysif_data v2)
{
	const unsigned long __callno = __sysmgr_method_test_m4;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysif_data), __arch_actv_rpc_stksz_alignment(struct sysif_data));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m4(__rref, rpc_info, NULL, v1, v2);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m4(int v1, struct sysif_data v2)
{
	return actvxactcall_hmcall_test_m4(false, false, v1, v2);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m4(rref_t __rref, int v1, struct sysif_data v2)
{
	return actvxactcapcall_hmcall_test_m4(false, false, __rref, v1, v2);
}

extern int __actvcall_hmcall_test_m5(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_test_m5(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m5(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_test_m5 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m5;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m5(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m5(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_test_m5 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m5;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m5(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m5(struct __actvret_hmcall_test_m5 *__ret)
{
	return actvxactcall_hmcall_test_m5(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m5(rref_t __rref, struct __actvret_hmcall_test_m5 *__ret)
{
	return actvxactcapcall_hmcall_test_m5(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_test_m6(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_test_m6(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m6(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_test_m6 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m6;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m6(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m6(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_test_m6 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m6;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m6(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m6(struct __actvret_hmcall_test_m6 *__ret)
{
	return actvxactcall_hmcall_test_m6(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m6(rref_t __rref, struct __actvret_hmcall_test_m6 *__ret)
{
	return actvxactcapcall_hmcall_test_m6(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_test_m7(unsigned long long __rpc_info, void *__buf, const void *send_buf, unsigned long buf_len);


extern int __actvcapcall_hmcall_test_m7(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *send_buf, unsigned long buf_len);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m7(bool is_xact_fwd, bool is_xact_allow_refwd, const void *send_buf, unsigned long buf_len)
{
	const unsigned long __callno = __sysmgr_method_test_m7;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m7(rpc_info, NULL, send_buf, buf_len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m7(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *send_buf, unsigned long buf_len)
{
	const unsigned long __callno = __sysmgr_method_test_m7;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m7(__rref, rpc_info, NULL, send_buf, buf_len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m7(const void *send_buf, unsigned long buf_len)
{
	return actvxactcall_hmcall_test_m7(false, false, send_buf, buf_len);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m7(rref_t __rref, const void *send_buf, unsigned long buf_len)
{
	return actvxactcapcall_hmcall_test_m7(false, false, __rref, send_buf, buf_len);
}

extern int __actvcall_hmcall_test_m8(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_test_m8(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m8(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_test_m8;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m8(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m8(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_test_m8;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m8(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m8(void)
{
	return actvxactcall_hmcall_test_m8(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m8(rref_t __rref)
{
	return actvxactcapcall_hmcall_test_m8(false, false, __rref);
}

extern int __actvcall_hmcall_test_m9(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_test_m9(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m9(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_test_m9;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m9(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m9(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_test_m9;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m9(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m9(void)
{
	return actvxactcall_hmcall_test_m9(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m9(rref_t __rref)
{
	return actvxactcapcall_hmcall_test_m9(false, false, __rref);
}

extern int __actvcall_hmcall_test_m10(unsigned long long __rpc_info, void *__buf, int a, unsigned long b);


extern int __actvcapcall_hmcall_test_m10(rref_t __rref, unsigned long long __rpc_info, void *__buf, int a, unsigned long b);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m10(bool is_xact_fwd, bool is_xact_allow_refwd, int a, unsigned long b)
{
	const unsigned long __callno = __sysmgr_method_test_m10;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m10(rpc_info, NULL, a, b);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m10(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int a, unsigned long b)
{
	const unsigned long __callno = __sysmgr_method_test_m10;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m10(__rref, rpc_info, NULL, a, b);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m10(int a, unsigned long b)
{
	return actvxactcall_hmcall_test_m10(false, false, a, b);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m10(rref_t __rref, int a, unsigned long b)
{
	return actvxactcapcall_hmcall_test_m10(false, false, __rref, a, b);
}

extern int __actvcall_hmcall_test_m11(unsigned long long __rpc_info, void *__buf, struct sysif_data data);


extern int __actvcapcall_hmcall_test_m11(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct sysif_data data);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m11(bool is_xact_fwd, bool is_xact_allow_refwd, struct sysif_data data)
{
	const unsigned long __callno = __sysmgr_method_test_m11;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysif_data), __arch_actv_rpc_stksz_alignment(struct sysif_data));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m11(rpc_info, NULL, data);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m11(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct sysif_data data)
{
	const unsigned long __callno = __sysmgr_method_test_m11;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysif_data), __arch_actv_rpc_stksz_alignment(struct sysif_data));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m11(__rref, rpc_info, NULL, data);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m11(struct sysif_data data)
{
	return actvxactcall_hmcall_test_m11(false, false, data);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m11(rref_t __rref, struct sysif_data data)
{
	return actvxactcapcall_hmcall_test_m11(false, false, __rref, data);
}

extern int __actvcall_hmcall_test_m12(unsigned long long __rpc_info, void *__buf, int a1, unsigned long long a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, struct sysif_data data);


extern int __actvcapcall_hmcall_test_m12(rref_t __rref, unsigned long long __rpc_info, void *__buf, int a1, unsigned long long a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, struct sysif_data data);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m12(bool is_xact_fwd, bool is_xact_allow_refwd, int a1, unsigned long long a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, struct sysif_data data)
{
	const unsigned long __callno = __sysmgr_method_test_m12;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysif_data), __arch_actv_rpc_stksz_alignment(struct sysif_data));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m12(rpc_info, NULL, a1, a2, a3, a4, a5, a6, a7, a8, a9, data);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m12(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int a1, unsigned long long a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, struct sysif_data data)
{
	const unsigned long __callno = __sysmgr_method_test_m12;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysif_data), __arch_actv_rpc_stksz_alignment(struct sysif_data));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m12(__rref, rpc_info, NULL, a1, a2, a3, a4, a5, a6, a7, a8, a9, data);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m12(int a1, unsigned long long a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, struct sysif_data data)
{
	return actvxactcall_hmcall_test_m12(false, false, a1, a2, a3, a4, a5, a6, a7, a8, a9, data);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m12(rref_t __rref, int a1, unsigned long long a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, struct sysif_data data)
{
	return actvxactcapcall_hmcall_test_m12(false, false, __rref, a1, a2, a3, a4, a5, a6, a7, a8, a9, data);
}

extern int __actvcall_hmcall_test_m13(unsigned long long __rpc_info, void *__buf, void *addr, unsigned long size);


extern int __actvcapcall_hmcall_test_m13(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *addr, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m13(bool is_xact_fwd, bool is_xact_allow_refwd, void *addr, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_test_m13;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m13(rpc_info, NULL, addr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m13(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, void *addr, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_test_m13;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m13(__rref, rpc_info, NULL, addr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m13(void *addr, unsigned long size)
{
	return actvxactcall_hmcall_test_m13(false, false, addr, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m13(rref_t __rref, void *addr, unsigned long size)
{
	return actvxactcapcall_hmcall_test_m13(false, false, __rref, addr, size);
}

extern int __actvcall_hmcall_test_m14(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_test_m14(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m14(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_test_m14;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m14(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m14(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_test_m14;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m14(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m14(void)
{
	return actvxactcall_hmcall_test_m14(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m14(rref_t __rref)
{
	return actvxactcapcall_hmcall_test_m14(false, false, __rref);
}

extern int __actvcall_hmcall_test_m15(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_test_m15(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m15(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_test_m15 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m15;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m15(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m15(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_test_m15 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m15;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m15(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m15(struct __actvret_hmcall_test_m15 *__ret)
{
	return actvxactcall_hmcall_test_m15(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m15(rref_t __rref, struct __actvret_hmcall_test_m15 *__ret)
{
	return actvxactcapcall_hmcall_test_m15(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_test_m16(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_test_m16(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m16(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_test_m16;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m16(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m16(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_test_m16;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m16(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m16(void)
{
	return actvxactcall_hmcall_test_m16(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m16(rref_t __rref)
{
	return actvxactcapcall_hmcall_test_m16(false, false, __rref);
}

extern int __actvcall_hmcall_test_m17(unsigned long long __rpc_info, void *__buf, int a1, struct sysif_data data, unsigned long long a2, int a3);


extern int __actvcapcall_hmcall_test_m17(rref_t __rref, unsigned long long __rpc_info, void *__buf, int a1, struct sysif_data data, unsigned long long a2, int a3);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m17(bool is_xact_fwd, bool is_xact_allow_refwd, int a1, struct sysif_data data, unsigned long long a2, int a3)
{
	const unsigned long __callno = __sysmgr_method_test_m17;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysif_data), __arch_actv_rpc_stksz_alignment(struct sysif_data));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m17(rpc_info, NULL, a1, data, a2, a3);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m17(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int a1, struct sysif_data data, unsigned long long a2, int a3)
{
	const unsigned long __callno = __sysmgr_method_test_m17;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysif_data), __arch_actv_rpc_stksz_alignment(struct sysif_data));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m17(__rref, rpc_info, NULL, a1, data, a2, a3);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m17(int a1, struct sysif_data data, unsigned long long a2, int a3)
{
	return actvxactcall_hmcall_test_m17(false, false, a1, data, a2, a3);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m17(rref_t __rref, int a1, struct sysif_data data, unsigned long long a2, int a3)
{
	return actvxactcapcall_hmcall_test_m17(false, false, __rref, a1, data, a2, a3);
}

extern int __actvcall_hmcall_test_m18(unsigned long long __rpc_info, void *__buf, void *addr1, unsigned long size1, void *addr2, unsigned long size2);


extern int __actvcapcall_hmcall_test_m18(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *addr1, unsigned long size1, void *addr2, unsigned long size2);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m18(bool is_xact_fwd, bool is_xact_allow_refwd, void *addr1, unsigned long size1, void *addr2, unsigned long size2)
{
	const unsigned long __callno = __sysmgr_method_test_m18;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m18(rpc_info, NULL, addr1, size1, addr2, size2);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m18(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, void *addr1, unsigned long size1, void *addr2, unsigned long size2)
{
	const unsigned long __callno = __sysmgr_method_test_m18;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m18(__rref, rpc_info, NULL, addr1, size1, addr2, size2);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m18(void *addr1, unsigned long size1, void *addr2, unsigned long size2)
{
	return actvxactcall_hmcall_test_m18(false, false, addr1, size1, addr2, size2);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m18(rref_t __rref, void *addr1, unsigned long size1, void *addr2, unsigned long size2)
{
	return actvxactcapcall_hmcall_test_m18(false, false, __rref, addr1, size1, addr2, size2);
}

extern int __actvcall_hmcall_test_m19(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_test_m19(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m19(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_test_m19 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m19;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m19(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m19(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_test_m19 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m19;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m19(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m19(struct __actvret_hmcall_test_m19 *__ret)
{
	return actvxactcall_hmcall_test_m19(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m19(rref_t __rref, struct __actvret_hmcall_test_m19 *__ret)
{
	return actvxactcapcall_hmcall_test_m19(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_test_m20(unsigned long long __rpc_info, void *__buf, const void *send_buf, unsigned long buf_len);


extern int __actvcapcall_hmcall_test_m20(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *send_buf, unsigned long buf_len);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m20(bool is_xact_fwd, bool is_xact_allow_refwd, const void *send_buf, unsigned long buf_len)
{
	const unsigned long __callno = __sysmgr_method_test_m20;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m20(rpc_info, NULL, send_buf, buf_len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m20(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *send_buf, unsigned long buf_len)
{
	const unsigned long __callno = __sysmgr_method_test_m20;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m20(__rref, rpc_info, NULL, send_buf, buf_len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m20(const void *send_buf, unsigned long buf_len)
{
	return actvxactcall_hmcall_test_m20(false, false, send_buf, buf_len);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m20(rref_t __rref, const void *send_buf, unsigned long buf_len)
{
	return actvxactcapcall_hmcall_test_m20(false, false, __rref, send_buf, buf_len);
}

extern int __actvcall_hmcall_test_m21(unsigned long long __rpc_info, void *__buf, const void *send_buf, unsigned long buf_len);


extern int __actvcapcall_hmcall_test_m21(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *send_buf, unsigned long buf_len);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m21(bool is_xact_fwd, bool is_xact_allow_refwd, const void *send_buf, unsigned long buf_len, struct __actvret_hmcall_test_m21 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m21;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m21(rpc_info, __ret, send_buf, buf_len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m21(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *send_buf, unsigned long buf_len, struct __actvret_hmcall_test_m21 *__ret)
{
	const unsigned long __callno = __sysmgr_method_test_m21;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m21(__rref, rpc_info, __ret, send_buf, buf_len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m21(const void *send_buf, unsigned long buf_len, struct __actvret_hmcall_test_m21 *__ret)
{
	return actvxactcall_hmcall_test_m21(false, false, send_buf, buf_len, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m21(rref_t __rref, const void *send_buf, unsigned long buf_len, struct __actvret_hmcall_test_m21 *__ret)
{
	return actvxactcapcall_hmcall_test_m21(false, false, __rref, send_buf, buf_len, __ret);
}

extern int __actvcall_hmcall_test_m22(unsigned long long __rpc_info, void *__buf, const void *caller_send_buf, unsigned long len);


extern int __actvcapcall_hmcall_test_m22(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *caller_send_buf, unsigned long len);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m22(bool is_xact_fwd, bool is_xact_allow_refwd, const void *caller_send_buf, unsigned long len)
{
	const unsigned long __callno = __sysmgr_method_test_m22;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m22(rpc_info, NULL, caller_send_buf, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m22(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *caller_send_buf, unsigned long len)
{
	const unsigned long __callno = __sysmgr_method_test_m22;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m22(__rref, rpc_info, NULL, caller_send_buf, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m22(const void *caller_send_buf, unsigned long len)
{
	return actvxactcall_hmcall_test_m22(false, false, caller_send_buf, len);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m22(rref_t __rref, const void *caller_send_buf, unsigned long len)
{
	return actvxactcapcall_hmcall_test_m22(false, false, __rref, caller_send_buf, len);
}

extern int __actvcall_hmcall_test_m23(unsigned long long __rpc_info, void *__buf, void *caller_recv_buf, unsigned long len);


extern int __actvcapcall_hmcall_test_m23(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *caller_recv_buf, unsigned long len);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m23(bool is_xact_fwd, bool is_xact_allow_refwd, void *caller_recv_buf, unsigned long len)
{
	const unsigned long __callno = __sysmgr_method_test_m23;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m23(rpc_info, NULL, caller_recv_buf, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m23(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, void *caller_recv_buf, unsigned long len)
{
	const unsigned long __callno = __sysmgr_method_test_m23;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m23(__rref, rpc_info, NULL, caller_recv_buf, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m23(void *caller_recv_buf, unsigned long len)
{
	return actvxactcall_hmcall_test_m23(false, false, caller_recv_buf, len);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m23(rref_t __rref, void *caller_recv_buf, unsigned long len)
{
	return actvxactcapcall_hmcall_test_m23(false, false, __rref, caller_recv_buf, len);
}

extern int __actvcall_hmcall_test_m24(unsigned long long __rpc_info, void *__buf, const void *caller_send_buf, void *caller_recv_buf, unsigned long len);


extern int __actvcapcall_hmcall_test_m24(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *caller_send_buf, void *caller_recv_buf, unsigned long len);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m24(bool is_xact_fwd, bool is_xact_allow_refwd, const void *caller_send_buf, void *caller_recv_buf, unsigned long len)
{
	const unsigned long __callno = __sysmgr_method_test_m24;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m24(rpc_info, NULL, caller_send_buf, caller_recv_buf, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m24(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *caller_send_buf, void *caller_recv_buf, unsigned long len)
{
	const unsigned long __callno = __sysmgr_method_test_m24;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m24(__rref, rpc_info, NULL, caller_send_buf, caller_recv_buf, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m24(const void *caller_send_buf, void *caller_recv_buf, unsigned long len)
{
	return actvxactcall_hmcall_test_m24(false, false, caller_send_buf, caller_recv_buf, len);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m24(rref_t __rref, const void *caller_send_buf, void *caller_recv_buf, unsigned long len)
{
	return actvxactcapcall_hmcall_test_m24(false, false, __rref, caller_send_buf, caller_recv_buf, len);
}

extern int __actvcall_hmcall_test_m25(unsigned long long __rpc_info, void *__buf, void *addr1, unsigned long size1);


extern int __actvcapcall_hmcall_test_m25(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *addr1, unsigned long size1);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m25(bool is_xact_fwd, bool is_xact_allow_refwd, void *addr1, unsigned long size1)
{
	const unsigned long __callno = __sysmgr_method_test_m25;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m25(rpc_info, NULL, addr1, size1);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m25(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, void *addr1, unsigned long size1)
{
	const unsigned long __callno = __sysmgr_method_test_m25;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m25(__rref, rpc_info, NULL, addr1, size1);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m25(void *addr1, unsigned long size1)
{
	return actvxactcall_hmcall_test_m25(false, false, addr1, size1);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m25(rref_t __rref, void *addr1, unsigned long size1)
{
	return actvxactcapcall_hmcall_test_m25(false, false, __rref, addr1, size1);
}

extern int __actvcall_hmcall_test_m26(unsigned long long __rpc_info, void *__buf, const int *data);


extern int __actvcapcall_hmcall_test_m26(rref_t __rref, unsigned long long __rpc_info, void *__buf, const int *data);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m26(bool is_xact_fwd, bool is_xact_allow_refwd, const int *data)
{
	const unsigned long __callno = __sysmgr_method_test_m26;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const int*), __arch_actv_rpc_stksz_alignment(const int*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m26(rpc_info, NULL, data);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m26(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const int *data)
{
	const unsigned long __callno = __sysmgr_method_test_m26;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const int*), __arch_actv_rpc_stksz_alignment(const int*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m26(__rref, rpc_info, NULL, data);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m26(const int *data)
{
	return actvxactcall_hmcall_test_m26(false, false, data);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m26(rref_t __rref, const int *data)
{
	return actvxactcapcall_hmcall_test_m26(false, false, __rref, data);
}

extern int __actvcall_hmcall_test_m27(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_test_m27(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m27(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_test_m27;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m27(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m27(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_test_m27;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m27(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m27(void)
{
	return actvxactcall_hmcall_test_m27(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m27(rref_t __rref)
{
	return actvxactcapcall_hmcall_test_m27(false, false, __rref);
}

extern int __actvcall_hmcall_test_m28(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_test_m28(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m28(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_test_m28;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m28(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m28(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_test_m28;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m28(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m28(void)
{
	return actvxactcall_hmcall_test_m28(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m28(rref_t __rref)
{
	return actvxactcapcall_hmcall_test_m28(false, false, __rref);
}

extern int __actvcall_hmcall_test_m29(unsigned long long __rpc_info, void *__buf, unsigned long pc, unsigned long sp);


extern int __actvcapcall_hmcall_test_m29(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long pc, unsigned long sp);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m29(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long pc, unsigned long sp)
{
	const unsigned long __callno = __sysmgr_method_test_m29;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m29(rpc_info, NULL, pc, sp);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m29(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long pc, unsigned long sp)
{
	const unsigned long __callno = __sysmgr_method_test_m29;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m29(__rref, rpc_info, NULL, pc, sp);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m29(unsigned long pc, unsigned long sp)
{
	return actvxactcall_hmcall_test_m29(false, false, pc, sp);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m29(rref_t __rref, unsigned long pc, unsigned long sp)
{
	return actvxactcapcall_hmcall_test_m29(false, false, __rref, pc, sp);
}

extern int __actvcall_hmcall_test_m30(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_test_m30(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m30(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_test_m30;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m30(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m30(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_test_m30;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m30(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m30(void)
{
	return actvxactcall_hmcall_test_m30(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m30(rref_t __rref)
{
	return actvxactcapcall_hmcall_test_m30(false, false, __rref);
}

extern int __actvcall_hmcall_test_m31(unsigned long long __rpc_info, void *__buf, struct sysif_data data);


extern int __actvcapcall_hmcall_test_m31(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct sysif_data data);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m31(bool is_xact_fwd, bool is_xact_allow_refwd, struct sysif_data data)
{
	const unsigned long __callno = __sysmgr_method_test_m31;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysif_data), __arch_actv_rpc_stksz_alignment(struct sysif_data));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m31(rpc_info, NULL, data);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m31(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct sysif_data data)
{
	const unsigned long __callno = __sysmgr_method_test_m31;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysif_data), __arch_actv_rpc_stksz_alignment(struct sysif_data));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m31(__rref, rpc_info, NULL, data);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m31(struct sysif_data data)
{
	return actvxactcall_hmcall_test_m31(false, false, data);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m31(rref_t __rref, struct sysif_data data)
{
	return actvxactcapcall_hmcall_test_m31(false, false, __rref, data);
}

extern int __actvcall_hmcall_test_m32(unsigned long long __rpc_info, void *__buf, void *addr, unsigned long size);


extern int __actvcapcall_hmcall_test_m32(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *addr, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m32(bool is_xact_fwd, bool is_xact_allow_refwd, void *addr, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_test_m32;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m32(rpc_info, NULL, addr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m32(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, void *addr, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_test_m32;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m32(__rref, rpc_info, NULL, addr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m32(void *addr, unsigned long size)
{
	return actvxactcall_hmcall_test_m32(false, false, addr, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m32(rref_t __rref, void *addr, unsigned long size)
{
	return actvxactcapcall_hmcall_test_m32(false, false, __rref, addr, size);
}

extern int __actvcall_hmcall_test_m33(unsigned long long __rpc_info, void *__buf, void *addr1, unsigned long size1);


extern int __actvcapcall_hmcall_test_m33(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *addr1, unsigned long size1);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m33(bool is_xact_fwd, bool is_xact_allow_refwd, void *addr1, unsigned long size1)
{
	const unsigned long __callno = __sysmgr_method_test_m33;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m33(rpc_info, NULL, addr1, size1);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m33(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, void *addr1, unsigned long size1)
{
	const unsigned long __callno = __sysmgr_method_test_m33;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m33(__rref, rpc_info, NULL, addr1, size1);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m33(void *addr1, unsigned long size1)
{
	return actvxactcall_hmcall_test_m33(false, false, addr1, size1);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m33(rref_t __rref, void *addr1, unsigned long size1)
{
	return actvxactcapcall_hmcall_test_m33(false, false, __rref, addr1, size1);
}

extern int __actvcall_hmcall_test_m34(unsigned long long __rpc_info, void *__buf, void *addr1, void *addr2, unsigned long size);


extern int __actvcapcall_hmcall_test_m34(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *addr1, void *addr2, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m34(bool is_xact_fwd, bool is_xact_allow_refwd, void *addr1, void *addr2, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_test_m34;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m34(rpc_info, NULL, addr1, addr2, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m34(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, void *addr1, void *addr2, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_test_m34;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m34(__rref, rpc_info, NULL, addr1, addr2, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m34(void *addr1, void *addr2, unsigned long size)
{
	return actvxactcall_hmcall_test_m34(false, false, addr1, addr2, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m34(rref_t __rref, void *addr1, void *addr2, unsigned long size)
{
	return actvxactcapcall_hmcall_test_m34(false, false, __rref, addr1, addr2, size);
}

extern int __actvcall_hmcall_test_m35(unsigned long long __rpc_info, void *__buf, unsigned long cmd, void *args, unsigned long args_size, void *result, unsigned long result_size);


extern int __actvcapcall_hmcall_test_m35(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long cmd, void *args, unsigned long args_size, void *result, unsigned long result_size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_test_m35(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long cmd, void *args, unsigned long args_size, void *result, unsigned long result_size)
{
	const unsigned long __callno = __sysmgr_method_test_m35;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_test_m35(rpc_info, NULL, cmd, args, args_size, result, result_size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_test_m35(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long cmd, void *args, unsigned long args_size, void *result, unsigned long result_size)
{
	const unsigned long __callno = __sysmgr_method_test_m35;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_test_m35(__rref, rpc_info, NULL, cmd, args, args_size, result, result_size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_test_m35(unsigned long cmd, void *args, unsigned long args_size, void *result, unsigned long result_size)
{
	return actvxactcall_hmcall_test_m35(false, false, cmd, args, args_size, result, result_size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_test_m35(rref_t __rref, unsigned long cmd, void *args, unsigned long args_size, void *result, unsigned long result_size)
{
	return actvxactcapcall_hmcall_test_m35(false, false, __rref, cmd, args, args_size, result, result_size);
}

extern int __actvcall_hmcall_path_add_path(unsigned long long __rpc_info, void *__buf, cref_t cref, unsigned long grant_info, struct pathmgr_name name, mode_t mode);


extern int __actvcapcall_hmcall_path_add_path(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t cref, unsigned long grant_info, struct pathmgr_name name, mode_t mode);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_path_add_path(bool is_xact_fwd, bool is_xact_allow_refwd, cref_t cref, unsigned long grant_info, struct pathmgr_name name, mode_t mode)
{
	const unsigned long __callno = __sysmgr_method_path_add_path;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_path_add_path(rpc_info, NULL, cref, grant_info, name, mode);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_path_add_path(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, cref_t cref, unsigned long grant_info, struct pathmgr_name name, mode_t mode)
{
	const unsigned long __callno = __sysmgr_method_path_add_path;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_path_add_path(__rref, rpc_info, NULL, cref, grant_info, name, mode);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_path_add_path(cref_t cref, unsigned long grant_info, struct pathmgr_name name, mode_t mode)
{
	return actvxactcall_hmcall_path_add_path(false, false, cref, grant_info, name, mode);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_path_add_path(rref_t __rref, cref_t cref, unsigned long grant_info, struct pathmgr_name name, mode_t mode)
{
	return actvxactcapcall_hmcall_path_add_path(false, false, __rref, cref, grant_info, name, mode);
}

extern int __actvcall_hmcall_path_grant_path(unsigned long long __rpc_info, void *__buf, struct pathmgr_name name);


extern int __actvcapcall_hmcall_path_grant_path(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct pathmgr_name name);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_path_grant_path(bool is_xact_fwd, bool is_xact_allow_refwd, struct pathmgr_name name)
{
	const unsigned long __callno = __sysmgr_method_path_grant_path;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_path_grant_path(rpc_info, NULL, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_path_grant_path(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct pathmgr_name name)
{
	const unsigned long __callno = __sysmgr_method_path_grant_path;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_path_grant_path(__rref, rpc_info, NULL, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_path_grant_path(struct pathmgr_name name)
{
	return actvxactcall_hmcall_path_grant_path(false, false, name);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_path_grant_path(rref_t __rref, struct pathmgr_name name)
{
	return actvxactcapcall_hmcall_path_grant_path(false, false, __rref, name);
}

extern int __actvcall_hmcall_path_del_path(unsigned long long __rpc_info, void *__buf, struct pathmgr_name name);


extern int __actvcapcall_hmcall_path_del_path(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct pathmgr_name name);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_path_del_path(bool is_xact_fwd, bool is_xact_allow_refwd, struct pathmgr_name name)
{
	const unsigned long __callno = __sysmgr_method_path_del_path;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_path_del_path(rpc_info, NULL, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_path_del_path(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct pathmgr_name name)
{
	const unsigned long __callno = __sysmgr_method_path_del_path;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_path_del_path(__rref, rpc_info, NULL, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_path_del_path(struct pathmgr_name name)
{
	return actvxactcall_hmcall_path_del_path(false, false, name);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_path_del_path(rref_t __rref, struct pathmgr_name name)
{
	return actvxactcapcall_hmcall_path_del_path(false, false, __rref, name);
}

extern int __actvcall_hmcall_path_acquire_path(unsigned long long __rpc_info, void *__buf, struct pathmgr_name name);


extern int __actvcapcall_hmcall_path_acquire_path(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct pathmgr_name name);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_path_acquire_path(bool is_xact_fwd, bool is_xact_allow_refwd, struct pathmgr_name name, struct __actvret_hmcall_path_acquire_path *__ret)
{
	const unsigned long __callno = __sysmgr_method_path_acquire_path;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_path_acquire_path(rpc_info, __ret, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_path_acquire_path(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct pathmgr_name name, struct __actvret_hmcall_path_acquire_path *__ret)
{
	const unsigned long __callno = __sysmgr_method_path_acquire_path;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_path_acquire_path(__rref, rpc_info, __ret, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_path_acquire_path(struct pathmgr_name name, struct __actvret_hmcall_path_acquire_path *__ret)
{
	return actvxactcall_hmcall_path_acquire_path(false, false, name, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_path_acquire_path(rref_t __rref, struct pathmgr_name name, struct __actvret_hmcall_path_acquire_path *__ret)
{
	return actvxactcapcall_hmcall_path_acquire_path(false, false, __rref, name, __ret);
}

extern int __actvcall_hmcall_path_release_path(unsigned long long __rpc_info, void *__buf, struct pathmgr_name name, rref_t rref);


extern int __actvcapcall_hmcall_path_release_path(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct pathmgr_name name, rref_t rref);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_path_release_path(bool is_xact_fwd, bool is_xact_allow_refwd, struct pathmgr_name name, rref_t rref)
{
	const unsigned long __callno = __sysmgr_method_path_release_path;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_path_release_path(rpc_info, NULL, name, rref);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_path_release_path(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct pathmgr_name name, rref_t rref)
{
	const unsigned long __callno = __sysmgr_method_path_release_path;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_path_release_path(__rref, rpc_info, NULL, name, rref);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_path_release_path(struct pathmgr_name name, rref_t rref)
{
	return actvxactcall_hmcall_path_release_path(false, false, name, rref);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_path_release_path(rref_t __rref, struct pathmgr_name name, rref_t rref)
{
	return actvxactcapcall_hmcall_path_release_path(false, false, __rref, name, rref);
}

extern int __actvcall_hmcall_path_stat(unsigned long long __rpc_info, void *__buf, struct pathmgr_name name, struct bunch_ipc_attr attr);


extern int __actvcapcall_hmcall_path_stat(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct pathmgr_name name, struct bunch_ipc_attr attr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_path_stat(bool is_xact_fwd, bool is_xact_allow_refwd, struct pathmgr_name name, struct bunch_ipc_attr attr)
{
	const unsigned long __callno = __sysmgr_method_path_stat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct bunch_ipc_attr), __arch_actv_rpc_stksz_alignment(struct bunch_ipc_attr));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_path_stat(rpc_info, NULL, name, attr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_path_stat(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct pathmgr_name name, struct bunch_ipc_attr attr)
{
	const unsigned long __callno = __sysmgr_method_path_stat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct bunch_ipc_attr), __arch_actv_rpc_stksz_alignment(struct bunch_ipc_attr));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_path_stat(__rref, rpc_info, NULL, name, attr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_path_stat(struct pathmgr_name name, struct bunch_ipc_attr attr)
{
	return actvxactcall_hmcall_path_stat(false, false, name, attr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_path_stat(rref_t __rref, struct pathmgr_name name, struct bunch_ipc_attr attr)
{
	return actvxactcapcall_hmcall_path_stat(false, false, __rref, name, attr);
}

extern int __actvcall_hmcall_path_chmod(unsigned long long __rpc_info, void *__buf, struct pathmgr_name name, mode_t mode);


extern int __actvcapcall_hmcall_path_chmod(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct pathmgr_name name, mode_t mode);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_path_chmod(bool is_xact_fwd, bool is_xact_allow_refwd, struct pathmgr_name name, mode_t mode)
{
	const unsigned long __callno = __sysmgr_method_path_chmod;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_path_chmod(rpc_info, NULL, name, mode);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_path_chmod(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct pathmgr_name name, mode_t mode)
{
	const unsigned long __callno = __sysmgr_method_path_chmod;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct pathmgr_name), __arch_actv_rpc_stksz_alignment(struct pathmgr_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_path_chmod(__rref, rpc_info, NULL, name, mode);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_path_chmod(struct pathmgr_name name, mode_t mode)
{
	return actvxactcall_hmcall_path_chmod(false, false, name, mode);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_path_chmod(rref_t __rref, struct pathmgr_name name, mode_t mode)
{
	return actvxactcapcall_hmcall_path_chmod(false, false, __rref, name, mode);
}

extern int __actvcall_hmcall_sysctrl_shutdown(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_sysctrl_shutdown(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_shutdown(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_shutdown;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_shutdown(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_shutdown(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_shutdown;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_shutdown(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_shutdown(void)
{
	return actvxactcall_hmcall_sysctrl_shutdown(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_shutdown(rref_t __rref)
{
	return actvxactcapcall_hmcall_sysctrl_shutdown(false, false, __rref);
}

extern int __actvcall_hmcall_sysctrl_reboot(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_sysctrl_reboot(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_reboot(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_reboot;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_reboot(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_reboot(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_reboot;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_reboot(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_reboot(void)
{
	return actvxactcall_hmcall_sysctrl_reboot(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_reboot(rref_t __rref)
{
	return actvxactcapcall_hmcall_sysctrl_reboot(false, false, __rref);
}

extern int __actvcall_hmcall_sysctrl_sysconf_ulong(unsigned long long __rpc_info, void *__buf, unsigned int type);


extern int __actvcapcall_hmcall_sysctrl_sysconf_ulong(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int type);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_sysconf_ulong(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int type, struct __actvret_hmcall_sysctrl_sysconf_ulong *__ret)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_sysconf_ulong;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_sysconf_ulong(rpc_info, __ret, type);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_sysconf_ulong(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int type, struct __actvret_hmcall_sysctrl_sysconf_ulong *__ret)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_sysconf_ulong;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_sysconf_ulong(__rref, rpc_info, __ret, type);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_sysconf_ulong(unsigned int type, struct __actvret_hmcall_sysctrl_sysconf_ulong *__ret)
{
	return actvxactcall_hmcall_sysctrl_sysconf_ulong(false, false, type, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_sysconf_ulong(rref_t __rref, unsigned int type, struct __actvret_hmcall_sysctrl_sysconf_ulong *__ret)
{
	return actvxactcapcall_hmcall_sysctrl_sysconf_ulong(false, false, __rref, type, __ret);
}

extern int __actvcall_hmcall_sysctrl_sysconf_string(unsigned long long __rpc_info, void *__buf, unsigned int type, char *buf, unsigned int buflen);


extern int __actvcapcall_hmcall_sysctrl_sysconf_string(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int type, char *buf, unsigned int buflen);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_sysconf_string(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int type, char *buf, unsigned int buflen)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_sysconf_string;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_sysconf_string(rpc_info, NULL, type, buf, buflen);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_sysconf_string(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int type, char *buf, unsigned int buflen)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_sysconf_string;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_sysconf_string(__rref, rpc_info, NULL, type, buf, buflen);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_sysconf_string(unsigned int type, char *buf, unsigned int buflen)
{
	return actvxactcall_hmcall_sysctrl_sysconf_string(false, false, type, buf, buflen);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_sysconf_string(rref_t __rref, unsigned int type, char *buf, unsigned int buflen)
{
	return actvxactcapcall_hmcall_sysctrl_sysconf_string(false, false, __rref, type, buf, buflen);
}

extern int __actvcall_hmcall_sysctrl_uname(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_sysctrl_uname(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_uname(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_sysctrl_uname *__ret)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_uname;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_uname(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_uname(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_sysctrl_uname *__ret)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_uname;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_uname(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_uname(struct __actvret_hmcall_sysctrl_uname *__ret)
{
	return actvxactcall_hmcall_sysctrl_uname(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_uname(rref_t __rref, struct __actvret_hmcall_sysctrl_uname *__ret)
{
	return actvxactcapcall_hmcall_sysctrl_uname(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_sysctrl_require(unsigned long long __rpc_info, void *__buf, rref_t rref, unsigned int _mandatory_permission, unsigned int _avail_permission);


extern int __actvcapcall_hmcall_sysctrl_require(rref_t __rref, unsigned long long __rpc_info, void *__buf, rref_t rref, unsigned int _mandatory_permission, unsigned int _avail_permission);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_require(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t rref, unsigned int _mandatory_permission, unsigned int _avail_permission)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_require;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_require(rpc_info, NULL, rref, _mandatory_permission, _avail_permission);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_require(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, rref_t rref, unsigned int _mandatory_permission, unsigned int _avail_permission)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_require;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_require(__rref, rpc_info, NULL, rref, _mandatory_permission, _avail_permission);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_require(rref_t rref, unsigned int _mandatory_permission, unsigned int _avail_permission)
{
	return actvxactcall_hmcall_sysctrl_require(false, false, rref, _mandatory_permission, _avail_permission);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_require(rref_t __rref, rref_t rref, unsigned int _mandatory_permission, unsigned int _avail_permission)
{
	return actvxactcapcall_hmcall_sysctrl_require(false, false, __rref, rref, _mandatory_permission, _avail_permission);
}

extern int __actvcall_hmcall_sysctrl_sysinfo(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_sysctrl_sysinfo(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_sysinfo(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_sysctrl_sysinfo *__ret)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_sysinfo;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_sysinfo(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_sysinfo(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_sysctrl_sysinfo *__ret)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_sysinfo;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_sysinfo(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_sysinfo(struct __actvret_hmcall_sysctrl_sysinfo *__ret)
{
	return actvxactcall_hmcall_sysctrl_sysinfo(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_sysinfo(rref_t __rref, struct __actvret_hmcall_sysctrl_sysinfo *__ret)
{
	return actvxactcapcall_hmcall_sysctrl_sysinfo(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_sysctrl_cpustat(unsigned long long __rpc_info, void *__buf, unsigned int flags, struct bunch_ipc_attr attr);


extern int __actvcapcall_hmcall_sysctrl_cpustat(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int flags, struct bunch_ipc_attr attr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_cpustat(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int flags, struct bunch_ipc_attr attr)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_cpustat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct bunch_ipc_attr), __arch_actv_rpc_stksz_alignment(struct bunch_ipc_attr));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_cpustat(rpc_info, NULL, flags, attr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_cpustat(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int flags, struct bunch_ipc_attr attr)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_cpustat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct bunch_ipc_attr), __arch_actv_rpc_stksz_alignment(struct bunch_ipc_attr));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_cpustat(__rref, rpc_info, NULL, flags, attr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_cpustat(unsigned int flags, struct bunch_ipc_attr attr)
{
	return actvxactcall_hmcall_sysctrl_cpustat(false, false, flags, attr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_cpustat(rref_t __rref, unsigned int flags, struct bunch_ipc_attr attr)
{
	return actvxactcapcall_hmcall_sysctrl_cpustat(false, false, __rref, flags, attr);
}

extern int __actvcall_hmcall_sysctrl_attach_cpuctx(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_sysctrl_attach_cpuctx(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_attach_cpuctx(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_attach_cpuctx;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_attach_cpuctx(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_attach_cpuctx(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_attach_cpuctx;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_attach_cpuctx(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_attach_cpuctx(void)
{
	return actvxactcall_hmcall_sysctrl_attach_cpuctx(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_attach_cpuctx(rref_t __rref)
{
	return actvxactcapcall_hmcall_sysctrl_attach_cpuctx(false, false, __rref);
}

extern int __actvcall_hmcall_sysctrl_detach_cpuctx(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_sysctrl_detach_cpuctx(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_detach_cpuctx(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_detach_cpuctx;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_detach_cpuctx(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_detach_cpuctx(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_detach_cpuctx;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_detach_cpuctx(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_detach_cpuctx(void)
{
	return actvxactcall_hmcall_sysctrl_detach_cpuctx(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_detach_cpuctx(rref_t __rref)
{
	return actvxactcapcall_hmcall_sysctrl_detach_cpuctx(false, false, __rref);
}

extern int __actvcall_hmcall_sysctrl_check_cpuctx(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_sysctrl_check_cpuctx(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_check_cpuctx(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_sysctrl_check_cpuctx *__ret)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_check_cpuctx;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_check_cpuctx(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_check_cpuctx(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_sysctrl_check_cpuctx *__ret)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_check_cpuctx;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_check_cpuctx(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_check_cpuctx(struct __actvret_hmcall_sysctrl_check_cpuctx *__ret)
{
	return actvxactcall_hmcall_sysctrl_check_cpuctx(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_check_cpuctx(rref_t __rref, struct __actvret_hmcall_sysctrl_check_cpuctx *__ret)
{
	return actvxactcapcall_hmcall_sysctrl_check_cpuctx(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_sysctrl_set_hostname(unsigned long long __rpc_info, void *__buf, struct nodename name);


extern int __actvcapcall_hmcall_sysctrl_set_hostname(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct nodename name);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_set_hostname(bool is_xact_fwd, bool is_xact_allow_refwd, struct nodename name)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_set_hostname;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct nodename), __arch_actv_rpc_stksz_alignment(struct nodename));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_set_hostname(rpc_info, NULL, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_set_hostname(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct nodename name)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_set_hostname;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct nodename), __arch_actv_rpc_stksz_alignment(struct nodename));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_set_hostname(__rref, rpc_info, NULL, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_set_hostname(struct nodename name)
{
	return actvxactcall_hmcall_sysctrl_set_hostname(false, false, name);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_set_hostname(rref_t __rref, struct nodename name)
{
	return actvxactcapcall_hmcall_sysctrl_set_hostname(false, false, __rref, name);
}

extern int __actvcall_hmcall_sysctrl_set_klogport_level(unsigned long long __rpc_info, void *__buf, unsigned long type_flag, unsigned int level);


extern int __actvcapcall_hmcall_sysctrl_set_klogport_level(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long type_flag, unsigned int level);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_set_klogport_level(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long type_flag, unsigned int level)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_set_klogport_level;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_set_klogport_level(rpc_info, NULL, type_flag, level);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_set_klogport_level(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long type_flag, unsigned int level)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_set_klogport_level;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_set_klogport_level(__rref, rpc_info, NULL, type_flag, level);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_set_klogport_level(unsigned long type_flag, unsigned int level)
{
	return actvxactcall_hmcall_sysctrl_set_klogport_level(false, false, type_flag, level);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_set_klogport_level(rref_t __rref, unsigned long type_flag, unsigned int level)
{
	return actvxactcapcall_hmcall_sysctrl_set_klogport_level(false, false, __rref, type_flag, level);
}

extern int __actvcall_hmcall_sysctrl_enable_klogport(unsigned long long __rpc_info, void *__buf, unsigned long type_flag);


extern int __actvcapcall_hmcall_sysctrl_enable_klogport(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long type_flag);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_enable_klogport(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long type_flag)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_enable_klogport;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_enable_klogport(rpc_info, NULL, type_flag);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_enable_klogport(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long type_flag)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_enable_klogport;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_enable_klogport(__rref, rpc_info, NULL, type_flag);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_enable_klogport(unsigned long type_flag)
{
	return actvxactcall_hmcall_sysctrl_enable_klogport(false, false, type_flag);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_enable_klogport(rref_t __rref, unsigned long type_flag)
{
	return actvxactcapcall_hmcall_sysctrl_enable_klogport(false, false, __rref, type_flag);
}

extern int __actvcall_hmcall_sysctrl_disable_klogport(unsigned long long __rpc_info, void *__buf, unsigned long type_flag);


extern int __actvcapcall_hmcall_sysctrl_disable_klogport(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long type_flag);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_disable_klogport(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long type_flag)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_disable_klogport;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_disable_klogport(rpc_info, NULL, type_flag);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_disable_klogport(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long type_flag)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_disable_klogport;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_disable_klogport(__rref, rpc_info, NULL, type_flag);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_disable_klogport(unsigned long type_flag)
{
	return actvxactcall_hmcall_sysctrl_disable_klogport(false, false, type_flag);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_disable_klogport(rref_t __rref, unsigned long type_flag)
{
	return actvxactcapcall_hmcall_sysctrl_disable_klogport(false, false, __rref, type_flag);
}

extern int __actvcall_hmcall_sysctrl_kev_read_event_number(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_sysctrl_kev_read_event_number(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_kev_read_event_number(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_sysctrl_kev_read_event_number *__ret)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_kev_read_event_number;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_kev_read_event_number(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_kev_read_event_number(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_sysctrl_kev_read_event_number *__ret)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_kev_read_event_number;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_kev_read_event_number(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_kev_read_event_number(struct __actvret_hmcall_sysctrl_kev_read_event_number *__ret)
{
	return actvxactcall_hmcall_sysctrl_kev_read_event_number(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_kev_read_event_number(rref_t __rref, struct __actvret_hmcall_sysctrl_kev_read_event_number *__ret)
{
	return actvxactcapcall_hmcall_sysctrl_kev_read_event_number(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_sysctrl_kev_read_event_config(unsigned long long __rpc_info, void *__buf, unsigned int event_type);


extern int __actvcapcall_hmcall_sysctrl_kev_read_event_config(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int event_type);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_kev_read_event_config(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int event_type, struct __actvret_hmcall_sysctrl_kev_read_event_config *__ret)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_kev_read_event_config;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_kev_read_event_config(rpc_info, __ret, event_type);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_kev_read_event_config(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int event_type, struct __actvret_hmcall_sysctrl_kev_read_event_config *__ret)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_kev_read_event_config;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_kev_read_event_config(__rref, rpc_info, __ret, event_type);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_kev_read_event_config(unsigned int event_type, struct __actvret_hmcall_sysctrl_kev_read_event_config *__ret)
{
	return actvxactcall_hmcall_sysctrl_kev_read_event_config(false, false, event_type, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_kev_read_event_config(rref_t __rref, unsigned int event_type, struct __actvret_hmcall_sysctrl_kev_read_event_config *__ret)
{
	return actvxactcapcall_hmcall_sysctrl_kev_read_event_config(false, false, __rref, event_type, __ret);
}

extern int __actvcall_hmcall_sysctrl_kev_set_enable(unsigned long long __rpc_info, void *__buf, struct trace_event event);


extern int __actvcapcall_hmcall_sysctrl_kev_set_enable(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct trace_event event);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_kev_set_enable(bool is_xact_fwd, bool is_xact_allow_refwd, struct trace_event event)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_kev_set_enable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct trace_event), __arch_actv_rpc_stksz_alignment(struct trace_event));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_kev_set_enable(rpc_info, NULL, event);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_kev_set_enable(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct trace_event event)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_kev_set_enable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct trace_event), __arch_actv_rpc_stksz_alignment(struct trace_event));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_kev_set_enable(__rref, rpc_info, NULL, event);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_kev_set_enable(struct trace_event event)
{
	return actvxactcall_hmcall_sysctrl_kev_set_enable(false, false, event);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_kev_set_enable(rref_t __rref, struct trace_event event)
{
	return actvxactcapcall_hmcall_sysctrl_kev_set_enable(false, false, __rref, event);
}

extern int __actvcall_hmcall_sysctrl_kev_set_filter(unsigned long long __rpc_info, void *__buf, struct trace_event event);


extern int __actvcapcall_hmcall_sysctrl_kev_set_filter(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct trace_event event);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_kev_set_filter(bool is_xact_fwd, bool is_xact_allow_refwd, struct trace_event event)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_kev_set_filter;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct trace_event), __arch_actv_rpc_stksz_alignment(struct trace_event));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_kev_set_filter(rpc_info, NULL, event);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_kev_set_filter(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct trace_event event)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_kev_set_filter;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct trace_event), __arch_actv_rpc_stksz_alignment(struct trace_event));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_kev_set_filter(__rref, rpc_info, NULL, event);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_kev_set_filter(struct trace_event event)
{
	return actvxactcall_hmcall_sysctrl_kev_set_filter(false, false, event);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_kev_set_filter(rref_t __rref, struct trace_event event)
{
	return actvxactcapcall_hmcall_sysctrl_kev_set_filter(false, false, __rref, event);
}

extern int __actvcall_hmcall_sysctrl_kev_print(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_sysctrl_kev_print(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_kev_print(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_kev_print;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_kev_print(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_kev_print(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_kev_print;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_kev_print(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_kev_print(void)
{
	return actvxactcall_hmcall_sysctrl_kev_print(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_kev_print(rref_t __rref)
{
	return actvxactcapcall_hmcall_sysctrl_kev_print(false, false, __rref);
}

extern int __actvcall_hmcall_sysctrl_kev_klog(unsigned long long __rpc_info, void *__buf, unsigned long level, const char *str, unsigned long size);


extern int __actvcapcall_hmcall_sysctrl_kev_klog(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long level, const char *str, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysctrl_kev_klog(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long level, const char *str, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_kev_klog;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysctrl_kev_klog(rpc_info, NULL, level, str, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysctrl_kev_klog(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long level, const char *str, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_sysctrl_kev_klog;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysctrl_kev_klog(__rref, rpc_info, NULL, level, str, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysctrl_kev_klog(unsigned long level, const char *str, unsigned long size)
{
	return actvxactcall_hmcall_sysctrl_kev_klog(false, false, level, str, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysctrl_kev_klog(rref_t __rref, unsigned long level, const char *str, unsigned long size)
{
	return actvxactcapcall_hmcall_sysctrl_kev_klog(false, false, __rref, level, str, size);
}

extern int __actvcall_hmcall_mem_mmap(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd);


extern int __actvcapcall_hmcall_mem_mmap(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_mmap(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr, unsigned long length, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd, struct __actvret_hmcall_mem_mmap *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_mmap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct fs_service_name), __arch_actv_rpc_stksz_alignment(struct fs_service_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long long), __arch_actv_rpc_stksz_alignment(long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_mmap(rpc_info, __ret, addr, length, prot, flags, file_type, service_name, offset, fd);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_mmap(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr, unsigned long length, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd, struct __actvret_hmcall_mem_mmap *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_mmap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct fs_service_name), __arch_actv_rpc_stksz_alignment(struct fs_service_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long long), __arch_actv_rpc_stksz_alignment(long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_mmap(__rref, rpc_info, __ret, addr, length, prot, flags, file_type, service_name, offset, fd);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_mmap(const void *addr, unsigned long length, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd, struct __actvret_hmcall_mem_mmap *__ret)
{
	return actvxactcall_hmcall_mem_mmap(false, false, addr, length, prot, flags, file_type, service_name, offset, fd, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_mmap(rref_t __rref, const void *addr, unsigned long length, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd, struct __actvret_hmcall_mem_mmap *__ret)
{
	return actvxactcapcall_hmcall_mem_mmap(false, false, __rref, addr, length, prot, flags, file_type, service_name, offset, fd, __ret);
}

extern int __actvcall_hmcall_mem_munmap(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length);


extern int __actvcapcall_hmcall_mem_munmap(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_munmap(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr, unsigned long length)
{
	const unsigned long __callno = __sysmgr_method_mem_munmap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_munmap(rpc_info, NULL, addr, length);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_munmap(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr, unsigned long length)
{
	const unsigned long __callno = __sysmgr_method_mem_munmap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_munmap(__rref, rpc_info, NULL, addr, length);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_munmap(const void *addr, unsigned long length)
{
	return actvxactcall_hmcall_mem_munmap(false, false, addr, length);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_munmap(rref_t __rref, const void *addr, unsigned long length)
{
	return actvxactcapcall_hmcall_mem_munmap(false, false, __rref, addr, length);
}

extern int __actvcall_hmcall_mem_mremap(unsigned long long __rpc_info, void *__buf, void *old_addr, unsigned long old_len, unsigned long new_len, unsigned int flags, void *new_addr);


extern int __actvcapcall_hmcall_mem_mremap(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *old_addr, unsigned long old_len, unsigned long new_len, unsigned int flags, void *new_addr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_mremap(bool is_xact_fwd, bool is_xact_allow_refwd, void *old_addr, unsigned long old_len, unsigned long new_len, unsigned int flags, void *new_addr, struct __actvret_hmcall_mem_mremap *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_mremap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_mremap(rpc_info, __ret, old_addr, old_len, new_len, flags, new_addr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_mremap(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, void *old_addr, unsigned long old_len, unsigned long new_len, unsigned int flags, void *new_addr, struct __actvret_hmcall_mem_mremap *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_mremap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_mremap(__rref, rpc_info, __ret, old_addr, old_len, new_len, flags, new_addr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_mremap(void *old_addr, unsigned long old_len, unsigned long new_len, unsigned int flags, void *new_addr, struct __actvret_hmcall_mem_mremap *__ret)
{
	return actvxactcall_hmcall_mem_mremap(false, false, old_addr, old_len, new_len, flags, new_addr, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_mremap(rref_t __rref, void *old_addr, unsigned long old_len, unsigned long new_len, unsigned int flags, void *new_addr, struct __actvret_hmcall_mem_mremap *__ret)
{
	return actvxactcapcall_hmcall_mem_mremap(false, false, __rref, old_addr, old_len, new_len, flags, new_addr, __ret);
}

extern int __actvcall_hmcall_mem_alloc_kmem(unsigned long long __rpc_info, void *__buf, unsigned long size);


extern int __actvcapcall_hmcall_mem_alloc_kmem(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_alloc_kmem(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long size, struct __actvret_hmcall_mem_alloc_kmem *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_alloc_kmem;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_alloc_kmem(rpc_info, __ret, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_alloc_kmem(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long size, struct __actvret_hmcall_mem_alloc_kmem *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_alloc_kmem;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_alloc_kmem(__rref, rpc_info, __ret, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_alloc_kmem(unsigned long size, struct __actvret_hmcall_mem_alloc_kmem *__ret)
{
	return actvxactcall_hmcall_mem_alloc_kmem(false, false, size, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_alloc_kmem(rref_t __rref, unsigned long size, struct __actvret_hmcall_mem_alloc_kmem *__ret)
{
	return actvxactcapcall_hmcall_mem_alloc_kmem(false, false, __rref, size, __ret);
}

extern int __actvcall_hmcall_mem_free_kmem(unsigned long long __rpc_info, void *__buf, unsigned long vstart);


extern int __actvcapcall_hmcall_mem_free_kmem(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long vstart);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_free_kmem(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long vstart)
{
	const unsigned long __callno = __sysmgr_method_mem_free_kmem;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_free_kmem(rpc_info, NULL, vstart);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_free_kmem(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long vstart)
{
	const unsigned long __callno = __sysmgr_method_mem_free_kmem;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_free_kmem(__rref, rpc_info, NULL, vstart);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_free_kmem(unsigned long vstart)
{
	return actvxactcall_hmcall_mem_free_kmem(false, false, vstart);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_free_kmem(rref_t __rref, unsigned long vstart)
{
	return actvxactcapcall_hmcall_mem_free_kmem(false, false, __rref, vstart);
}

extern int __actvcall_hmcall_mem_alloc_pmem(unsigned long long __rpc_info, void *__buf, unsigned long size);


extern int __actvcapcall_hmcall_mem_alloc_pmem(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_alloc_pmem(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long size, struct __actvret_hmcall_mem_alloc_pmem *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_alloc_pmem;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_alloc_pmem(rpc_info, __ret, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_alloc_pmem(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long size, struct __actvret_hmcall_mem_alloc_pmem *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_alloc_pmem;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_alloc_pmem(__rref, rpc_info, __ret, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_alloc_pmem(unsigned long size, struct __actvret_hmcall_mem_alloc_pmem *__ret)
{
	return actvxactcall_hmcall_mem_alloc_pmem(false, false, size, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_alloc_pmem(rref_t __rref, unsigned long size, struct __actvret_hmcall_mem_alloc_pmem *__ret)
{
	return actvxactcapcall_hmcall_mem_alloc_pmem(false, false, __rref, size, __ret);
}

extern int __actvcall_hmcall_mem_free_pmem(unsigned long long __rpc_info, void *__buf, unsigned long long pmem_cref);


extern int __actvcapcall_hmcall_mem_free_pmem(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long pmem_cref);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_free_pmem(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long pmem_cref)
{
	const unsigned long __callno = __sysmgr_method_mem_free_pmem;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_free_pmem(rpc_info, NULL, pmem_cref);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_free_pmem(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long pmem_cref)
{
	const unsigned long __callno = __sysmgr_method_mem_free_pmem;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_free_pmem(__rref, rpc_info, NULL, pmem_cref);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_free_pmem(unsigned long long pmem_cref)
{
	return actvxactcall_hmcall_mem_free_pmem(false, false, pmem_cref);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_free_pmem(rref_t __rref, unsigned long long pmem_cref)
{
	return actvxactcapcall_hmcall_mem_free_pmem(false, false, __rref, pmem_cref);
}

extern int __actvcall_hmcall_mem_brk(unsigned long long __rpc_info, void *__buf, const void *brk);


extern int __actvcapcall_hmcall_mem_brk(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *brk);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_brk(bool is_xact_fwd, bool is_xact_allow_refwd, const void *brk, struct __actvret_hmcall_mem_brk *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_brk;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_brk(rpc_info, __ret, brk);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_brk(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *brk, struct __actvret_hmcall_mem_brk *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_brk;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_brk(__rref, rpc_info, __ret, brk);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_brk(const void *brk, struct __actvret_hmcall_mem_brk *__ret)
{
	return actvxactcall_hmcall_mem_brk(false, false, brk, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_brk(rref_t __rref, const void *brk, struct __actvret_hmcall_mem_brk *__ret)
{
	return actvxactcapcall_hmcall_mem_brk(false, false, __rref, brk, __ret);
}

extern int __actvcall_hmcall_mem_madvise(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int flags);


extern int __actvcapcall_hmcall_mem_madvise(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_madvise(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr, unsigned long length, unsigned int flags)
{
	const unsigned long __callno = __sysmgr_method_mem_madvise;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_madvise(rpc_info, NULL, addr, length, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_madvise(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr, unsigned long length, unsigned int flags)
{
	const unsigned long __callno = __sysmgr_method_mem_madvise;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_madvise(__rref, rpc_info, NULL, addr, length, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_madvise(const void *addr, unsigned long length, unsigned int flags)
{
	return actvxactcall_hmcall_mem_madvise(false, false, addr, length, flags);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_madvise(rref_t __rref, const void *addr, unsigned long length, unsigned int flags)
{
	return actvxactcapcall_hmcall_mem_madvise(false, false, __rref, addr, length, flags);
}

extern int __actvcall_hmcall_mem_mprotect(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int prot);


extern int __actvcapcall_hmcall_mem_mprotect(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int prot);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_mprotect(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr, unsigned long length, unsigned int prot)
{
	const unsigned long __callno = __sysmgr_method_mem_mprotect;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_mprotect(rpc_info, NULL, addr, length, prot);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_mprotect(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr, unsigned long length, unsigned int prot)
{
	const unsigned long __callno = __sysmgr_method_mem_mprotect;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_mprotect(__rref, rpc_info, NULL, addr, length, prot);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_mprotect(const void *addr, unsigned long length, unsigned int prot)
{
	return actvxactcall_hmcall_mem_mprotect(false, false, addr, length, prot);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_mprotect(rref_t __rref, const void *addr, unsigned long length, unsigned int prot)
{
	return actvxactcapcall_hmcall_mem_mprotect(false, false, __rref, addr, length, prot);
}

extern int __actvcall_hmcall_mem_msync(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int flags);


extern int __actvcapcall_hmcall_mem_msync(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_msync(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr, unsigned long length, unsigned int flags)
{
	const unsigned long __callno = __sysmgr_method_mem_msync;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_msync(rpc_info, NULL, addr, length, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_msync(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr, unsigned long length, unsigned int flags)
{
	const unsigned long __callno = __sysmgr_method_mem_msync;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_msync(__rref, rpc_info, NULL, addr, length, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_msync(const void *addr, unsigned long length, unsigned int flags)
{
	return actvxactcall_hmcall_mem_msync(false, false, addr, length, flags);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_msync(rref_t __rref, const void *addr, unsigned long length, unsigned int flags)
{
	return actvxactcapcall_hmcall_mem_msync(false, false, __rref, addr, length, flags);
}

extern int __actvcall_hmcall_mem_mlock(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length);


extern int __actvcapcall_hmcall_mem_mlock(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_mlock(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr, unsigned long length)
{
	const unsigned long __callno = __sysmgr_method_mem_mlock;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_mlock(rpc_info, NULL, addr, length);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_mlock(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr, unsigned long length)
{
	const unsigned long __callno = __sysmgr_method_mem_mlock;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_mlock(__rref, rpc_info, NULL, addr, length);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_mlock(const void *addr, unsigned long length)
{
	return actvxactcall_hmcall_mem_mlock(false, false, addr, length);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_mlock(rref_t __rref, const void *addr, unsigned long length)
{
	return actvxactcapcall_hmcall_mem_mlock(false, false, __rref, addr, length);
}

extern int __actvcall_hmcall_mem_munlock(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length);


extern int __actvcapcall_hmcall_mem_munlock(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_munlock(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr, unsigned long length)
{
	const unsigned long __callno = __sysmgr_method_mem_munlock;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_munlock(rpc_info, NULL, addr, length);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_munlock(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr, unsigned long length)
{
	const unsigned long __callno = __sysmgr_method_mem_munlock;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_munlock(__rref, rpc_info, NULL, addr, length);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_munlock(const void *addr, unsigned long length)
{
	return actvxactcall_hmcall_mem_munlock(false, false, addr, length);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_munlock(rref_t __rref, const void *addr, unsigned long length)
{
	return actvxactcapcall_hmcall_mem_munlock(false, false, __rref, addr, length);
}

extern int __actvcall_hmcall_mem_mlockall(unsigned long long __rpc_info, void *__buf, unsigned int flags);


extern int __actvcapcall_hmcall_mem_mlockall(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_mlockall(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int flags)
{
	const unsigned long __callno = __sysmgr_method_mem_mlockall;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_mlockall(rpc_info, NULL, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_mlockall(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int flags)
{
	const unsigned long __callno = __sysmgr_method_mem_mlockall;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_mlockall(__rref, rpc_info, NULL, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_mlockall(unsigned int flags)
{
	return actvxactcall_hmcall_mem_mlockall(false, false, flags);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_mlockall(rref_t __rref, unsigned int flags)
{
	return actvxactcapcall_hmcall_mem_mlockall(false, false, __rref, flags);
}

extern int __actvcall_hmcall_mem_munlockall(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_mem_munlockall(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_munlockall(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_mem_munlockall;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_munlockall(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_munlockall(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_mem_munlockall;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_munlockall(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_munlockall(void)
{
	return actvxactcall_hmcall_mem_munlockall(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_munlockall(rref_t __rref)
{
	return actvxactcapcall_hmcall_mem_munlockall(false, false, __rref);
}

extern int __actvcall_hmcall_mem_drop_file_cache(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_mem_drop_file_cache(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_drop_file_cache(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_mem_drop_file_cache *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_drop_file_cache;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_drop_file_cache(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_drop_file_cache(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_mem_drop_file_cache *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_drop_file_cache;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_drop_file_cache(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_drop_file_cache(struct __actvret_hmcall_mem_drop_file_cache *__ret)
{
	return actvxactcall_hmcall_mem_drop_file_cache(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_drop_file_cache(rref_t __rref, struct __actvret_hmcall_mem_drop_file_cache *__ret)
{
	return actvxactcapcall_hmcall_mem_drop_file_cache(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_mem_ioremap_prepare(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int prot, unsigned int flags);


extern int __actvcapcall_hmcall_mem_ioremap_prepare(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int prot, unsigned int flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_ioremap_prepare(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr, unsigned long length, unsigned int prot, unsigned int flags, struct __actvret_hmcall_mem_ioremap_prepare *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_ioremap_prepare;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_ioremap_prepare(rpc_info, __ret, addr, length, prot, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_ioremap_prepare(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr, unsigned long length, unsigned int prot, unsigned int flags, struct __actvret_hmcall_mem_ioremap_prepare *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_ioremap_prepare;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_ioremap_prepare(__rref, rpc_info, __ret, addr, length, prot, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_ioremap_prepare(const void *addr, unsigned long length, unsigned int prot, unsigned int flags, struct __actvret_hmcall_mem_ioremap_prepare *__ret)
{
	return actvxactcall_hmcall_mem_ioremap_prepare(false, false, addr, length, prot, flags, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_ioremap_prepare(rref_t __rref, const void *addr, unsigned long length, unsigned int prot, unsigned int flags, struct __actvret_hmcall_mem_ioremap_prepare *__ret)
{
	return actvxactcapcall_hmcall_mem_ioremap_prepare(false, false, __rref, addr, length, prot, flags, __ret);
}

extern int __actvcall_hmcall_mem_iomem_mmap_page(unsigned long long __rpc_info, void *__buf, unsigned long long vspace_rref, unsigned long long paddr, void *vaddr, unsigned long len, unsigned long long hint);


extern int __actvcapcall_hmcall_mem_iomem_mmap_page(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long vspace_rref, unsigned long long paddr, void *vaddr, unsigned long len, unsigned long long hint);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_iomem_mmap_page(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long vspace_rref, unsigned long long paddr, void *vaddr, unsigned long len, unsigned long long hint)
{
	const unsigned long __callno = __sysmgr_method_mem_iomem_mmap_page;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_iomem_mmap_page(rpc_info, NULL, vspace_rref, paddr, vaddr, len, hint);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_iomem_mmap_page(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long vspace_rref, unsigned long long paddr, void *vaddr, unsigned long len, unsigned long long hint)
{
	const unsigned long __callno = __sysmgr_method_mem_iomem_mmap_page;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_iomem_mmap_page(__rref, rpc_info, NULL, vspace_rref, paddr, vaddr, len, hint);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_iomem_mmap_page(unsigned long long vspace_rref, unsigned long long paddr, void *vaddr, unsigned long len, unsigned long long hint)
{
	return actvxactcall_hmcall_mem_iomem_mmap_page(false, false, vspace_rref, paddr, vaddr, len, hint);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_iomem_mmap_page(rref_t __rref, unsigned long long vspace_rref, unsigned long long paddr, void *vaddr, unsigned long len, unsigned long long hint)
{
	return actvxactcapcall_hmcall_mem_iomem_mmap_page(false, false, __rref, vspace_rref, paddr, vaddr, len, hint);
}

extern int __actvcall_hmcall_mem_file_mapping_stat(unsigned long long __rpc_info, void *__buf, unsigned int index, unsigned long long dev_id);


extern int __actvcapcall_hmcall_mem_file_mapping_stat(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int index, unsigned long long dev_id);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_file_mapping_stat(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int index, unsigned long long dev_id, struct __actvret_hmcall_mem_file_mapping_stat *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_file_mapping_stat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_file_mapping_stat(rpc_info, __ret, index, dev_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_file_mapping_stat(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int index, unsigned long long dev_id, struct __actvret_hmcall_mem_file_mapping_stat *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_file_mapping_stat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_file_mapping_stat(__rref, rpc_info, __ret, index, dev_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_file_mapping_stat(unsigned int index, unsigned long long dev_id, struct __actvret_hmcall_mem_file_mapping_stat *__ret)
{
	return actvxactcall_hmcall_mem_file_mapping_stat(false, false, index, dev_id, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_file_mapping_stat(rref_t __rref, unsigned int index, unsigned long long dev_id, struct __actvret_hmcall_mem_file_mapping_stat *__ret)
{
	return actvxactcapcall_hmcall_mem_file_mapping_stat(false, false, __rref, index, dev_id, __ret);
}

extern int __actvcall_hmcall_mem_shm_open(unsigned long long __rpc_info, void *__buf, struct memmgr_shm_name name, unsigned long len, unsigned long long oflag, mode_t mode);


extern int __actvcapcall_hmcall_mem_shm_open(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct memmgr_shm_name name, unsigned long len, unsigned long long oflag, mode_t mode);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_shm_open(bool is_xact_fwd, bool is_xact_allow_refwd, struct memmgr_shm_name name, unsigned long len, unsigned long long oflag, mode_t mode, struct __actvret_hmcall_mem_shm_open *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_open;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct memmgr_shm_name), __arch_actv_rpc_stksz_alignment(struct memmgr_shm_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_shm_open(rpc_info, __ret, name, len, oflag, mode);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_shm_open(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct memmgr_shm_name name, unsigned long len, unsigned long long oflag, mode_t mode, struct __actvret_hmcall_mem_shm_open *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_open;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct memmgr_shm_name), __arch_actv_rpc_stksz_alignment(struct memmgr_shm_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_shm_open(__rref, rpc_info, __ret, name, len, oflag, mode);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_shm_open(struct memmgr_shm_name name, unsigned long len, unsigned long long oflag, mode_t mode, struct __actvret_hmcall_mem_shm_open *__ret)
{
	return actvxactcall_hmcall_mem_shm_open(false, false, name, len, oflag, mode, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_shm_open(rref_t __rref, struct memmgr_shm_name name, unsigned long len, unsigned long long oflag, mode_t mode, struct __actvret_hmcall_mem_shm_open *__ret)
{
	return actvxactcapcall_hmcall_mem_shm_open(false, false, __rref, name, len, oflag, mode, __ret);
}

extern int __actvcall_hmcall_mem_shm_open_anon(unsigned long long __rpc_info, void *__buf, unsigned long long key, unsigned long long oflag, unsigned long len);


extern int __actvcapcall_hmcall_mem_shm_open_anon(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long key, unsigned long long oflag, unsigned long len);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_shm_open_anon(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long key, unsigned long long oflag, unsigned long len, struct __actvret_hmcall_mem_shm_open_anon *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_open_anon;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_shm_open_anon(rpc_info, __ret, key, oflag, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_shm_open_anon(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long key, unsigned long long oflag, unsigned long len, struct __actvret_hmcall_mem_shm_open_anon *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_open_anon;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_shm_open_anon(__rref, rpc_info, __ret, key, oflag, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_shm_open_anon(unsigned long long key, unsigned long long oflag, unsigned long len, struct __actvret_hmcall_mem_shm_open_anon *__ret)
{
	return actvxactcall_hmcall_mem_shm_open_anon(false, false, key, oflag, len, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_shm_open_anon(rref_t __rref, unsigned long long key, unsigned long long oflag, unsigned long len, struct __actvret_hmcall_mem_shm_open_anon *__ret)
{
	return actvxactcapcall_hmcall_mem_shm_open_anon(false, false, __rref, key, oflag, len, __ret);
}

extern int __actvcall_hmcall_mem_shm_unlink(unsigned long long __rpc_info, void *__buf, struct memmgr_shm_name name);


extern int __actvcapcall_hmcall_mem_shm_unlink(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct memmgr_shm_name name);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_shm_unlink(bool is_xact_fwd, bool is_xact_allow_refwd, struct memmgr_shm_name name)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_unlink;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct memmgr_shm_name), __arch_actv_rpc_stksz_alignment(struct memmgr_shm_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_shm_unlink(rpc_info, NULL, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_shm_unlink(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct memmgr_shm_name name)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_unlink;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct memmgr_shm_name), __arch_actv_rpc_stksz_alignment(struct memmgr_shm_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_shm_unlink(__rref, rpc_info, NULL, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_shm_unlink(struct memmgr_shm_name name)
{
	return actvxactcall_hmcall_mem_shm_unlink(false, false, name);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_shm_unlink(rref_t __rref, struct memmgr_shm_name name)
{
	return actvxactcapcall_hmcall_mem_shm_unlink(false, false, __rref, name);
}

extern int __actvcall_hmcall_mem_shm_unlink_anon(unsigned long long __rpc_info, void *__buf, int shm_id);


extern int __actvcapcall_hmcall_mem_shm_unlink_anon(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_shm_unlink_anon(bool is_xact_fwd, bool is_xact_allow_refwd, int shm_id)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_unlink_anon;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_shm_unlink_anon(rpc_info, NULL, shm_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_shm_unlink_anon(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shm_id)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_unlink_anon;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_shm_unlink_anon(__rref, rpc_info, NULL, shm_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_shm_unlink_anon(int shm_id)
{
	return actvxactcall_hmcall_mem_shm_unlink_anon(false, false, shm_id);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_shm_unlink_anon(rref_t __rref, int shm_id)
{
	return actvxactcapcall_hmcall_mem_shm_unlink_anon(false, false, __rref, shm_id);
}

extern int __actvcall_hmcall_mem_shm_close(unsigned long long __rpc_info, void *__buf, int shm_id);


extern int __actvcapcall_hmcall_mem_shm_close(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_shm_close(bool is_xact_fwd, bool is_xact_allow_refwd, int shm_id)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_close;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_shm_close(rpc_info, NULL, shm_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_shm_close(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shm_id)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_close;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_shm_close(__rref, rpc_info, NULL, shm_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_shm_close(int shm_id)
{
	return actvxactcall_hmcall_mem_shm_close(false, false, shm_id);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_shm_close(rref_t __rref, int shm_id)
{
	return actvxactcapcall_hmcall_mem_shm_close(false, false, __rref, shm_id);
}

extern int __actvcall_hmcall_mem_shm_check_owner(unsigned long long __rpc_info, void *__buf, unsigned long long key, unsigned int cnode_idx);


extern int __actvcapcall_hmcall_mem_shm_check_owner(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long key, unsigned int cnode_idx);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_shm_check_owner(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long key, unsigned int cnode_idx)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_check_owner;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_shm_check_owner(rpc_info, NULL, key, cnode_idx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_shm_check_owner(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long key, unsigned int cnode_idx)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_check_owner;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_shm_check_owner(__rref, rpc_info, NULL, key, cnode_idx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_shm_check_owner(unsigned long long key, unsigned int cnode_idx)
{
	return actvxactcall_hmcall_mem_shm_check_owner(false, false, key, cnode_idx);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_shm_check_owner(rref_t __rref, unsigned long long key, unsigned int cnode_idx)
{
	return actvxactcapcall_hmcall_mem_shm_check_owner(false, false, __rref, key, cnode_idx);
}

extern int __actvcall_hmcall_mem_shm_reclaim_pages(unsigned long long __rpc_info, void *__buf, int shm_id, const void *start_addr, unsigned long nr_pages);


extern int __actvcapcall_hmcall_mem_shm_reclaim_pages(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, const void *start_addr, unsigned long nr_pages);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_shm_reclaim_pages(bool is_xact_fwd, bool is_xact_allow_refwd, int shm_id, const void *start_addr, unsigned long nr_pages)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_reclaim_pages;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_shm_reclaim_pages(rpc_info, NULL, shm_id, start_addr, nr_pages);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_shm_reclaim_pages(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shm_id, const void *start_addr, unsigned long nr_pages)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_reclaim_pages;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_shm_reclaim_pages(__rref, rpc_info, NULL, shm_id, start_addr, nr_pages);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_shm_reclaim_pages(int shm_id, const void *start_addr, unsigned long nr_pages)
{
	return actvxactcall_hmcall_mem_shm_reclaim_pages(false, false, shm_id, start_addr, nr_pages);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_shm_reclaim_pages(rref_t __rref, int shm_id, const void *start_addr, unsigned long nr_pages)
{
	return actvxactcapcall_hmcall_mem_shm_reclaim_pages(false, false, __rref, shm_id, start_addr, nr_pages);
}

extern int __actvcall_hmcall_mem_grant_shm_to_caller(unsigned long long __rpc_info, void *__buf, int shm_id, unsigned int prot);


extern int __actvcapcall_hmcall_mem_grant_shm_to_caller(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, unsigned int prot);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_grant_shm_to_caller(bool is_xact_fwd, bool is_xact_allow_refwd, int shm_id, unsigned int prot, struct __actvret_hmcall_mem_grant_shm_to_caller *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_grant_shm_to_caller;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_grant_shm_to_caller(rpc_info, __ret, shm_id, prot);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_grant_shm_to_caller(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shm_id, unsigned int prot, struct __actvret_hmcall_mem_grant_shm_to_caller *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_grant_shm_to_caller;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_grant_shm_to_caller(__rref, rpc_info, __ret, shm_id, prot);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_grant_shm_to_caller(int shm_id, unsigned int prot, struct __actvret_hmcall_mem_grant_shm_to_caller *__ret)
{
	return actvxactcall_hmcall_mem_grant_shm_to_caller(false, false, shm_id, prot, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_grant_shm_to_caller(rref_t __rref, int shm_id, unsigned int prot, struct __actvret_hmcall_mem_grant_shm_to_caller *__ret)
{
	return actvxactcapcall_hmcall_mem_grant_shm_to_caller(false, false, __rref, shm_id, prot, __ret);
}

extern int __actvcall_hmcall_mem_grant_shm_by_xref(unsigned long long __rpc_info, void *__buf, int shm_id, unsigned int prot, xref_t xref);


extern int __actvcapcall_hmcall_mem_grant_shm_by_xref(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, unsigned int prot, xref_t xref);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_grant_shm_by_xref(bool is_xact_fwd, bool is_xact_allow_refwd, int shm_id, unsigned int prot, xref_t xref, struct __actvret_hmcall_mem_grant_shm_by_xref *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_grant_shm_by_xref;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(xref_t), __arch_actv_rpc_stksz_alignment(xref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_grant_shm_by_xref(rpc_info, __ret, shm_id, prot, xref);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_grant_shm_by_xref(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shm_id, unsigned int prot, xref_t xref, struct __actvret_hmcall_mem_grant_shm_by_xref *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_grant_shm_by_xref;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(xref_t), __arch_actv_rpc_stksz_alignment(xref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_grant_shm_by_xref(__rref, rpc_info, __ret, shm_id, prot, xref);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_grant_shm_by_xref(int shm_id, unsigned int prot, xref_t xref, struct __actvret_hmcall_mem_grant_shm_by_xref *__ret)
{
	return actvxactcall_hmcall_mem_grant_shm_by_xref(false, false, shm_id, prot, xref, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_grant_shm_by_xref(rref_t __rref, int shm_id, unsigned int prot, xref_t xref, struct __actvret_hmcall_mem_grant_shm_by_xref *__ret)
{
	return actvxactcapcall_hmcall_mem_grant_shm_by_xref(false, false, __rref, shm_id, prot, xref, __ret);
}

extern int __actvcall_hmcall_mem_ashm_grant_trans(unsigned long long __rpc_info, void *__buf, unsigned long long key, xref_t xref);


extern int __actvcapcall_hmcall_mem_ashm_grant_trans(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long key, xref_t xref);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_ashm_grant_trans(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long key, xref_t xref)
{
	const unsigned long __callno = __sysmgr_method_mem_ashm_grant_trans;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(xref_t), __arch_actv_rpc_stksz_alignment(xref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_ashm_grant_trans(rpc_info, NULL, key, xref);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_ashm_grant_trans(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long key, xref_t xref)
{
	const unsigned long __callno = __sysmgr_method_mem_ashm_grant_trans;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(xref_t), __arch_actv_rpc_stksz_alignment(xref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_ashm_grant_trans(__rref, rpc_info, NULL, key, xref);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_ashm_grant_trans(unsigned long long key, xref_t xref)
{
	return actvxactcall_hmcall_mem_ashm_grant_trans(false, false, key, xref);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_ashm_grant_trans(rref_t __rref, unsigned long long key, xref_t xref)
{
	return actvxactcapcall_hmcall_mem_ashm_grant_trans(false, false, __rref, key, xref);
}

extern int __actvcall_hmcall_mem_query_shm_info(unsigned long long __rpc_info, void *__buf, int shm_id);


extern int __actvcapcall_hmcall_mem_query_shm_info(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_query_shm_info(bool is_xact_fwd, bool is_xact_allow_refwd, int shm_id, struct __actvret_hmcall_mem_query_shm_info *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_query_shm_info;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_query_shm_info(rpc_info, __ret, shm_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_query_shm_info(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shm_id, struct __actvret_hmcall_mem_query_shm_info *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_query_shm_info;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_query_shm_info(__rref, rpc_info, __ret, shm_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_query_shm_info(int shm_id, struct __actvret_hmcall_mem_query_shm_info *__ret)
{
	return actvxactcall_hmcall_mem_query_shm_info(false, false, shm_id, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_query_shm_info(rref_t __rref, int shm_id, struct __actvret_hmcall_mem_query_shm_info *__ret)
{
	return actvxactcapcall_hmcall_mem_query_shm_info(false, false, __rref, shm_id, __ret);
}

extern int __actvcall_hmcall_mem_query_shm_paddr(unsigned long long __rpc_info, void *__buf, int shm_id, unsigned long long *dst, unsigned long size);


extern int __actvcapcall_hmcall_mem_query_shm_paddr(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, unsigned long long *dst, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_query_shm_paddr(bool is_xact_fwd, bool is_xact_allow_refwd, int shm_id, unsigned long long *dst, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_mem_query_shm_paddr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long*), __arch_actv_rpc_stksz_alignment(unsigned long long*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_query_shm_paddr(rpc_info, NULL, shm_id, dst, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_query_shm_paddr(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shm_id, unsigned long long *dst, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_mem_query_shm_paddr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long*), __arch_actv_rpc_stksz_alignment(unsigned long long*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_query_shm_paddr(__rref, rpc_info, NULL, shm_id, dst, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_query_shm_paddr(int shm_id, unsigned long long *dst, unsigned long size)
{
	return actvxactcall_hmcall_mem_query_shm_paddr(false, false, shm_id, dst, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_query_shm_paddr(rref_t __rref, int shm_id, unsigned long long *dst, unsigned long size)
{
	return actvxactcapcall_hmcall_mem_query_shm_paddr(false, false, __rref, shm_id, dst, size);
}

extern int __actvcall_hmcall_mem_shm_dump_info(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_mem_shm_dump_info(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_shm_dump_info(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_dump_info;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_shm_dump_info(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_shm_dump_info(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_dump_info;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_shm_dump_info(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_shm_dump_info(void)
{
	return actvxactcall_hmcall_mem_shm_dump_info(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_shm_dump_info(rref_t __rref)
{
	return actvxactcapcall_hmcall_mem_shm_dump_info(false, false, __rref);
}

extern int __actvcall_hmcall_mem_shm_chmod(unsigned long long __rpc_info, void *__buf, struct memmgr_shm_name name, mode_t mode);


extern int __actvcapcall_hmcall_mem_shm_chmod(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct memmgr_shm_name name, mode_t mode);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_shm_chmod(bool is_xact_fwd, bool is_xact_allow_refwd, struct memmgr_shm_name name, mode_t mode)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_chmod;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct memmgr_shm_name), __arch_actv_rpc_stksz_alignment(struct memmgr_shm_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_shm_chmod(rpc_info, NULL, name, mode);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_shm_chmod(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct memmgr_shm_name name, mode_t mode)
{
	const unsigned long __callno = __sysmgr_method_mem_shm_chmod;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct memmgr_shm_name), __arch_actv_rpc_stksz_alignment(struct memmgr_shm_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_shm_chmod(__rref, rpc_info, NULL, name, mode);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_shm_chmod(struct memmgr_shm_name name, mode_t mode)
{
	return actvxactcall_hmcall_mem_shm_chmod(false, false, name, mode);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_shm_chmod(rref_t __rref, struct memmgr_shm_name name, mode_t mode)
{
	return actvxactcapcall_hmcall_mem_shm_chmod(false, false, __rref, name, mode);
}

extern int __actvcall_hmcall_mem_extend_ctable(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_mem_extend_ctable(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_extend_ctable(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_mem_extend_ctable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_extend_ctable(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_extend_ctable(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_mem_extend_ctable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_extend_ctable(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_extend_ctable(void)
{
	return actvxactcall_hmcall_mem_extend_ctable(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_extend_ctable(rref_t __rref)
{
	return actvxactcapcall_hmcall_mem_extend_ctable(false, false, __rref);
}

extern int __actvcall_hmcall_mem_extend_utable(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_mem_extend_utable(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_extend_utable(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_mem_extend_utable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_extend_utable(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_extend_utable(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_mem_extend_utable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_extend_utable(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_extend_utable(void)
{
	return actvxactcall_hmcall_mem_extend_utable(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_extend_utable(rref_t __rref)
{
	return actvxactcapcall_hmcall_mem_extend_utable(false, false, __rref);
}

extern int __actvcall_hmcall_mem_extend_rtable(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_mem_extend_rtable(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_extend_rtable(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_mem_extend_rtable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_extend_rtable(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_extend_rtable(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_mem_extend_rtable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_extend_rtable(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_extend_rtable(void)
{
	return actvxactcall_hmcall_mem_extend_rtable(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_extend_rtable(rref_t __rref)
{
	return actvxactcapcall_hmcall_mem_extend_rtable(false, false, __rref);
}

extern int __actvcall_hmcall_mem_stat(unsigned long long __rpc_info, void *__buf, unsigned int flags, struct bunch_ipc_attr attr);


extern int __actvcapcall_hmcall_mem_stat(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int flags, struct bunch_ipc_attr attr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_stat(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int flags, struct bunch_ipc_attr attr)
{
	const unsigned long __callno = __sysmgr_method_mem_stat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct bunch_ipc_attr), __arch_actv_rpc_stksz_alignment(struct bunch_ipc_attr));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_stat(rpc_info, NULL, flags, attr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_stat(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int flags, struct bunch_ipc_attr attr)
{
	const unsigned long __callno = __sysmgr_method_mem_stat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct bunch_ipc_attr), __arch_actv_rpc_stksz_alignment(struct bunch_ipc_attr));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_stat(__rref, rpc_info, NULL, flags, attr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_stat(unsigned int flags, struct bunch_ipc_attr attr)
{
	return actvxactcall_hmcall_mem_stat(false, false, flags, attr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_stat(rref_t __rref, unsigned int flags, struct bunch_ipc_attr attr)
{
	return actvxactcapcall_hmcall_mem_stat(false, false, __rref, flags, attr);
}

extern int __actvcall_hmcall_mem_set_anon_name(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, struct vr_anon_name anon_name);


extern int __actvcapcall_hmcall_mem_set_anon_name(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, struct vr_anon_name anon_name);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_set_anon_name(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr, unsigned long length, struct vr_anon_name anon_name)
{
	const unsigned long __callno = __sysmgr_method_mem_set_anon_name;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct vr_anon_name), __arch_actv_rpc_stksz_alignment(struct vr_anon_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_set_anon_name(rpc_info, NULL, addr, length, anon_name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_set_anon_name(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr, unsigned long length, struct vr_anon_name anon_name)
{
	const unsigned long __callno = __sysmgr_method_mem_set_anon_name;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct vr_anon_name), __arch_actv_rpc_stksz_alignment(struct vr_anon_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_set_anon_name(__rref, rpc_info, NULL, addr, length, anon_name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_set_anon_name(const void *addr, unsigned long length, struct vr_anon_name anon_name)
{
	return actvxactcall_hmcall_mem_set_anon_name(false, false, addr, length, anon_name);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_set_anon_name(rref_t __rref, const void *addr, unsigned long length, struct vr_anon_name anon_name)
{
	return actvxactcapcall_hmcall_mem_set_anon_name(false, false, __rref, addr, length, anon_name);
}

extern int __actvcall_hmcall_mem_process_vm_access(unsigned long long __rpc_info, void *__buf, int pid, int direction, const void *local_addr, unsigned long llen, const void *remote_addr, unsigned long rlen, unsigned int flags);


extern int __actvcapcall_hmcall_mem_process_vm_access(rref_t __rref, unsigned long long __rpc_info, void *__buf, int pid, int direction, const void *local_addr, unsigned long llen, const void *remote_addr, unsigned long rlen, unsigned int flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_process_vm_access(bool is_xact_fwd, bool is_xact_allow_refwd, int pid, int direction, const void *local_addr, unsigned long llen, const void *remote_addr, unsigned long rlen, unsigned int flags, struct __actvret_hmcall_mem_process_vm_access *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_process_vm_access;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_process_vm_access(rpc_info, __ret, pid, direction, local_addr, llen, remote_addr, rlen, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_process_vm_access(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int pid, int direction, const void *local_addr, unsigned long llen, const void *remote_addr, unsigned long rlen, unsigned int flags, struct __actvret_hmcall_mem_process_vm_access *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_process_vm_access;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_process_vm_access(__rref, rpc_info, __ret, pid, direction, local_addr, llen, remote_addr, rlen, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_process_vm_access(int pid, int direction, const void *local_addr, unsigned long llen, const void *remote_addr, unsigned long rlen, unsigned int flags, struct __actvret_hmcall_mem_process_vm_access *__ret)
{
	return actvxactcall_hmcall_mem_process_vm_access(false, false, pid, direction, local_addr, llen, remote_addr, rlen, flags, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_process_vm_access(rref_t __rref, int pid, int direction, const void *local_addr, unsigned long llen, const void *remote_addr, unsigned long rlen, unsigned int flags, struct __actvret_hmcall_mem_process_vm_access *__ret)
{
	return actvxactcapcall_hmcall_mem_process_vm_access(false, false, __rref, pid, direction, local_addr, llen, remote_addr, rlen, flags, __ret);
}

extern int __actvcall_hmcall_mem_mincore(unsigned long long __rpc_info, void *__buf, const void *addr, size_t length, const unsigned char *vec);


extern int __actvcapcall_hmcall_mem_mincore(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, size_t length, const unsigned char *vec);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_mincore(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr, size_t length, const unsigned char *vec)
{
	const unsigned long __callno = __sysmgr_method_mem_mincore;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const unsigned char*), __arch_actv_rpc_stksz_alignment(const unsigned char*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_mincore(rpc_info, NULL, addr, length, vec);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_mincore(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr, size_t length, const unsigned char *vec)
{
	const unsigned long __callno = __sysmgr_method_mem_mincore;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const unsigned char*), __arch_actv_rpc_stksz_alignment(const unsigned char*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_mincore(__rref, rpc_info, NULL, addr, length, vec);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_mincore(const void *addr, size_t length, const unsigned char *vec)
{
	return actvxactcall_hmcall_mem_mincore(false, false, addr, length, vec);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_mincore(rref_t __rref, const void *addr, size_t length, const unsigned char *vec)
{
	return actvxactcapcall_hmcall_mem_mincore(false, false, __rref, addr, length, vec);
}

extern int __actvcall_hmcall_mem_calculate(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_mem_calculate(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_calculate(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_mem_calculate *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_calculate;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_calculate(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_calculate(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_mem_calculate *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_calculate;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_calculate(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_calculate(struct __actvret_hmcall_mem_calculate *__ret)
{
	return actvxactcall_hmcall_mem_calculate(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_calculate(rref_t __rref, struct __actvret_hmcall_mem_calculate *__ret)
{
	return actvxactcapcall_hmcall_mem_calculate(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_mem_rmap_unmap_page(unsigned long long __rpc_info, void *__buf, const void *addr);


extern int __actvcapcall_hmcall_mem_rmap_unmap_page(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_rmap_unmap_page(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr)
{
	const unsigned long __callno = __sysmgr_method_mem_rmap_unmap_page;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_rmap_unmap_page(rpc_info, NULL, addr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_rmap_unmap_page(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr)
{
	const unsigned long __callno = __sysmgr_method_mem_rmap_unmap_page;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_rmap_unmap_page(__rref, rpc_info, NULL, addr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_rmap_unmap_page(const void *addr)
{
	return actvxactcall_hmcall_mem_rmap_unmap_page(false, false, addr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_rmap_unmap_page(rref_t __rref, const void *addr)
{
	return actvxactcapcall_hmcall_mem_rmap_unmap_page(false, false, __rref, addr);
}

extern int __actvcall_hmcall_mem_fs_stat_register(unsigned long long __rpc_info, void *__buf, const void *stat_addr);


extern int __actvcapcall_hmcall_mem_fs_stat_register(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *stat_addr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_fs_stat_register(bool is_xact_fwd, bool is_xact_allow_refwd, const void *stat_addr)
{
	const unsigned long __callno = __sysmgr_method_mem_fs_stat_register;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_fs_stat_register(rpc_info, NULL, stat_addr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_fs_stat_register(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *stat_addr)
{
	const unsigned long __callno = __sysmgr_method_mem_fs_stat_register;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_fs_stat_register(__rref, rpc_info, NULL, stat_addr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_fs_stat_register(const void *stat_addr)
{
	return actvxactcall_hmcall_mem_fs_stat_register(false, false, stat_addr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_fs_stat_register(rref_t __rref, const void *stat_addr)
{
	return actvxactcapcall_hmcall_mem_fs_stat_register(false, false, __rref, stat_addr);
}

extern int __actvcall_hmcall_mem_hugetlbfs_mount(unsigned long long __rpc_info, void *__buf, struct hgtlb_mount_args_s args);


extern int __actvcapcall_hmcall_mem_hugetlbfs_mount(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hgtlb_mount_args_s args);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_hugetlbfs_mount(bool is_xact_fwd, bool is_xact_allow_refwd, struct hgtlb_mount_args_s args, struct __actvret_hmcall_mem_hugetlbfs_mount *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_hugetlbfs_mount;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hgtlb_mount_args_s), __arch_actv_rpc_stksz_alignment(struct hgtlb_mount_args_s));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_hugetlbfs_mount(rpc_info, __ret, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_hugetlbfs_mount(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct hgtlb_mount_args_s args, struct __actvret_hmcall_mem_hugetlbfs_mount *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_hugetlbfs_mount;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hgtlb_mount_args_s), __arch_actv_rpc_stksz_alignment(struct hgtlb_mount_args_s));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_hugetlbfs_mount(__rref, rpc_info, __ret, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_hugetlbfs_mount(struct hgtlb_mount_args_s args, struct __actvret_hmcall_mem_hugetlbfs_mount *__ret)
{
	return actvxactcall_hmcall_mem_hugetlbfs_mount(false, false, args, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_hugetlbfs_mount(rref_t __rref, struct hgtlb_mount_args_s args, struct __actvret_hmcall_mem_hugetlbfs_mount *__ret)
{
	return actvxactcapcall_hmcall_mem_hugetlbfs_mount(false, false, __rref, args, __ret);
}

extern int __actvcall_hmcall_mem_register_devhost(unsigned long long __rpc_info, void *__buf, unsigned long long devhost_uref);


extern int __actvcapcall_hmcall_mem_register_devhost(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long devhost_uref);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_register_devhost(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long devhost_uref)
{
	const unsigned long __callno = __sysmgr_method_mem_register_devhost;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_register_devhost(rpc_info, NULL, devhost_uref);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_register_devhost(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long devhost_uref)
{
	const unsigned long __callno = __sysmgr_method_mem_register_devhost;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_register_devhost(__rref, rpc_info, NULL, devhost_uref);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_register_devhost(unsigned long long devhost_uref)
{
	return actvxactcall_hmcall_mem_register_devhost(false, false, devhost_uref);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_register_devhost(rref_t __rref, unsigned long long devhost_uref)
{
	return actvxactcapcall_hmcall_mem_register_devhost(false, false, __rref, devhost_uref);
}

extern int __actvcall_hmcall_mem_iomap_prepare(unsigned long long __rpc_info, void *__buf, const void *va, unsigned long len, unsigned int iomem_id, unsigned int prot, unsigned int flags);


extern int __actvcapcall_hmcall_mem_iomap_prepare(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *va, unsigned long len, unsigned int iomem_id, unsigned int prot, unsigned int flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_iomap_prepare(bool is_xact_fwd, bool is_xact_allow_refwd, const void *va, unsigned long len, unsigned int iomem_id, unsigned int prot, unsigned int flags, struct __actvret_hmcall_mem_iomap_prepare *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_iomap_prepare;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_iomap_prepare(rpc_info, __ret, va, len, iomem_id, prot, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_iomap_prepare(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *va, unsigned long len, unsigned int iomem_id, unsigned int prot, unsigned int flags, struct __actvret_hmcall_mem_iomap_prepare *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_iomap_prepare;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_iomap_prepare(__rref, rpc_info, __ret, va, len, iomem_id, prot, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_iomap_prepare(const void *va, unsigned long len, unsigned int iomem_id, unsigned int prot, unsigned int flags, struct __actvret_hmcall_mem_iomap_prepare *__ret)
{
	return actvxactcall_hmcall_mem_iomap_prepare(false, false, va, len, iomem_id, prot, flags, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_iomap_prepare(rref_t __rref, const void *va, unsigned long len, unsigned int iomem_id, unsigned int prot, unsigned int flags, struct __actvret_hmcall_mem_iomap_prepare *__ret)
{
	return actvxactcapcall_hmcall_mem_iomap_prepare(false, false, __rref, va, len, iomem_id, prot, flags, __ret);
}

extern int __actvcall_hmcall_mem_iomap_populate(unsigned long long __rpc_info, void *__buf, const void *va, unsigned long len, unsigned long long pa, unsigned long long hint);


extern int __actvcapcall_hmcall_mem_iomap_populate(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *va, unsigned long len, unsigned long long pa, unsigned long long hint);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_iomap_populate(bool is_xact_fwd, bool is_xact_allow_refwd, const void *va, unsigned long len, unsigned long long pa, unsigned long long hint)
{
	const unsigned long __callno = __sysmgr_method_mem_iomap_populate;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_iomap_populate(rpc_info, NULL, va, len, pa, hint);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_iomap_populate(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *va, unsigned long len, unsigned long long pa, unsigned long long hint)
{
	const unsigned long __callno = __sysmgr_method_mem_iomap_populate;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_iomap_populate(__rref, rpc_info, NULL, va, len, pa, hint);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_iomap_populate(const void *va, unsigned long len, unsigned long long pa, unsigned long long hint)
{
	return actvxactcall_hmcall_mem_iomap_populate(false, false, va, len, pa, hint);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_iomap_populate(rref_t __rref, const void *va, unsigned long len, unsigned long long pa, unsigned long long hint)
{
	return actvxactcapcall_hmcall_mem_iomap_populate(false, false, __rref, va, len, pa, hint);
}

extern int __actvcall_hmcall_mem_iomap_finish(unsigned long long __rpc_info, void *__buf, const void *va, unsigned int flag);


extern int __actvcapcall_hmcall_mem_iomap_finish(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *va, unsigned int flag);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_iomap_finish(bool is_xact_fwd, bool is_xact_allow_refwd, const void *va, unsigned int flag)
{
	const unsigned long __callno = __sysmgr_method_mem_iomap_finish;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_iomap_finish(rpc_info, NULL, va, flag);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_iomap_finish(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *va, unsigned int flag)
{
	const unsigned long __callno = __sysmgr_method_mem_iomap_finish;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_iomap_finish(__rref, rpc_info, NULL, va, flag);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_iomap_finish(const void *va, unsigned int flag)
{
	return actvxactcall_hmcall_mem_iomap_finish(false, false, va, flag);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_iomap_finish(rref_t __rref, const void *va, unsigned int flag)
{
	return actvxactcapcall_hmcall_mem_iomap_finish(false, false, __rref, va, flag);
}

extern int __actvcall_hmcall_mem_iomap_statpage(unsigned long long __rpc_info, void *__buf, const void *va);


extern int __actvcapcall_hmcall_mem_iomap_statpage(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *va);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_iomap_statpage(bool is_xact_fwd, bool is_xact_allow_refwd, const void *va, struct __actvret_hmcall_mem_iomap_statpage *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_iomap_statpage;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_iomap_statpage(rpc_info, __ret, va);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_iomap_statpage(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *va, struct __actvret_hmcall_mem_iomap_statpage *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_iomap_statpage;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_iomap_statpage(__rref, rpc_info, __ret, va);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_iomap_statpage(const void *va, struct __actvret_hmcall_mem_iomap_statpage *__ret)
{
	return actvxactcall_hmcall_mem_iomap_statpage(false, false, va, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_iomap_statpage(rref_t __rref, const void *va, struct __actvret_hmcall_mem_iomap_statpage *__ret)
{
	return actvxactcapcall_hmcall_mem_iomap_statpage(false, false, __rref, va, __ret);
}

extern int __actvcall_hmcall_mem_cma_dyn_init(unsigned long long __rpc_info, void *__buf, unsigned long size);


extern int __actvcapcall_hmcall_mem_cma_dyn_init(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_cma_dyn_init(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long size, struct __actvret_hmcall_mem_cma_dyn_init *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_cma_dyn_init;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_cma_dyn_init(rpc_info, __ret, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_cma_dyn_init(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long size, struct __actvret_hmcall_mem_cma_dyn_init *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_cma_dyn_init;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_cma_dyn_init(__rref, rpc_info, __ret, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_cma_dyn_init(unsigned long size, struct __actvret_hmcall_mem_cma_dyn_init *__ret)
{
	return actvxactcall_hmcall_mem_cma_dyn_init(false, false, size, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_cma_dyn_init(rref_t __rref, unsigned long size, struct __actvret_hmcall_mem_cma_dyn_init *__ret)
{
	return actvxactcapcall_hmcall_mem_cma_dyn_init(false, false, __rref, size, __ret);
}

extern int __actvcall_hmcall_mem_cma_alloc(unsigned long long __rpc_info, void *__buf, unsigned int cma_id, unsigned long size);


extern int __actvcapcall_hmcall_mem_cma_alloc(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int cma_id, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_cma_alloc(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int cma_id, unsigned long size, struct __actvret_hmcall_mem_cma_alloc *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_cma_alloc;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_cma_alloc(rpc_info, __ret, cma_id, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_cma_alloc(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int cma_id, unsigned long size, struct __actvret_hmcall_mem_cma_alloc *__ret)
{
	const unsigned long __callno = __sysmgr_method_mem_cma_alloc;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_cma_alloc(__rref, rpc_info, __ret, cma_id, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_cma_alloc(unsigned int cma_id, unsigned long size, struct __actvret_hmcall_mem_cma_alloc *__ret)
{
	return actvxactcall_hmcall_mem_cma_alloc(false, false, cma_id, size, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_cma_alloc(rref_t __rref, unsigned int cma_id, unsigned long size, struct __actvret_hmcall_mem_cma_alloc *__ret)
{
	return actvxactcapcall_hmcall_mem_cma_alloc(false, false, __rref, cma_id, size, __ret);
}

extern int __actvcall_hmcall_mem_cma_free(unsigned long long __rpc_info, void *__buf, unsigned int cma_id, unsigned long long paddr, unsigned long size);


extern int __actvcapcall_hmcall_mem_cma_free(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int cma_id, unsigned long long paddr, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mem_cma_free(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int cma_id, unsigned long long paddr, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_mem_cma_free;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mem_cma_free(rpc_info, NULL, cma_id, paddr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mem_cma_free(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int cma_id, unsigned long long paddr, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_mem_cma_free;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mem_cma_free(__rref, rpc_info, NULL, cma_id, paddr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mem_cma_free(unsigned int cma_id, unsigned long long paddr, unsigned long size)
{
	return actvxactcall_hmcall_mem_cma_free(false, false, cma_id, paddr, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mem_cma_free(rref_t __rref, unsigned int cma_id, unsigned long long paddr, unsigned long size)
{
	return actvxactcapcall_hmcall_mem_cma_free(false, false, __rref, cma_id, paddr, size);
}

extern int __actvcall_hmcall_proc_spawn(unsigned long long __rpc_info, void *__buf, struct hm_spawn_req req);


extern int __actvcapcall_hmcall_proc_spawn(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_spawn_req req);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_spawn(bool is_xact_fwd, bool is_xact_allow_refwd, struct hm_spawn_req req, struct __actvret_hmcall_proc_spawn *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_spawn;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_spawn_req), __arch_actv_rpc_stksz_alignment(struct hm_spawn_req));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_spawn(rpc_info, __ret, req);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_spawn(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct hm_spawn_req req, struct __actvret_hmcall_proc_spawn *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_spawn;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_spawn_req), __arch_actv_rpc_stksz_alignment(struct hm_spawn_req));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_spawn(__rref, rpc_info, __ret, req);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_spawn(struct hm_spawn_req req, struct __actvret_hmcall_proc_spawn *__ret)
{
	return actvxactcall_hmcall_proc_spawn(false, false, req, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_spawn(rref_t __rref, struct hm_spawn_req req, struct __actvret_hmcall_proc_spawn *__ret)
{
	return actvxactcapcall_hmcall_proc_spawn(false, false, __rref, req, __ret);
}

extern int __actvcall_hmcall_proc_waitid(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int options, void *infop);


extern int __actvcapcall_hmcall_proc_waitid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int options, void *infop);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_waitid(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, unsigned int options, void *infop, struct __actvret_hmcall_proc_waitid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_waitid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_waitid(rpc_info, __ret, pid, options, infop);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_waitid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, unsigned int options, void *infop, struct __actvret_hmcall_proc_waitid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_waitid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_waitid(__rref, rpc_info, __ret, pid, options, infop);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_waitid(pid_t pid, unsigned int options, void *infop, struct __actvret_hmcall_proc_waitid *__ret)
{
	return actvxactcall_hmcall_proc_waitid(false, false, pid, options, infop, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_waitid(rref_t __rref, pid_t pid, unsigned int options, void *infop, struct __actvret_hmcall_proc_waitid *__ret)
{
	return actvxactcapcall_hmcall_proc_waitid(false, false, __rref, pid, options, infop, __ret);
}

extern int __actvcall_hmcall_proc_wait4(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int options, void *ru);


extern int __actvcapcall_hmcall_proc_wait4(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int options, void *ru);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_wait4(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, unsigned int options, void *ru, struct __actvret_hmcall_proc_wait4 *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_wait4;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_wait4(rpc_info, __ret, pid, options, ru);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_wait4(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, unsigned int options, void *ru, struct __actvret_hmcall_proc_wait4 *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_wait4;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_wait4(__rref, rpc_info, __ret, pid, options, ru);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_wait4(pid_t pid, unsigned int options, void *ru, struct __actvret_hmcall_proc_wait4 *__ret)
{
	return actvxactcall_hmcall_proc_wait4(false, false, pid, options, ru, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_wait4(rref_t __rref, pid_t pid, unsigned int options, void *ru, struct __actvret_hmcall_proc_wait4 *__ret)
{
	return actvxactcapcall_hmcall_proc_wait4(false, false, __rref, pid, options, ru, __ret);
}

extern int __actvcall_hmcall_proc_exit(unsigned long long __rpc_info, void *__buf, unsigned int exit_status);


extern int __actvcapcall_hmcall_proc_exit(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int exit_status);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_exit(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int exit_status)
{
	const unsigned long __callno = __sysmgr_method_proc_exit;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_exit(rpc_info, NULL, exit_status);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_exit(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int exit_status)
{
	const unsigned long __callno = __sysmgr_method_proc_exit;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_exit(__rref, rpc_info, NULL, exit_status);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_exit(unsigned int exit_status)
{
	return actvxactcall_hmcall_proc_exit(false, false, exit_status);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_exit(rref_t __rref, unsigned int exit_status)
{
	return actvxactcapcall_hmcall_proc_exit(false, false, __rref, exit_status);
}

extern int __actvcall_hmcall_proc_getpid(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_getpid(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getpid(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_proc_getpid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getpid(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getpid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_proc_getpid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getpid(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getpid(void)
{
	return actvxactcall_hmcall_proc_getpid(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getpid(rref_t __rref)
{
	return actvxactcapcall_hmcall_proc_getpid(false, false, __rref);
}

extern int __actvcall_hmcall_proc_pid_of(unsigned long long __rpc_info, void *__buf, unsigned int cnode_idx);


extern int __actvcapcall_hmcall_proc_pid_of(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int cnode_idx);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_pid_of(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int cnode_idx)
{
	const unsigned long __callno = __sysmgr_method_proc_pid_of;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_pid_of(rpc_info, NULL, cnode_idx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_pid_of(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int cnode_idx)
{
	const unsigned long __callno = __sysmgr_method_proc_pid_of;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_pid_of(__rref, rpc_info, NULL, cnode_idx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_pid_of(unsigned int cnode_idx)
{
	return actvxactcall_hmcall_proc_pid_of(false, false, cnode_idx);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_pid_of(rref_t __rref, unsigned int cnode_idx)
{
	return actvxactcapcall_hmcall_proc_pid_of(false, false, __rref, cnode_idx);
}

extern int __actvcall_hmcall_proc_getppid(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_getppid(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getppid(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_proc_getppid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getppid(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getppid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_proc_getppid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getppid(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getppid(void)
{
	return actvxactcall_hmcall_proc_getppid(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getppid(rref_t __rref)
{
	return actvxactcapcall_hmcall_proc_getppid(false, false, __rref);
}

extern int __actvcall_hmcall_proc_cnode_idx_of(unsigned long long __rpc_info, void *__buf, pid_t pid);


extern int __actvcapcall_hmcall_proc_cnode_idx_of(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_cnode_idx_of(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, struct __actvret_hmcall_proc_cnode_idx_of *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_cnode_idx_of;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_cnode_idx_of(rpc_info, __ret, pid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_cnode_idx_of(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, struct __actvret_hmcall_proc_cnode_idx_of *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_cnode_idx_of;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_cnode_idx_of(__rref, rpc_info, __ret, pid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_cnode_idx_of(pid_t pid, struct __actvret_hmcall_proc_cnode_idx_of *__ret)
{
	return actvxactcall_hmcall_proc_cnode_idx_of(false, false, pid, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_cnode_idx_of(rref_t __rref, pid_t pid, struct __actvret_hmcall_proc_cnode_idx_of *__ret)
{
	return actvxactcapcall_hmcall_proc_cnode_idx_of(false, false, __rref, pid, __ret);
}

extern int __actvcall_hmcall_proc_getpgid(unsigned long long __rpc_info, void *__buf, pid_t pid);


extern int __actvcapcall_hmcall_proc_getpgid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getpgid(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid)
{
	const unsigned long __callno = __sysmgr_method_proc_getpgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getpgid(rpc_info, NULL, pid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getpgid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid)
{
	const unsigned long __callno = __sysmgr_method_proc_getpgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getpgid(__rref, rpc_info, NULL, pid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getpgid(pid_t pid)
{
	return actvxactcall_hmcall_proc_getpgid(false, false, pid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getpgid(rref_t __rref, pid_t pid)
{
	return actvxactcapcall_hmcall_proc_getpgid(false, false, __rref, pid);
}

extern int __actvcall_hmcall_proc_setpgid(unsigned long long __rpc_info, void *__buf, pid_t pid, pid_t dst_pgrp);


extern int __actvcapcall_hmcall_proc_setpgid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, pid_t dst_pgrp);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setpgid(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, pid_t dst_pgrp)
{
	const unsigned long __callno = __sysmgr_method_proc_setpgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setpgid(rpc_info, NULL, pid, dst_pgrp);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setpgid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, pid_t dst_pgrp)
{
	const unsigned long __callno = __sysmgr_method_proc_setpgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setpgid(__rref, rpc_info, NULL, pid, dst_pgrp);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setpgid(pid_t pid, pid_t dst_pgrp)
{
	return actvxactcall_hmcall_proc_setpgid(false, false, pid, dst_pgrp);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setpgid(rref_t __rref, pid_t pid, pid_t dst_pgrp)
{
	return actvxactcapcall_hmcall_proc_setpgid(false, false, __rref, pid, dst_pgrp);
}

extern int __actvcall_hmcall_proc_getsid(unsigned long long __rpc_info, void *__buf, pid_t pid);


extern int __actvcapcall_hmcall_proc_getsid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getsid(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid)
{
	const unsigned long __callno = __sysmgr_method_proc_getsid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getsid(rpc_info, NULL, pid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getsid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid)
{
	const unsigned long __callno = __sysmgr_method_proc_getsid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getsid(__rref, rpc_info, NULL, pid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getsid(pid_t pid)
{
	return actvxactcall_hmcall_proc_getsid(false, false, pid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getsid(rref_t __rref, pid_t pid)
{
	return actvxactcapcall_hmcall_proc_getsid(false, false, __rref, pid);
}

extern int __actvcall_hmcall_proc_setsid(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_setsid(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setsid(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_proc_setsid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setsid(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setsid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_proc_setsid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setsid(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setsid(void)
{
	return actvxactcall_hmcall_proc_setsid(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setsid(rref_t __rref)
{
	return actvxactcapcall_hmcall_proc_setsid(false, false, __rref);
}

extern int __actvcall_hmcall_proc_setfgpgrp(unsigned long long __rpc_info, void *__buf, pid_t sid, pid_t pgid);


extern int __actvcapcall_hmcall_proc_setfgpgrp(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t sid, pid_t pgid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setfgpgrp(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t sid, pid_t pgid)
{
	const unsigned long __callno = __sysmgr_method_proc_setfgpgrp;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setfgpgrp(rpc_info, NULL, sid, pgid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setfgpgrp(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t sid, pid_t pgid)
{
	const unsigned long __callno = __sysmgr_method_proc_setfgpgrp;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setfgpgrp(__rref, rpc_info, NULL, sid, pgid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setfgpgrp(pid_t sid, pid_t pgid)
{
	return actvxactcall_hmcall_proc_setfgpgrp(false, false, sid, pgid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setfgpgrp(rref_t __rref, pid_t sid, pid_t pgid)
{
	return actvxactcapcall_hmcall_proc_setfgpgrp(false, false, __rref, sid, pgid);
}

extern int __actvcall_hmcall_proc_getfgpgrp(unsigned long long __rpc_info, void *__buf, pid_t sid);


extern int __actvcapcall_hmcall_proc_getfgpgrp(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t sid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getfgpgrp(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t sid)
{
	const unsigned long __callno = __sysmgr_method_proc_getfgpgrp;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getfgpgrp(rpc_info, NULL, sid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getfgpgrp(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t sid)
{
	const unsigned long __callno = __sysmgr_method_proc_getfgpgrp;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getfgpgrp(__rref, rpc_info, NULL, sid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getfgpgrp(pid_t sid)
{
	return actvxactcall_hmcall_proc_getfgpgrp(false, false, sid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getfgpgrp(rref_t __rref, pid_t sid)
{
	return actvxactcapcall_hmcall_proc_getfgpgrp(false, false, __rref, sid);
}

extern int __actvcall_hmcall_proc_mysid(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_mysid(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_mysid(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_proc_mysid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_mysid(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_mysid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_proc_mysid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_mysid(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_mysid(void)
{
	return actvxactcall_hmcall_proc_mysid(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_mysid(rref_t __rref)
{
	return actvxactcapcall_hmcall_proc_mysid(false, false, __rref);
}

extern int __actvcall_hmcall_proc_signal_fgpgrp(unsigned long long __rpc_info, void *__buf, pid_t sid, int signum);


extern int __actvcapcall_hmcall_proc_signal_fgpgrp(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t sid, int signum);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_signal_fgpgrp(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t sid, int signum)
{
	const unsigned long __callno = __sysmgr_method_proc_signal_fgpgrp;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_signal_fgpgrp(rpc_info, NULL, sid, signum);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_signal_fgpgrp(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t sid, int signum)
{
	const unsigned long __callno = __sysmgr_method_proc_signal_fgpgrp;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_signal_fgpgrp(__rref, rpc_info, NULL, sid, signum);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_signal_fgpgrp(pid_t sid, int signum)
{
	return actvxactcall_hmcall_proc_signal_fgpgrp(false, false, sid, signum);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_signal_fgpgrp(rref_t __rref, pid_t sid, int signum)
{
	return actvxactcapcall_hmcall_proc_signal_fgpgrp(false, false, __rref, sid, signum);
}

extern int __actvcall_hmcall_proc_setuid(unsigned long long __rpc_info, void *__buf, uid_t uid);


extern int __actvcapcall_hmcall_proc_setuid(rref_t __rref, unsigned long long __rpc_info, void *__buf, uid_t uid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setuid(bool is_xact_fwd, bool is_xact_allow_refwd, uid_t uid)
{
	const unsigned long __callno = __sysmgr_method_proc_setuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setuid(rpc_info, NULL, uid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setuid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, uid_t uid)
{
	const unsigned long __callno = __sysmgr_method_proc_setuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setuid(__rref, rpc_info, NULL, uid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setuid(uid_t uid)
{
	return actvxactcall_hmcall_proc_setuid(false, false, uid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setuid(rref_t __rref, uid_t uid)
{
	return actvxactcapcall_hmcall_proc_setuid(false, false, __rref, uid);
}

extern int __actvcall_hmcall_proc_getuid(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_getuid(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getuid(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_proc_getuid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getuid(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getuid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_proc_getuid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getuid(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getuid(struct __actvret_hmcall_proc_getuid *__ret)
{
	return actvxactcall_hmcall_proc_getuid(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getuid(rref_t __rref, struct __actvret_hmcall_proc_getuid *__ret)
{
	return actvxactcapcall_hmcall_proc_getuid(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_proc_geteuid(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_geteuid(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_geteuid(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_proc_geteuid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_geteuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_geteuid(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_geteuid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_proc_geteuid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_geteuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_geteuid(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_geteuid(struct __actvret_hmcall_proc_geteuid *__ret)
{
	return actvxactcall_hmcall_proc_geteuid(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_geteuid(rref_t __rref, struct __actvret_hmcall_proc_geteuid *__ret)
{
	return actvxactcapcall_hmcall_proc_geteuid(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_proc_getresuid(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_getresuid(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getresuid(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_proc_getresuid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getresuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getresuid(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getresuid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_proc_getresuid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getresuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getresuid(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getresuid(struct __actvret_hmcall_proc_getresuid *__ret)
{
	return actvxactcall_hmcall_proc_getresuid(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getresuid(rref_t __rref, struct __actvret_hmcall_proc_getresuid *__ret)
{
	return actvxactcapcall_hmcall_proc_getresuid(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_proc_setreuid(unsigned long long __rpc_info, void *__buf, uid_t ruid, uid_t euid);


extern int __actvcapcall_hmcall_proc_setreuid(rref_t __rref, unsigned long long __rpc_info, void *__buf, uid_t ruid, uid_t euid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setreuid(bool is_xact_fwd, bool is_xact_allow_refwd, uid_t ruid, uid_t euid)
{
	const unsigned long __callno = __sysmgr_method_proc_setreuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setreuid(rpc_info, NULL, ruid, euid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setreuid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, uid_t ruid, uid_t euid)
{
	const unsigned long __callno = __sysmgr_method_proc_setreuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setreuid(__rref, rpc_info, NULL, ruid, euid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setreuid(uid_t ruid, uid_t euid)
{
	return actvxactcall_hmcall_proc_setreuid(false, false, ruid, euid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setreuid(rref_t __rref, uid_t ruid, uid_t euid)
{
	return actvxactcapcall_hmcall_proc_setreuid(false, false, __rref, ruid, euid);
}

extern int __actvcall_hmcall_proc_setresuid(unsigned long long __rpc_info, void *__buf, uid_t ruid, uid_t euid, uid_t suid);


extern int __actvcapcall_hmcall_proc_setresuid(rref_t __rref, unsigned long long __rpc_info, void *__buf, uid_t ruid, uid_t euid, uid_t suid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setresuid(bool is_xact_fwd, bool is_xact_allow_refwd, uid_t ruid, uid_t euid, uid_t suid)
{
	const unsigned long __callno = __sysmgr_method_proc_setresuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setresuid(rpc_info, NULL, ruid, euid, suid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setresuid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, uid_t ruid, uid_t euid, uid_t suid)
{
	const unsigned long __callno = __sysmgr_method_proc_setresuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setresuid(__rref, rpc_info, NULL, ruid, euid, suid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setresuid(uid_t ruid, uid_t euid, uid_t suid)
{
	return actvxactcall_hmcall_proc_setresuid(false, false, ruid, euid, suid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setresuid(rref_t __rref, uid_t ruid, uid_t euid, uid_t suid)
{
	return actvxactcapcall_hmcall_proc_setresuid(false, false, __rref, ruid, euid, suid);
}

extern int __actvcall_hmcall_proc_getgid(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_getgid(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getgid(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_proc_getgid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getgid(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getgid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_proc_getgid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getgid(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getgid(struct __actvret_hmcall_proc_getgid *__ret)
{
	return actvxactcall_hmcall_proc_getgid(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getgid(rref_t __rref, struct __actvret_hmcall_proc_getgid *__ret)
{
	return actvxactcapcall_hmcall_proc_getgid(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_proc_getegid(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_getegid(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getegid(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_proc_getegid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getegid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getegid(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getegid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_proc_getegid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getegid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getegid(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getegid(struct __actvret_hmcall_proc_getegid *__ret)
{
	return actvxactcall_hmcall_proc_getegid(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getegid(rref_t __rref, struct __actvret_hmcall_proc_getegid *__ret)
{
	return actvxactcapcall_hmcall_proc_getegid(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_proc_getresgid(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_getresgid(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getresgid(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_proc_getresgid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getresgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getresgid(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getresgid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_proc_getresgid *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getresgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getresgid(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getresgid(struct __actvret_hmcall_proc_getresgid *__ret)
{
	return actvxactcall_hmcall_proc_getresgid(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getresgid(rref_t __rref, struct __actvret_hmcall_proc_getresgid *__ret)
{
	return actvxactcapcall_hmcall_proc_getresgid(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_proc_setregid(unsigned long long __rpc_info, void *__buf, gid_t rgid, gid_t egid);


extern int __actvcapcall_hmcall_proc_setregid(rref_t __rref, unsigned long long __rpc_info, void *__buf, gid_t rgid, gid_t egid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setregid(bool is_xact_fwd, bool is_xact_allow_refwd, gid_t rgid, gid_t egid)
{
	const unsigned long __callno = __sysmgr_method_proc_setregid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setregid(rpc_info, NULL, rgid, egid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setregid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, gid_t rgid, gid_t egid)
{
	const unsigned long __callno = __sysmgr_method_proc_setregid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setregid(__rref, rpc_info, NULL, rgid, egid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setregid(gid_t rgid, gid_t egid)
{
	return actvxactcall_hmcall_proc_setregid(false, false, rgid, egid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setregid(rref_t __rref, gid_t rgid, gid_t egid)
{
	return actvxactcapcall_hmcall_proc_setregid(false, false, __rref, rgid, egid);
}

extern int __actvcall_hmcall_proc_setgid(unsigned long long __rpc_info, void *__buf, gid_t gid);


extern int __actvcapcall_hmcall_proc_setgid(rref_t __rref, unsigned long long __rpc_info, void *__buf, gid_t gid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setgid(bool is_xact_fwd, bool is_xact_allow_refwd, gid_t gid)
{
	const unsigned long __callno = __sysmgr_method_proc_setgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setgid(rpc_info, NULL, gid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setgid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, gid_t gid)
{
	const unsigned long __callno = __sysmgr_method_proc_setgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setgid(__rref, rpc_info, NULL, gid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setgid(gid_t gid)
{
	return actvxactcall_hmcall_proc_setgid(false, false, gid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setgid(rref_t __rref, gid_t gid)
{
	return actvxactcapcall_hmcall_proc_setgid(false, false, __rref, gid);
}

extern int __actvcall_hmcall_proc_setresgid(unsigned long long __rpc_info, void *__buf, gid_t rgid, gid_t egid, gid_t sgid);


extern int __actvcapcall_hmcall_proc_setresgid(rref_t __rref, unsigned long long __rpc_info, void *__buf, gid_t rgid, gid_t egid, gid_t sgid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setresgid(bool is_xact_fwd, bool is_xact_allow_refwd, gid_t rgid, gid_t egid, gid_t sgid)
{
	const unsigned long __callno = __sysmgr_method_proc_setresgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setresgid(rpc_info, NULL, rgid, egid, sgid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setresgid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, gid_t rgid, gid_t egid, gid_t sgid)
{
	const unsigned long __callno = __sysmgr_method_proc_setresgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setresgid(__rref, rpc_info, NULL, rgid, egid, sgid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setresgid(gid_t rgid, gid_t egid, gid_t sgid)
{
	return actvxactcall_hmcall_proc_setresgid(false, false, rgid, egid, sgid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setresgid(rref_t __rref, gid_t rgid, gid_t egid, gid_t sgid)
{
	return actvxactcapcall_hmcall_proc_setresgid(false, false, __rref, rgid, egid, sgid);
}

extern int __actvcall_hmcall_proc_setgroups(unsigned long long __rpc_info, void *__buf, unsigned int data_size, gid_t *group_list);


extern int __actvcapcall_hmcall_proc_setgroups(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int data_size, gid_t *group_list);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setgroups(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int data_size, gid_t *group_list)
{
	const unsigned long __callno = __sysmgr_method_proc_setgroups;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t*), __arch_actv_rpc_stksz_alignment(gid_t*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setgroups(rpc_info, NULL, data_size, group_list);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setgroups(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int data_size, gid_t *group_list)
{
	const unsigned long __callno = __sysmgr_method_proc_setgroups;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t*), __arch_actv_rpc_stksz_alignment(gid_t*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setgroups(__rref, rpc_info, NULL, data_size, group_list);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setgroups(unsigned int data_size, gid_t *group_list)
{
	return actvxactcall_hmcall_proc_setgroups(false, false, data_size, group_list);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setgroups(rref_t __rref, unsigned int data_size, gid_t *group_list)
{
	return actvxactcapcall_hmcall_proc_setgroups(false, false, __rref, data_size, group_list);
}

extern int __actvcall_hmcall_proc_getgroups(unsigned long long __rpc_info, void *__buf, unsigned int data_size, gid_t *group_list);


extern int __actvcapcall_hmcall_proc_getgroups(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int data_size, gid_t *group_list);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getgroups(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int data_size, gid_t *group_list)
{
	const unsigned long __callno = __sysmgr_method_proc_getgroups;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t*), __arch_actv_rpc_stksz_alignment(gid_t*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getgroups(rpc_info, NULL, data_size, group_list);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getgroups(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int data_size, gid_t *group_list)
{
	const unsigned long __callno = __sysmgr_method_proc_getgroups;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t*), __arch_actv_rpc_stksz_alignment(gid_t*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getgroups(__rref, rpc_info, NULL, data_size, group_list);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getgroups(unsigned int data_size, gid_t *group_list)
{
	return actvxactcall_hmcall_proc_getgroups(false, false, data_size, group_list);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getgroups(rref_t __rref, unsigned int data_size, gid_t *group_list)
{
	return actvxactcapcall_hmcall_proc_getgroups(false, false, __rref, data_size, group_list);
}

extern int __actvcall_hmcall_proc_setfsuid(unsigned long long __rpc_info, void *__buf, uid_t uid);


extern int __actvcapcall_hmcall_proc_setfsuid(rref_t __rref, unsigned long long __rpc_info, void *__buf, uid_t uid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setfsuid(bool is_xact_fwd, bool is_xact_allow_refwd, uid_t uid)
{
	const unsigned long __callno = __sysmgr_method_proc_setfsuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setfsuid(rpc_info, NULL, uid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setfsuid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, uid_t uid)
{
	const unsigned long __callno = __sysmgr_method_proc_setfsuid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uid_t), __arch_actv_rpc_stksz_alignment(uid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setfsuid(__rref, rpc_info, NULL, uid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setfsuid(uid_t uid)
{
	return actvxactcall_hmcall_proc_setfsuid(false, false, uid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setfsuid(rref_t __rref, uid_t uid)
{
	return actvxactcapcall_hmcall_proc_setfsuid(false, false, __rref, uid);
}

extern int __actvcall_hmcall_proc_setfsgid(unsigned long long __rpc_info, void *__buf, gid_t gid);


extern int __actvcapcall_hmcall_proc_setfsgid(rref_t __rref, unsigned long long __rpc_info, void *__buf, gid_t gid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setfsgid(bool is_xact_fwd, bool is_xact_allow_refwd, gid_t gid)
{
	const unsigned long __callno = __sysmgr_method_proc_setfsgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setfsgid(rpc_info, NULL, gid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setfsgid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, gid_t gid)
{
	const unsigned long __callno = __sysmgr_method_proc_setfsgid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(gid_t), __arch_actv_rpc_stksz_alignment(gid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setfsgid(__rref, rpc_info, NULL, gid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setfsgid(gid_t gid)
{
	return actvxactcall_hmcall_proc_setfsgid(false, false, gid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setfsgid(rref_t __rref, gid_t gid)
{
	return actvxactcapcall_hmcall_proc_setfsgid(false, false, __rref, gid);
}

extern int __actvcall_hmcall_proc_stat(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int flags, struct bunch_ipc_attr attr);


extern int __actvcapcall_hmcall_proc_stat(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int flags, struct bunch_ipc_attr attr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_stat(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, unsigned int flags, struct bunch_ipc_attr attr)
{
	const unsigned long __callno = __sysmgr_method_proc_stat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct bunch_ipc_attr), __arch_actv_rpc_stksz_alignment(struct bunch_ipc_attr));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_stat(rpc_info, NULL, pid, flags, attr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_stat(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, unsigned int flags, struct bunch_ipc_attr attr)
{
	const unsigned long __callno = __sysmgr_method_proc_stat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct bunch_ipc_attr), __arch_actv_rpc_stksz_alignment(struct bunch_ipc_attr));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_stat(__rref, rpc_info, NULL, pid, flags, attr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_stat(pid_t pid, unsigned int flags, struct bunch_ipc_attr attr)
{
	return actvxactcall_hmcall_proc_stat(false, false, pid, flags, attr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_stat(rref_t __rref, pid_t pid, unsigned int flags, struct bunch_ipc_attr attr)
{
	return actvxactcapcall_hmcall_proc_stat(false, false, __rref, pid, flags, attr);
}

extern int __actvcall_hmcall_proc_getrlimit(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int cnode_idx, unsigned int type);


extern int __actvcapcall_hmcall_proc_getrlimit(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int cnode_idx, unsigned int type);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getrlimit(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, unsigned int cnode_idx, unsigned int type, struct __actvret_hmcall_proc_getrlimit *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getrlimit;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getrlimit(rpc_info, __ret, pid, cnode_idx, type);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getrlimit(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, unsigned int cnode_idx, unsigned int type, struct __actvret_hmcall_proc_getrlimit *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getrlimit;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getrlimit(__rref, rpc_info, __ret, pid, cnode_idx, type);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getrlimit(pid_t pid, unsigned int cnode_idx, unsigned int type, struct __actvret_hmcall_proc_getrlimit *__ret)
{
	return actvxactcall_hmcall_proc_getrlimit(false, false, pid, cnode_idx, type, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getrlimit(rref_t __rref, pid_t pid, unsigned int cnode_idx, unsigned int type, struct __actvret_hmcall_proc_getrlimit *__ret)
{
	return actvxactcapcall_hmcall_proc_getrlimit(false, false, __rref, pid, cnode_idx, type, __ret);
}

extern int __actvcall_hmcall_proc_setrlimit(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int cnode_idx, unsigned int type, unsigned long long rlim_cur, unsigned long long rlim_max);


extern int __actvcapcall_hmcall_proc_setrlimit(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int cnode_idx, unsigned int type, unsigned long long rlim_cur, unsigned long long rlim_max);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_setrlimit(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, unsigned int cnode_idx, unsigned int type, unsigned long long rlim_cur, unsigned long long rlim_max)
{
	const unsigned long __callno = __sysmgr_method_proc_setrlimit;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_setrlimit(rpc_info, NULL, pid, cnode_idx, type, rlim_cur, rlim_max);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_setrlimit(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, unsigned int cnode_idx, unsigned int type, unsigned long long rlim_cur, unsigned long long rlim_max)
{
	const unsigned long __callno = __sysmgr_method_proc_setrlimit;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_setrlimit(__rref, rpc_info, NULL, pid, cnode_idx, type, rlim_cur, rlim_max);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_setrlimit(pid_t pid, unsigned int cnode_idx, unsigned int type, unsigned long long rlim_cur, unsigned long long rlim_max)
{
	return actvxactcall_hmcall_proc_setrlimit(false, false, pid, cnode_idx, type, rlim_cur, rlim_max);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_setrlimit(rref_t __rref, pid_t pid, unsigned int cnode_idx, unsigned int type, unsigned long long rlim_cur, unsigned long long rlim_max)
{
	return actvxactcapcall_hmcall_proc_setrlimit(false, false, __rref, pid, cnode_idx, type, rlim_cur, rlim_max);
}

extern int __actvcall_hmcall_proc_prlimit(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned long long rlim_cur, unsigned long long rlim_max, unsigned int type);


extern int __actvcapcall_hmcall_proc_prlimit(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned long long rlim_cur, unsigned long long rlim_max, unsigned int type);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_prlimit(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, unsigned long long rlim_cur, unsigned long long rlim_max, unsigned int type, struct __actvret_hmcall_proc_prlimit *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_prlimit;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_prlimit(rpc_info, __ret, pid, rlim_cur, rlim_max, type);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_prlimit(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, unsigned long long rlim_cur, unsigned long long rlim_max, unsigned int type, struct __actvret_hmcall_proc_prlimit *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_prlimit;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_prlimit(__rref, rpc_info, __ret, pid, rlim_cur, rlim_max, type);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_prlimit(pid_t pid, unsigned long long rlim_cur, unsigned long long rlim_max, unsigned int type, struct __actvret_hmcall_proc_prlimit *__ret)
{
	return actvxactcall_hmcall_proc_prlimit(false, false, pid, rlim_cur, rlim_max, type, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_prlimit(rref_t __rref, pid_t pid, unsigned long long rlim_cur, unsigned long long rlim_max, unsigned int type, struct __actvret_hmcall_proc_prlimit *__ret)
{
	return actvxactcapcall_hmcall_proc_prlimit(false, false, __rref, pid, rlim_cur, rlim_max, type, __ret);
}

extern int __actvcall_hmcall_proc_debug_thread(unsigned long long __rpc_info, void *__buf, enum pdebug_thread_req req, pid_t tid, void *arg);


extern int __actvcapcall_hmcall_proc_debug_thread(rref_t __rref, unsigned long long __rpc_info, void *__buf, enum pdebug_thread_req req, pid_t tid, void *arg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_debug_thread(bool is_xact_fwd, bool is_xact_allow_refwd, enum pdebug_thread_req req, pid_t tid, void *arg, struct __actvret_hmcall_proc_debug_thread *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_debug_thread;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum pdebug_thread_req), __arch_actv_rpc_stksz_alignment(enum pdebug_thread_req));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_debug_thread(rpc_info, __ret, req, tid, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_debug_thread(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, enum pdebug_thread_req req, pid_t tid, void *arg, struct __actvret_hmcall_proc_debug_thread *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_debug_thread;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum pdebug_thread_req), __arch_actv_rpc_stksz_alignment(enum pdebug_thread_req));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_debug_thread(__rref, rpc_info, __ret, req, tid, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_debug_thread(enum pdebug_thread_req req, pid_t tid, void *arg, struct __actvret_hmcall_proc_debug_thread *__ret)
{
	return actvxactcall_hmcall_proc_debug_thread(false, false, req, tid, arg, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_debug_thread(rref_t __rref, enum pdebug_thread_req req, pid_t tid, void *arg, struct __actvret_hmcall_proc_debug_thread *__ret)
{
	return actvxactcapcall_hmcall_proc_debug_thread(false, false, __rref, req, tid, arg, __ret);
}

extern int __actvcall_hmcall_proc_debug_wait_status(unsigned long long __rpc_info, void *__buf, pid_t tid, void *event, int option);


extern int __actvcapcall_hmcall_proc_debug_wait_status(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t tid, void *event, int option);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_debug_wait_status(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t tid, void *event, int option)
{
	const unsigned long __callno = __sysmgr_method_proc_debug_wait_status;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_debug_wait_status(rpc_info, NULL, tid, event, option);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_debug_wait_status(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t tid, void *event, int option)
{
	const unsigned long __callno = __sysmgr_method_proc_debug_wait_status;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_debug_wait_status(__rref, rpc_info, NULL, tid, event, option);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_debug_wait_status(pid_t tid, void *event, int option)
{
	return actvxactcall_hmcall_proc_debug_wait_status(false, false, tid, event, option);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_debug_wait_status(rref_t __rref, pid_t tid, void *event, int option)
{
	return actvxactcapcall_hmcall_proc_debug_wait_status(false, false, __rref, tid, event, option);
}

extern int __actvcall_hmcall_proc_debug_vspace(unsigned long long __rpc_info, void *__buf, enum pdebug_vspace_req req, pid_t pid, uintptr_t addr, unsigned long data);


extern int __actvcapcall_hmcall_proc_debug_vspace(rref_t __rref, unsigned long long __rpc_info, void *__buf, enum pdebug_vspace_req req, pid_t pid, uintptr_t addr, unsigned long data);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_debug_vspace(bool is_xact_fwd, bool is_xact_allow_refwd, enum pdebug_vspace_req req, pid_t pid, uintptr_t addr, unsigned long data, struct __actvret_hmcall_proc_debug_vspace *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_debug_vspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum pdebug_vspace_req), __arch_actv_rpc_stksz_alignment(enum pdebug_vspace_req));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_debug_vspace(rpc_info, __ret, req, pid, addr, data);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_debug_vspace(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, enum pdebug_vspace_req req, pid_t pid, uintptr_t addr, unsigned long data, struct __actvret_hmcall_proc_debug_vspace *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_debug_vspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum pdebug_vspace_req), __arch_actv_rpc_stksz_alignment(enum pdebug_vspace_req));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_debug_vspace(__rref, rpc_info, __ret, req, pid, addr, data);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_debug_vspace(enum pdebug_vspace_req req, pid_t pid, uintptr_t addr, unsigned long data, struct __actvret_hmcall_proc_debug_vspace *__ret)
{
	return actvxactcall_hmcall_proc_debug_vspace(false, false, req, pid, addr, data, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_debug_vspace(rref_t __rref, enum pdebug_vspace_req req, pid_t pid, uintptr_t addr, unsigned long data, struct __actvret_hmcall_proc_debug_vspace *__ret)
{
	return actvxactcapcall_hmcall_proc_debug_vspace(false, false, __rref, req, pid, addr, data, __ret);
}

extern int __actvcall_hmcall_proc_get_coredump(unsigned long long __rpc_info, void *__buf, pid_t pid, enum coredump_request request);


extern int __actvcapcall_hmcall_proc_get_coredump(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, enum coredump_request request);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_get_coredump(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, enum coredump_request request, struct __actvret_hmcall_proc_get_coredump *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_get_coredump;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum coredump_request), __arch_actv_rpc_stksz_alignment(enum coredump_request));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_get_coredump(rpc_info, __ret, pid, request);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_get_coredump(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, enum coredump_request request, struct __actvret_hmcall_proc_get_coredump *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_get_coredump;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum coredump_request), __arch_actv_rpc_stksz_alignment(enum coredump_request));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_get_coredump(__rref, rpc_info, __ret, pid, request);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_get_coredump(pid_t pid, enum coredump_request request, struct __actvret_hmcall_proc_get_coredump *__ret)
{
	return actvxactcall_hmcall_proc_get_coredump(false, false, pid, request, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_get_coredump(rref_t __rref, pid_t pid, enum coredump_request request, struct __actvret_hmcall_proc_get_coredump *__ret)
{
	return actvxactcapcall_hmcall_proc_get_coredump(false, false, __rref, pid, request, __ret);
}

extern int __actvcall_hmcall_proc_set_coredump(unsigned long long __rpc_info, void *__buf, pid_t pid, union coredump_attr value, enum coredump_request request);


extern int __actvcapcall_hmcall_proc_set_coredump(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, union coredump_attr value, enum coredump_request request);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_set_coredump(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, union coredump_attr value, enum coredump_request request)
{
	const unsigned long __callno = __sysmgr_method_proc_set_coredump;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(union coredump_attr), __arch_actv_rpc_stksz_alignment(union coredump_attr));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum coredump_request), __arch_actv_rpc_stksz_alignment(enum coredump_request));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_set_coredump(rpc_info, NULL, pid, value, request);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_set_coredump(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, union coredump_attr value, enum coredump_request request)
{
	const unsigned long __callno = __sysmgr_method_proc_set_coredump;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(union coredump_attr), __arch_actv_rpc_stksz_alignment(union coredump_attr));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum coredump_request), __arch_actv_rpc_stksz_alignment(enum coredump_request));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_set_coredump(__rref, rpc_info, NULL, pid, value, request);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_set_coredump(pid_t pid, union coredump_attr value, enum coredump_request request)
{
	return actvxactcall_hmcall_proc_set_coredump(false, false, pid, value, request);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_set_coredump(rref_t __rref, pid_t pid, union coredump_attr value, enum coredump_request request)
{
	return actvxactcapcall_hmcall_proc_set_coredump(false, false, __rref, pid, value, request);
}

extern int __actvcall_hmcall_proc_nsid_of_cnode_idx(unsigned long long __rpc_info, void *__buf, unsigned int cnode_idx, int flag);


extern int __actvcapcall_hmcall_proc_nsid_of_cnode_idx(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int cnode_idx, int flag);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_nsid_of_cnode_idx(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int cnode_idx, int flag, struct __actvret_hmcall_proc_nsid_of_cnode_idx *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_nsid_of_cnode_idx;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_nsid_of_cnode_idx(rpc_info, __ret, cnode_idx, flag);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_nsid_of_cnode_idx(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int cnode_idx, int flag, struct __actvret_hmcall_proc_nsid_of_cnode_idx *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_nsid_of_cnode_idx;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_nsid_of_cnode_idx(__rref, rpc_info, __ret, cnode_idx, flag);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_nsid_of_cnode_idx(unsigned int cnode_idx, int flag, struct __actvret_hmcall_proc_nsid_of_cnode_idx *__ret)
{
	return actvxactcall_hmcall_proc_nsid_of_cnode_idx(false, false, cnode_idx, flag, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_nsid_of_cnode_idx(rref_t __rref, unsigned int cnode_idx, int flag, struct __actvret_hmcall_proc_nsid_of_cnode_idx *__ret)
{
	return actvxactcapcall_hmcall_proc_nsid_of_cnode_idx(false, false, __rref, cnode_idx, flag, __ret);
}

extern int __actvcall_hmcall_proc_timer_create(unsigned long long __rpc_info, void *__buf, int timer_id, cref_t timer_cref, struct __siginfo siginfo, int target_tid);


extern int __actvcapcall_hmcall_proc_timer_create(rref_t __rref, unsigned long long __rpc_info, void *__buf, int timer_id, cref_t timer_cref, struct __siginfo siginfo, int target_tid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_timer_create(bool is_xact_fwd, bool is_xact_allow_refwd, int timer_id, cref_t timer_cref, struct __siginfo siginfo, int target_tid)
{
	const unsigned long __callno = __sysmgr_method_proc_timer_create;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct __siginfo), __arch_actv_rpc_stksz_alignment(struct __siginfo));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_timer_create(rpc_info, NULL, timer_id, timer_cref, siginfo, target_tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_timer_create(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int timer_id, cref_t timer_cref, struct __siginfo siginfo, int target_tid)
{
	const unsigned long __callno = __sysmgr_method_proc_timer_create;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct __siginfo), __arch_actv_rpc_stksz_alignment(struct __siginfo));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_timer_create(__rref, rpc_info, NULL, timer_id, timer_cref, siginfo, target_tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_timer_create(int timer_id, cref_t timer_cref, struct __siginfo siginfo, int target_tid)
{
	return actvxactcall_hmcall_proc_timer_create(false, false, timer_id, timer_cref, siginfo, target_tid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_timer_create(rref_t __rref, int timer_id, cref_t timer_cref, struct __siginfo siginfo, int target_tid)
{
	return actvxactcapcall_hmcall_proc_timer_create(false, false, __rref, timer_id, timer_cref, siginfo, target_tid);
}

extern int __actvcall_hmcall_proc_timer_settime(unsigned long long __rpc_info, void *__buf, int timer_id, unsigned long long value, unsigned long long interval, int flags);


extern int __actvcapcall_hmcall_proc_timer_settime(rref_t __rref, unsigned long long __rpc_info, void *__buf, int timer_id, unsigned long long value, unsigned long long interval, int flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_timer_settime(bool is_xact_fwd, bool is_xact_allow_refwd, int timer_id, unsigned long long value, unsigned long long interval, int flags, struct __actvret_hmcall_proc_timer_settime *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_timer_settime;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_timer_settime(rpc_info, __ret, timer_id, value, interval, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_timer_settime(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int timer_id, unsigned long long value, unsigned long long interval, int flags, struct __actvret_hmcall_proc_timer_settime *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_timer_settime;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_timer_settime(__rref, rpc_info, __ret, timer_id, value, interval, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_timer_settime(int timer_id, unsigned long long value, unsigned long long interval, int flags, struct __actvret_hmcall_proc_timer_settime *__ret)
{
	return actvxactcall_hmcall_proc_timer_settime(false, false, timer_id, value, interval, flags, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_timer_settime(rref_t __rref, int timer_id, unsigned long long value, unsigned long long interval, int flags, struct __actvret_hmcall_proc_timer_settime *__ret)
{
	return actvxactcapcall_hmcall_proc_timer_settime(false, false, __rref, timer_id, value, interval, flags, __ret);
}

extern int __actvcall_hmcall_proc_timer_gettime(unsigned long long __rpc_info, void *__buf, int timer_id);


extern int __actvcapcall_hmcall_proc_timer_gettime(rref_t __rref, unsigned long long __rpc_info, void *__buf, int timer_id);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_timer_gettime(bool is_xact_fwd, bool is_xact_allow_refwd, int timer_id, struct __actvret_hmcall_proc_timer_gettime *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_timer_gettime;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_timer_gettime(rpc_info, __ret, timer_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_timer_gettime(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int timer_id, struct __actvret_hmcall_proc_timer_gettime *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_timer_gettime;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_timer_gettime(__rref, rpc_info, __ret, timer_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_timer_gettime(int timer_id, struct __actvret_hmcall_proc_timer_gettime *__ret)
{
	return actvxactcall_hmcall_proc_timer_gettime(false, false, timer_id, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_timer_gettime(rref_t __rref, int timer_id, struct __actvret_hmcall_proc_timer_gettime *__ret)
{
	return actvxactcapcall_hmcall_proc_timer_gettime(false, false, __rref, timer_id, __ret);
}

extern int __actvcall_hmcall_proc_timer_delete(unsigned long long __rpc_info, void *__buf, int timer_id);


extern int __actvcapcall_hmcall_proc_timer_delete(rref_t __rref, unsigned long long __rpc_info, void *__buf, int timer_id);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_timer_delete(bool is_xact_fwd, bool is_xact_allow_refwd, int timer_id, struct __actvret_hmcall_proc_timer_delete *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_timer_delete;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_timer_delete(rpc_info, __ret, timer_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_timer_delete(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int timer_id, struct __actvret_hmcall_proc_timer_delete *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_timer_delete;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_timer_delete(__rref, rpc_info, __ret, timer_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_timer_delete(int timer_id, struct __actvret_hmcall_proc_timer_delete *__ret)
{
	return actvxactcall_hmcall_proc_timer_delete(false, false, timer_id, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_timer_delete(rref_t __rref, int timer_id, struct __actvret_hmcall_proc_timer_delete *__ret)
{
	return actvxactcapcall_hmcall_proc_timer_delete(false, false, __rref, timer_id, __ret);
}

extern int __actvcall_hmcall_proc_timer_getoverrun(unsigned long long __rpc_info, void *__buf, int timer_id);


extern int __actvcapcall_hmcall_proc_timer_getoverrun(rref_t __rref, unsigned long long __rpc_info, void *__buf, int timer_id);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_timer_getoverrun(bool is_xact_fwd, bool is_xact_allow_refwd, int timer_id, struct __actvret_hmcall_proc_timer_getoverrun *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_timer_getoverrun;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_timer_getoverrun(rpc_info, __ret, timer_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_timer_getoverrun(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int timer_id, struct __actvret_hmcall_proc_timer_getoverrun *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_timer_getoverrun;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_timer_getoverrun(__rref, rpc_info, __ret, timer_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_timer_getoverrun(int timer_id, struct __actvret_hmcall_proc_timer_getoverrun *__ret)
{
	return actvxactcall_hmcall_proc_timer_getoverrun(false, false, timer_id, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_timer_getoverrun(rref_t __rref, int timer_id, struct __actvret_hmcall_proc_timer_getoverrun *__ret)
{
	return actvxactcapcall_hmcall_proc_timer_getoverrun(false, false, __rref, timer_id, __ret);
}

extern int __actvcall_hmcall_proc_get_cputime(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_get_cputime(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_get_cputime(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_proc_get_cputime *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_get_cputime;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_get_cputime(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_get_cputime(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_proc_get_cputime *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_get_cputime;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_get_cputime(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_get_cputime(struct __actvret_hmcall_proc_get_cputime *__ret)
{
	return actvxactcall_hmcall_proc_get_cputime(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_get_cputime(rref_t __rref, struct __actvret_hmcall_proc_get_cputime *__ret)
{
	return actvxactcapcall_hmcall_proc_get_cputime(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_proc_getrusage(unsigned long long __rpc_info, void *__buf, int who);


extern int __actvcapcall_hmcall_proc_getrusage(rref_t __rref, unsigned long long __rpc_info, void *__buf, int who);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_getrusage(bool is_xact_fwd, bool is_xact_allow_refwd, int who, struct __actvret_hmcall_proc_getrusage *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getrusage;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_getrusage(rpc_info, __ret, who);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_getrusage(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int who, struct __actvret_hmcall_proc_getrusage *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_getrusage;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_getrusage(__rref, rpc_info, __ret, who);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_getrusage(int who, struct __actvret_hmcall_proc_getrusage *__ret)
{
	return actvxactcall_hmcall_proc_getrusage(false, false, who, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_getrusage(rref_t __rref, int who, struct __actvret_hmcall_proc_getrusage *__ret)
{
	return actvxactcapcall_hmcall_proc_getrusage(false, false, __rref, who, __ret);
}

extern unsigned long __actvcall_hmcall_proc_execve(unsigned long long __rpc_info, void *__buf, struct hm_execve_req req);


extern unsigned long __actvcapcall_hmcall_proc_execve(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_execve_req req);


static inline unsigned long __attribute__((always_inline)) actvxactcall_hmcall_proc_execve(bool is_xact_fwd, bool is_xact_allow_refwd, struct hm_execve_req req)
{
	const unsigned long __callno = __sysmgr_method_proc_execve;
	unsigned long __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_execve_req), __arch_actv_rpc_stksz_alignment(struct hm_execve_req));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_execve(rpc_info, NULL, req);
	} while (__res == (unsigned long)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline unsigned long __attribute__((always_inline)) actvxactcapcall_hmcall_proc_execve(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct hm_execve_req req)
{
	const unsigned long __callno = __sysmgr_method_proc_execve;
	unsigned long __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_execve_req), __arch_actv_rpc_stksz_alignment(struct hm_execve_req));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_execve(__rref, rpc_info, NULL, req);
	} while (__res == (unsigned long)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline unsigned long __attribute__((always_inline)) actvcall_hmcall_proc_execve(struct hm_execve_req req)
{
	return actvxactcall_hmcall_proc_execve(false, false, req);
}

static inline unsigned long __attribute__((always_inline)) actvcapcall_hmcall_proc_execve(rref_t __rref, struct hm_execve_req req)
{
	return actvxactcapcall_hmcall_proc_execve(false, false, __rref, req);
}

extern int __actvcall_hmcall_proc_new_permission(unsigned long long __rpc_info, void *__buf, unsigned long long permission);


extern int __actvcapcall_hmcall_proc_new_permission(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long permission);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_new_permission(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long permission, struct __actvret_hmcall_proc_new_permission *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_permission;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_new_permission(rpc_info, __ret, permission);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_new_permission(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long permission, struct __actvret_hmcall_proc_new_permission *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_permission;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_new_permission(__rref, rpc_info, __ret, permission);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_new_permission(unsigned long long permission, struct __actvret_hmcall_proc_new_permission *__ret)
{
	return actvxactcall_hmcall_proc_new_permission(false, false, permission, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_new_permission(rref_t __rref, unsigned long long permission, struct __actvret_hmcall_proc_new_permission *__ret)
{
	return actvxactcapcall_hmcall_proc_new_permission(false, false, __rref, permission, __ret);
}

extern int __actvcall_hmcall_proc_new_vspace_mmscd(unsigned long long __rpc_info, void *__buf, unsigned long vstart);


extern int __actvcapcall_hmcall_proc_new_vspace_mmscd(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long vstart);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_new_vspace_mmscd(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long vstart, struct __actvret_hmcall_proc_new_vspace_mmscd *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_vspace_mmscd;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_new_vspace_mmscd(rpc_info, __ret, vstart);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_new_vspace_mmscd(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long vstart, struct __actvret_hmcall_proc_new_vspace_mmscd *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_vspace_mmscd;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_new_vspace_mmscd(__rref, rpc_info, __ret, vstart);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_new_vspace_mmscd(unsigned long vstart, struct __actvret_hmcall_proc_new_vspace_mmscd *__ret)
{
	return actvxactcall_hmcall_proc_new_vspace_mmscd(false, false, vstart, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_new_vspace_mmscd(rref_t __rref, unsigned long vstart, struct __actvret_hmcall_proc_new_vspace_mmscd *__ret)
{
	return actvxactcapcall_hmcall_proc_new_vspace_mmscd(false, false, __rref, vstart, __ret);
}

extern int __actvcall_hmcall_proc_new_vspace(unsigned long long __rpc_info, void *__buf, cref_t base_pmem);


extern int __actvcapcall_hmcall_proc_new_vspace(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t base_pmem);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_new_vspace(bool is_xact_fwd, bool is_xact_allow_refwd, cref_t base_pmem, struct __actvret_hmcall_proc_new_vspace *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_vspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_new_vspace(rpc_info, __ret, base_pmem);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_new_vspace(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, cref_t base_pmem, struct __actvret_hmcall_proc_new_vspace *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_vspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_new_vspace(__rref, rpc_info, __ret, base_pmem);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_new_vspace(cref_t base_pmem, struct __actvret_hmcall_proc_new_vspace *__ret)
{
	return actvxactcall_hmcall_proc_new_vspace(false, false, base_pmem, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_new_vspace(rref_t __rref, cref_t base_pmem, struct __actvret_hmcall_proc_new_vspace *__ret)
{
	return actvxactcapcall_hmcall_proc_new_vspace(false, false, __rref, base_pmem, __ret);
}

extern int __actvcall_hmcall_proc_new_vm_mmscd(unsigned long long __rpc_info, void *__buf, unsigned long vstart, struct sysarg_vm_config vm_conf);


extern int __actvcapcall_hmcall_proc_new_vm_mmscd(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long vstart, struct sysarg_vm_config vm_conf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_new_vm_mmscd(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long vstart, struct sysarg_vm_config vm_conf, struct __actvret_hmcall_proc_new_vm_mmscd *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_vm_mmscd;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysarg_vm_config), __arch_actv_rpc_stksz_alignment(struct sysarg_vm_config));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_new_vm_mmscd(rpc_info, __ret, vstart, vm_conf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_new_vm_mmscd(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long vstart, struct sysarg_vm_config vm_conf, struct __actvret_hmcall_proc_new_vm_mmscd *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_vm_mmscd;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysarg_vm_config), __arch_actv_rpc_stksz_alignment(struct sysarg_vm_config));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_new_vm_mmscd(__rref, rpc_info, __ret, vstart, vm_conf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_new_vm_mmscd(unsigned long vstart, struct sysarg_vm_config vm_conf, struct __actvret_hmcall_proc_new_vm_mmscd *__ret)
{
	return actvxactcall_hmcall_proc_new_vm_mmscd(false, false, vstart, vm_conf, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_new_vm_mmscd(rref_t __rref, unsigned long vstart, struct sysarg_vm_config vm_conf, struct __actvret_hmcall_proc_new_vm_mmscd *__ret)
{
	return actvxactcapcall_hmcall_proc_new_vm_mmscd(false, false, __rref, vstart, vm_conf, __ret);
}

extern int __actvcall_hmcall_proc_new_vm(unsigned long long __rpc_info, void *__buf, cref_t base_pmem, struct sysarg_vm_config vm_conf);


extern int __actvcapcall_hmcall_proc_new_vm(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t base_pmem, struct sysarg_vm_config vm_conf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_new_vm(bool is_xact_fwd, bool is_xact_allow_refwd, cref_t base_pmem, struct sysarg_vm_config vm_conf, struct __actvret_hmcall_proc_new_vm *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_vm;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysarg_vm_config), __arch_actv_rpc_stksz_alignment(struct sysarg_vm_config));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_new_vm(rpc_info, __ret, base_pmem, vm_conf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_new_vm(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, cref_t base_pmem, struct sysarg_vm_config vm_conf, struct __actvret_hmcall_proc_new_vm *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_vm;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sysarg_vm_config), __arch_actv_rpc_stksz_alignment(struct sysarg_vm_config));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_new_vm(__rref, rpc_info, __ret, base_pmem, vm_conf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_new_vm(cref_t base_pmem, struct sysarg_vm_config vm_conf, struct __actvret_hmcall_proc_new_vm *__ret)
{
	return actvxactcall_hmcall_proc_new_vm(false, false, base_pmem, vm_conf, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_new_vm(rref_t __rref, cref_t base_pmem, struct sysarg_vm_config vm_conf, struct __actvret_hmcall_proc_new_vm *__ret)
{
	return actvxactcapcall_hmcall_proc_new_vm(false, false, __rref, base_pmem, vm_conf, __ret);
}

extern int __actvcall_hmcall_proc_new_cpucontext_mmscd(unsigned long long __rpc_info, void *__buf, unsigned long vstart, unsigned long long size, unsigned long long offset, struct cpucontext_name name);


extern int __actvcapcall_hmcall_proc_new_cpucontext_mmscd(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long vstart, unsigned long long size, unsigned long long offset, struct cpucontext_name name);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_new_cpucontext_mmscd(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long vstart, unsigned long long size, unsigned long long offset, struct cpucontext_name name, struct __actvret_hmcall_proc_new_cpucontext_mmscd *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_cpucontext_mmscd;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct cpucontext_name), __arch_actv_rpc_stksz_alignment(struct cpucontext_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_new_cpucontext_mmscd(rpc_info, __ret, vstart, size, offset, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_new_cpucontext_mmscd(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long vstart, unsigned long long size, unsigned long long offset, struct cpucontext_name name, struct __actvret_hmcall_proc_new_cpucontext_mmscd *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_cpucontext_mmscd;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct cpucontext_name), __arch_actv_rpc_stksz_alignment(struct cpucontext_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_new_cpucontext_mmscd(__rref, rpc_info, __ret, vstart, size, offset, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_new_cpucontext_mmscd(unsigned long vstart, unsigned long long size, unsigned long long offset, struct cpucontext_name name, struct __actvret_hmcall_proc_new_cpucontext_mmscd *__ret)
{
	return actvxactcall_hmcall_proc_new_cpucontext_mmscd(false, false, vstart, size, offset, name, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_new_cpucontext_mmscd(rref_t __rref, unsigned long vstart, unsigned long long size, unsigned long long offset, struct cpucontext_name name, struct __actvret_hmcall_proc_new_cpucontext_mmscd *__ret)
{
	return actvxactcapcall_hmcall_proc_new_cpucontext_mmscd(false, false, __rref, vstart, size, offset, name, __ret);
}

extern int __actvcall_hmcall_proc_new_cpucontext(unsigned long long __rpc_info, void *__buf, cref_t base_pmem, struct cpucontext_name name);


extern int __actvcapcall_hmcall_proc_new_cpucontext(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t base_pmem, struct cpucontext_name name);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_new_cpucontext(bool is_xact_fwd, bool is_xact_allow_refwd, cref_t base_pmem, struct cpucontext_name name, struct __actvret_hmcall_proc_new_cpucontext *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_cpucontext;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct cpucontext_name), __arch_actv_rpc_stksz_alignment(struct cpucontext_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_new_cpucontext(rpc_info, __ret, base_pmem, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_new_cpucontext(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, cref_t base_pmem, struct cpucontext_name name, struct __actvret_hmcall_proc_new_cpucontext *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_new_cpucontext;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct cpucontext_name), __arch_actv_rpc_stksz_alignment(struct cpucontext_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_new_cpucontext(__rref, rpc_info, __ret, base_pmem, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_new_cpucontext(cref_t base_pmem, struct cpucontext_name name, struct __actvret_hmcall_proc_new_cpucontext *__ret)
{
	return actvxactcall_hmcall_proc_new_cpucontext(false, false, base_pmem, name, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_new_cpucontext(rref_t __rref, cref_t base_pmem, struct cpucontext_name name, struct __actvret_hmcall_proc_new_cpucontext *__ret)
{
	return actvxactcapcall_hmcall_proc_new_cpucontext(false, false, __rref, base_pmem, name, __ret);
}

extern int __actvcall_hmcall_proc_elf_load_info(unsigned long long __rpc_info, void *__buf, pid_t pid, struct bunch_ipc_attr attr);


extern int __actvcapcall_hmcall_proc_elf_load_info(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct bunch_ipc_attr attr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_elf_load_info(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, struct bunch_ipc_attr attr)
{
	const unsigned long __callno = __sysmgr_method_proc_elf_load_info;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct bunch_ipc_attr), __arch_actv_rpc_stksz_alignment(struct bunch_ipc_attr));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_elf_load_info(rpc_info, NULL, pid, attr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_elf_load_info(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, struct bunch_ipc_attr attr)
{
	const unsigned long __callno = __sysmgr_method_proc_elf_load_info;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct bunch_ipc_attr), __arch_actv_rpc_stksz_alignment(struct bunch_ipc_attr));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_elf_load_info(__rref, rpc_info, NULL, pid, attr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_elf_load_info(pid_t pid, struct bunch_ipc_attr attr)
{
	return actvxactcall_hmcall_proc_elf_load_info(false, false, pid, attr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_elf_load_info(rref_t __rref, pid_t pid, struct bunch_ipc_attr attr)
{
	return actvxactcapcall_hmcall_proc_elf_load_info(false, false, __rref, pid, attr);
}

extern int __actvcall_hmcall_proc_pm_config_add(unsigned long long __rpc_info, void *__buf, struct proc_pm_config config);


extern int __actvcapcall_hmcall_proc_pm_config_add(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct proc_pm_config config);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_pm_config_add(bool is_xact_fwd, bool is_xact_allow_refwd, struct proc_pm_config config)
{
	const unsigned long __callno = __sysmgr_method_proc_pm_config_add;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct proc_pm_config), __arch_actv_rpc_stksz_alignment(struct proc_pm_config));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_pm_config_add(rpc_info, NULL, config);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_pm_config_add(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct proc_pm_config config)
{
	const unsigned long __callno = __sysmgr_method_proc_pm_config_add;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct proc_pm_config), __arch_actv_rpc_stksz_alignment(struct proc_pm_config));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_pm_config_add(__rref, rpc_info, NULL, config);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_pm_config_add(struct proc_pm_config config)
{
	return actvxactcall_hmcall_proc_pm_config_add(false, false, config);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_pm_config_add(rref_t __rref, struct proc_pm_config config)
{
	return actvxactcapcall_hmcall_proc_pm_config_add(false, false, __rref, config);
}

extern int __actvcall_hmcall_proc_pm_config_cleanup(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_pm_config_cleanup(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_pm_config_cleanup(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_proc_pm_config_cleanup;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_pm_config_cleanup(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_pm_config_cleanup(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_proc_pm_config_cleanup;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_pm_config_cleanup(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_pm_config_cleanup(void)
{
	return actvxactcall_hmcall_proc_pm_config_cleanup(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_pm_config_cleanup(rref_t __rref)
{
	return actvxactcapcall_hmcall_proc_pm_config_cleanup(false, false, __rref);
}

extern int __actvcall_hmcall_proc_pm_dormancy_enter(unsigned long long __rpc_info, void *__buf, cref_t src_tcb_cref, enum proc_pm_attr attr, int enter);


extern int __actvcapcall_hmcall_proc_pm_dormancy_enter(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t src_tcb_cref, enum proc_pm_attr attr, int enter);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_pm_dormancy_enter(bool is_xact_fwd, bool is_xact_allow_refwd, cref_t src_tcb_cref, enum proc_pm_attr attr, int enter)
{
	const unsigned long __callno = __sysmgr_method_proc_pm_dormancy_enter;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum proc_pm_attr), __arch_actv_rpc_stksz_alignment(enum proc_pm_attr));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_pm_dormancy_enter(rpc_info, NULL, src_tcb_cref, attr, enter);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_pm_dormancy_enter(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, cref_t src_tcb_cref, enum proc_pm_attr attr, int enter)
{
	const unsigned long __callno = __sysmgr_method_proc_pm_dormancy_enter;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum proc_pm_attr), __arch_actv_rpc_stksz_alignment(enum proc_pm_attr));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_pm_dormancy_enter(__rref, rpc_info, NULL, src_tcb_cref, attr, enter);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_pm_dormancy_enter(cref_t src_tcb_cref, enum proc_pm_attr attr, int enter)
{
	return actvxactcall_hmcall_proc_pm_dormancy_enter(false, false, src_tcb_cref, attr, enter);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_pm_dormancy_enter(rref_t __rref, cref_t src_tcb_cref, enum proc_pm_attr attr, int enter)
{
	return actvxactcapcall_hmcall_proc_pm_dormancy_enter(false, false, __rref, src_tcb_cref, attr, enter);
}

extern int __actvcall_hmcall_proc_show_pte(unsigned long long __rpc_info, void *__buf, const void *vaddr);


extern int __actvcapcall_hmcall_proc_show_pte(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *vaddr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_show_pte(bool is_xact_fwd, bool is_xact_allow_refwd, const void *vaddr)
{
	const unsigned long __callno = __sysmgr_method_proc_show_pte;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_show_pte(rpc_info, NULL, vaddr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_show_pte(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *vaddr)
{
	const unsigned long __callno = __sysmgr_method_proc_show_pte;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_show_pte(__rref, rpc_info, NULL, vaddr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_show_pte(const void *vaddr)
{
	return actvxactcall_hmcall_proc_show_pte(false, false, vaddr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_show_pte(rref_t __rref, const void *vaddr)
{
	return actvxactcapcall_hmcall_proc_show_pte(false, false, __rref, vaddr);
}

extern int __actvcall_hmcall_proc_check_regs(unsigned long long __rpc_info, void *__buf, unsigned int which, unsigned long addr, size_t size);


extern int __actvcapcall_hmcall_proc_check_regs(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int which, unsigned long addr, size_t size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_check_regs(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int which, unsigned long addr, size_t size)
{
	const unsigned long __callno = __sysmgr_method_proc_check_regs;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_check_regs(rpc_info, NULL, which, addr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_check_regs(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int which, unsigned long addr, size_t size)
{
	const unsigned long __callno = __sysmgr_method_proc_check_regs;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_check_regs(__rref, rpc_info, NULL, which, addr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_check_regs(unsigned int which, unsigned long addr, size_t size)
{
	return actvxactcall_hmcall_proc_check_regs(false, false, which, addr, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_check_regs(rref_t __rref, unsigned int which, unsigned long addr, size_t size)
{
	return actvxactcapcall_hmcall_proc_check_regs(false, false, __rref, which, addr, size);
}

extern int __actvcall_hmcall_proc_get_dumpable(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_get_dumpable(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_get_dumpable(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_proc_get_dumpable *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_get_dumpable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_get_dumpable(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_get_dumpable(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_proc_get_dumpable *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_get_dumpable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_get_dumpable(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_get_dumpable(struct __actvret_hmcall_proc_get_dumpable *__ret)
{
	return actvxactcall_hmcall_proc_get_dumpable(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_get_dumpable(rref_t __rref, struct __actvret_hmcall_proc_get_dumpable *__ret)
{
	return actvxactcapcall_hmcall_proc_get_dumpable(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_proc_set_dumpable(unsigned long long __rpc_info, void *__buf, unsigned long dumpable);


extern int __actvcapcall_hmcall_proc_set_dumpable(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long dumpable);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_set_dumpable(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long dumpable)
{
	const unsigned long __callno = __sysmgr_method_proc_set_dumpable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_set_dumpable(rpc_info, NULL, dumpable);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_set_dumpable(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long dumpable)
{
	const unsigned long __callno = __sysmgr_method_proc_set_dumpable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_set_dumpable(__rref, rpc_info, NULL, dumpable);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_set_dumpable(unsigned long dumpable)
{
	return actvxactcall_hmcall_proc_set_dumpable(false, false, dumpable);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_set_dumpable(rref_t __rref, unsigned long dumpable)
{
	return actvxactcapcall_hmcall_proc_set_dumpable(false, false, __rref, dumpable);
}

extern int __actvcall_hmcall_proc_set_subreaper(unsigned long long __rpc_info, void *__buf, unsigned long child_subreaper);


extern int __actvcapcall_hmcall_proc_set_subreaper(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long child_subreaper);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_set_subreaper(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long child_subreaper)
{
	const unsigned long __callno = __sysmgr_method_proc_set_subreaper;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_set_subreaper(rpc_info, NULL, child_subreaper);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_set_subreaper(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long child_subreaper)
{
	const unsigned long __callno = __sysmgr_method_proc_set_subreaper;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_set_subreaper(__rref, rpc_info, NULL, child_subreaper);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_set_subreaper(unsigned long child_subreaper)
{
	return actvxactcall_hmcall_proc_set_subreaper(false, false, child_subreaper);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_set_subreaper(rref_t __rref, unsigned long child_subreaper)
{
	return actvxactcapcall_hmcall_proc_set_subreaper(false, false, __rref, child_subreaper);
}

extern int __actvcall_hmcall_proc_get_subreaper(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_get_subreaper(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_get_subreaper(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_proc_get_subreaper *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_get_subreaper;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_get_subreaper(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_get_subreaper(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_proc_get_subreaper *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_get_subreaper;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_get_subreaper(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_get_subreaper(struct __actvret_hmcall_proc_get_subreaper *__ret)
{
	return actvxactcall_hmcall_proc_get_subreaper(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_get_subreaper(rref_t __rref, struct __actvret_hmcall_proc_get_subreaper *__ret)
{
	return actvxactcapcall_hmcall_proc_get_subreaper(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_proc_set_privs(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_set_privs(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_set_privs(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_proc_set_privs;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_set_privs(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_set_privs(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_proc_set_privs;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_set_privs(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_set_privs(void)
{
	return actvxactcall_hmcall_proc_set_privs(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_set_privs(rref_t __rref)
{
	return actvxactcapcall_hmcall_proc_set_privs(false, false, __rref);
}

extern int __actvcall_hmcall_proc_get_privs(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_get_privs(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_get_privs(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_proc_get_privs *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_get_privs;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_get_privs(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_get_privs(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_proc_get_privs *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_get_privs;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_get_privs(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_get_privs(struct __actvret_hmcall_proc_get_privs *__ret)
{
	return actvxactcall_hmcall_proc_get_privs(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_get_privs(rref_t __rref, struct __actvret_hmcall_proc_get_privs *__ret)
{
	return actvxactcapcall_hmcall_proc_get_privs(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_proc_clone(unsigned long long __rpc_info, void *__buf, struct hm_clone_req req);


extern int __actvcapcall_hmcall_proc_clone(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_clone_req req);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_clone(bool is_xact_fwd, bool is_xact_allow_refwd, struct hm_clone_req req, struct __actvret_hmcall_proc_clone *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_clone;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_clone_req), __arch_actv_rpc_stksz_alignment(struct hm_clone_req));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_clone(rpc_info, __ret, req);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_clone(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct hm_clone_req req, struct __actvret_hmcall_proc_clone *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_clone;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_clone_req), __arch_actv_rpc_stksz_alignment(struct hm_clone_req));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_clone(__rref, rpc_info, __ret, req);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_clone(struct hm_clone_req req, struct __actvret_hmcall_proc_clone *__ret)
{
	return actvxactcall_hmcall_proc_clone(false, false, req, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_clone(rref_t __rref, struct hm_clone_req req, struct __actvret_hmcall_proc_clone *__ret)
{
	return actvxactcapcall_hmcall_proc_clone(false, false, __rref, req, __ret);
}

extern int __actvcall_hmcall_proc_dyn_libs_data(unsigned long long __rpc_info, void *__buf, unsigned int libs_cnt, struct hm_actv_buf dyn_buf);


extern int __actvcapcall_hmcall_proc_dyn_libs_data(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int libs_cnt, struct hm_actv_buf dyn_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_dyn_libs_data(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int libs_cnt, struct hm_actv_buf dyn_buf)
{
	const unsigned long __callno = __sysmgr_method_proc_dyn_libs_data;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_dyn_libs_data(rpc_info, NULL, libs_cnt, dyn_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_dyn_libs_data(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int libs_cnt, struct hm_actv_buf dyn_buf)
{
	const unsigned long __callno = __sysmgr_method_proc_dyn_libs_data;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_dyn_libs_data(__rref, rpc_info, NULL, libs_cnt, dyn_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_dyn_libs_data(unsigned int libs_cnt, struct hm_actv_buf dyn_buf)
{
	return actvxactcall_hmcall_proc_dyn_libs_data(false, false, libs_cnt, dyn_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_dyn_libs_data(rref_t __rref, unsigned int libs_cnt, struct hm_actv_buf dyn_buf)
{
	return actvxactcapcall_hmcall_proc_dyn_libs_data(false, false, __rref, libs_cnt, dyn_buf);
}

extern int __actvcall_hmcall_proc_register_event(unsigned long long __rpc_info, void *__buf, unsigned int type, struct event_args_s args);


extern int __actvcapcall_hmcall_proc_register_event(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int type, struct event_args_s args);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_register_event(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int type, struct event_args_s args)
{
	const unsigned long __callno = __sysmgr_method_proc_register_event;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct event_args_s), __arch_actv_rpc_stksz_alignment(struct event_args_s));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_register_event(rpc_info, NULL, type, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_register_event(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int type, struct event_args_s args)
{
	const unsigned long __callno = __sysmgr_method_proc_register_event;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct event_args_s), __arch_actv_rpc_stksz_alignment(struct event_args_s));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_register_event(__rref, rpc_info, NULL, type, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_register_event(unsigned int type, struct event_args_s args)
{
	return actvxactcall_hmcall_proc_register_event(false, false, type, args);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_register_event(rref_t __rref, unsigned int type, struct event_args_s args)
{
	return actvxactcapcall_hmcall_proc_register_event(false, false, __rref, type, args);
}

extern int __actvcall_hmcall_proc_affinity_get(unsigned long long __rpc_info, void *__buf, pid_t pid);


extern int __actvcapcall_hmcall_proc_affinity_get(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_affinity_get(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, struct __actvret_hmcall_proc_affinity_get *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_affinity_get;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_affinity_get(rpc_info, __ret, pid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_affinity_get(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, struct __actvret_hmcall_proc_affinity_get *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_affinity_get;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_affinity_get(__rref, rpc_info, __ret, pid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_affinity_get(pid_t pid, struct __actvret_hmcall_proc_affinity_get *__ret)
{
	return actvxactcall_hmcall_proc_affinity_get(false, false, pid, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_affinity_get(rref_t __rref, pid_t pid, struct __actvret_hmcall_proc_affinity_get *__ret)
{
	return actvxactcapcall_hmcall_proc_affinity_get(false, false, __rref, pid, __ret);
}

extern int __actvcall_hmcall_mqueue_open(unsigned long long __rpc_info, void *__buf, int oflag, unsigned int mode, long mq_flags, long mq_maxmsg, long mq_msgsize, long mq_curmsgs, struct mqueuemgr_name mqueue);


extern int __actvcapcall_hmcall_mqueue_open(rref_t __rref, unsigned long long __rpc_info, void *__buf, int oflag, unsigned int mode, long mq_flags, long mq_maxmsg, long mq_msgsize, long mq_curmsgs, struct mqueuemgr_name mqueue);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mqueue_open(bool is_xact_fwd, bool is_xact_allow_refwd, int oflag, unsigned int mode, long mq_flags, long mq_maxmsg, long mq_msgsize, long mq_curmsgs, struct mqueuemgr_name mqueue)
{
	const unsigned long __callno = __sysmgr_method_mqueue_open;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct mqueuemgr_name), __arch_actv_rpc_stksz_alignment(struct mqueuemgr_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mqueue_open(rpc_info, NULL, oflag, mode, mq_flags, mq_maxmsg, mq_msgsize, mq_curmsgs, mqueue);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mqueue_open(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int oflag, unsigned int mode, long mq_flags, long mq_maxmsg, long mq_msgsize, long mq_curmsgs, struct mqueuemgr_name mqueue)
{
	const unsigned long __callno = __sysmgr_method_mqueue_open;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct mqueuemgr_name), __arch_actv_rpc_stksz_alignment(struct mqueuemgr_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mqueue_open(__rref, rpc_info, NULL, oflag, mode, mq_flags, mq_maxmsg, mq_msgsize, mq_curmsgs, mqueue);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mqueue_open(int oflag, unsigned int mode, long mq_flags, long mq_maxmsg, long mq_msgsize, long mq_curmsgs, struct mqueuemgr_name mqueue)
{
	return actvxactcall_hmcall_mqueue_open(false, false, oflag, mode, mq_flags, mq_maxmsg, mq_msgsize, mq_curmsgs, mqueue);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mqueue_open(rref_t __rref, int oflag, unsigned int mode, long mq_flags, long mq_maxmsg, long mq_msgsize, long mq_curmsgs, struct mqueuemgr_name mqueue)
{
	return actvxactcapcall_hmcall_mqueue_open(false, false, __rref, oflag, mode, mq_flags, mq_maxmsg, mq_msgsize, mq_curmsgs, mqueue);
}

extern int __actvcall_hmcall_mqueue_send(unsigned long long __rpc_info, void *__buf, int mqd, unsigned int msg_prio, unsigned long msg_ptr, size_t msg_len, bool set_timeout, time_t tv_sec, long tv_nsec);


extern int __actvcapcall_hmcall_mqueue_send(rref_t __rref, unsigned long long __rpc_info, void *__buf, int mqd, unsigned int msg_prio, unsigned long msg_ptr, size_t msg_len, bool set_timeout, time_t tv_sec, long tv_nsec);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mqueue_send(bool is_xact_fwd, bool is_xact_allow_refwd, int mqd, unsigned int msg_prio, unsigned long msg_ptr, size_t msg_len, bool set_timeout, time_t tv_sec, long tv_nsec)
{
	const unsigned long __callno = __sysmgr_method_mqueue_send;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(time_t), __arch_actv_rpc_stksz_alignment(time_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mqueue_send(rpc_info, NULL, mqd, msg_prio, msg_ptr, msg_len, set_timeout, tv_sec, tv_nsec);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mqueue_send(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int mqd, unsigned int msg_prio, unsigned long msg_ptr, size_t msg_len, bool set_timeout, time_t tv_sec, long tv_nsec)
{
	const unsigned long __callno = __sysmgr_method_mqueue_send;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(time_t), __arch_actv_rpc_stksz_alignment(time_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mqueue_send(__rref, rpc_info, NULL, mqd, msg_prio, msg_ptr, msg_len, set_timeout, tv_sec, tv_nsec);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mqueue_send(int mqd, unsigned int msg_prio, unsigned long msg_ptr, size_t msg_len, bool set_timeout, time_t tv_sec, long tv_nsec)
{
	return actvxactcall_hmcall_mqueue_send(false, false, mqd, msg_prio, msg_ptr, msg_len, set_timeout, tv_sec, tv_nsec);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mqueue_send(rref_t __rref, int mqd, unsigned int msg_prio, unsigned long msg_ptr, size_t msg_len, bool set_timeout, time_t tv_sec, long tv_nsec)
{
	return actvxactcapcall_hmcall_mqueue_send(false, false, __rref, mqd, msg_prio, msg_ptr, msg_len, set_timeout, tv_sec, tv_nsec);
}

extern int __actvcall_hmcall_mqueue_recv(unsigned long long __rpc_info, void *__buf, int mqd, unsigned long recv_addr, unsigned long recv_size, bool set_timeout, time_t tv_sec, long tv_nsec);


extern int __actvcapcall_hmcall_mqueue_recv(rref_t __rref, unsigned long long __rpc_info, void *__buf, int mqd, unsigned long recv_addr, unsigned long recv_size, bool set_timeout, time_t tv_sec, long tv_nsec);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mqueue_recv(bool is_xact_fwd, bool is_xact_allow_refwd, int mqd, unsigned long recv_addr, unsigned long recv_size, bool set_timeout, time_t tv_sec, long tv_nsec, struct __actvret_hmcall_mqueue_recv *__ret)
{
	const unsigned long __callno = __sysmgr_method_mqueue_recv;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(time_t), __arch_actv_rpc_stksz_alignment(time_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mqueue_recv(rpc_info, __ret, mqd, recv_addr, recv_size, set_timeout, tv_sec, tv_nsec);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mqueue_recv(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int mqd, unsigned long recv_addr, unsigned long recv_size, bool set_timeout, time_t tv_sec, long tv_nsec, struct __actvret_hmcall_mqueue_recv *__ret)
{
	const unsigned long __callno = __sysmgr_method_mqueue_recv;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(time_t), __arch_actv_rpc_stksz_alignment(time_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mqueue_recv(__rref, rpc_info, __ret, mqd, recv_addr, recv_size, set_timeout, tv_sec, tv_nsec);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mqueue_recv(int mqd, unsigned long recv_addr, unsigned long recv_size, bool set_timeout, time_t tv_sec, long tv_nsec, struct __actvret_hmcall_mqueue_recv *__ret)
{
	return actvxactcall_hmcall_mqueue_recv(false, false, mqd, recv_addr, recv_size, set_timeout, tv_sec, tv_nsec, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mqueue_recv(rref_t __rref, int mqd, unsigned long recv_addr, unsigned long recv_size, bool set_timeout, time_t tv_sec, long tv_nsec, struct __actvret_hmcall_mqueue_recv *__ret)
{
	return actvxactcapcall_hmcall_mqueue_recv(false, false, __rref, mqd, recv_addr, recv_size, set_timeout, tv_sec, tv_nsec, __ret);
}

extern int __actvcall_hmcall_mqueue_getsetattr(unsigned long long __rpc_info, void *__buf, int mqd, long mq_flags);


extern int __actvcapcall_hmcall_mqueue_getsetattr(rref_t __rref, unsigned long long __rpc_info, void *__buf, int mqd, long mq_flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mqueue_getsetattr(bool is_xact_fwd, bool is_xact_allow_refwd, int mqd, long mq_flags, struct __actvret_hmcall_mqueue_getsetattr *__ret)
{
	const unsigned long __callno = __sysmgr_method_mqueue_getsetattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mqueue_getsetattr(rpc_info, __ret, mqd, mq_flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mqueue_getsetattr(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int mqd, long mq_flags, struct __actvret_hmcall_mqueue_getsetattr *__ret)
{
	const unsigned long __callno = __sysmgr_method_mqueue_getsetattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mqueue_getsetattr(__rref, rpc_info, __ret, mqd, mq_flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mqueue_getsetattr(int mqd, long mq_flags, struct __actvret_hmcall_mqueue_getsetattr *__ret)
{
	return actvxactcall_hmcall_mqueue_getsetattr(false, false, mqd, mq_flags, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mqueue_getsetattr(rref_t __rref, int mqd, long mq_flags, struct __actvret_hmcall_mqueue_getsetattr *__ret)
{
	return actvxactcapcall_hmcall_mqueue_getsetattr(false, false, __rref, mqd, mq_flags, __ret);
}

extern int __actvcall_hmcall_mqueue_close(unsigned long long __rpc_info, void *__buf, int mqd);


extern int __actvcapcall_hmcall_mqueue_close(rref_t __rref, unsigned long long __rpc_info, void *__buf, int mqd);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mqueue_close(bool is_xact_fwd, bool is_xact_allow_refwd, int mqd)
{
	const unsigned long __callno = __sysmgr_method_mqueue_close;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mqueue_close(rpc_info, NULL, mqd);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mqueue_close(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int mqd)
{
	const unsigned long __callno = __sysmgr_method_mqueue_close;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mqueue_close(__rref, rpc_info, NULL, mqd);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mqueue_close(int mqd)
{
	return actvxactcall_hmcall_mqueue_close(false, false, mqd);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mqueue_close(rref_t __rref, int mqd)
{
	return actvxactcapcall_hmcall_mqueue_close(false, false, __rref, mqd);
}

extern int __actvcall_hmcall_mqueue_unlink(unsigned long long __rpc_info, void *__buf, struct mqueuemgr_name mqueue);


extern int __actvcapcall_hmcall_mqueue_unlink(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct mqueuemgr_name mqueue);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mqueue_unlink(bool is_xact_fwd, bool is_xact_allow_refwd, struct mqueuemgr_name mqueue)
{
	const unsigned long __callno = __sysmgr_method_mqueue_unlink;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct mqueuemgr_name), __arch_actv_rpc_stksz_alignment(struct mqueuemgr_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mqueue_unlink(rpc_info, NULL, mqueue);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mqueue_unlink(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct mqueuemgr_name mqueue)
{
	const unsigned long __callno = __sysmgr_method_mqueue_unlink;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct mqueuemgr_name), __arch_actv_rpc_stksz_alignment(struct mqueuemgr_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mqueue_unlink(__rref, rpc_info, NULL, mqueue);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mqueue_unlink(struct mqueuemgr_name mqueue)
{
	return actvxactcall_hmcall_mqueue_unlink(false, false, mqueue);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mqueue_unlink(rref_t __rref, struct mqueuemgr_name mqueue)
{
	return actvxactcapcall_hmcall_mqueue_unlink(false, false, __rref, mqueue);
}

extern int __actvcall_hmcall_mqueue_chmod(unsigned long long __rpc_info, void *__buf, struct mqueuemgr_name mqueue, mode_t mode);


extern int __actvcapcall_hmcall_mqueue_chmod(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct mqueuemgr_name mqueue, mode_t mode);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_mqueue_chmod(bool is_xact_fwd, bool is_xact_allow_refwd, struct mqueuemgr_name mqueue, mode_t mode)
{
	const unsigned long __callno = __sysmgr_method_mqueue_chmod;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct mqueuemgr_name), __arch_actv_rpc_stksz_alignment(struct mqueuemgr_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_mqueue_chmod(rpc_info, NULL, mqueue, mode);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_mqueue_chmod(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct mqueuemgr_name mqueue, mode_t mode)
{
	const unsigned long __callno = __sysmgr_method_mqueue_chmod;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct mqueuemgr_name), __arch_actv_rpc_stksz_alignment(struct mqueuemgr_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(mode_t), __arch_actv_rpc_stksz_alignment(mode_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_mqueue_chmod(__rref, rpc_info, NULL, mqueue, mode);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_mqueue_chmod(struct mqueuemgr_name mqueue, mode_t mode)
{
	return actvxactcall_hmcall_mqueue_chmod(false, false, mqueue, mode);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_mqueue_chmod(rref_t __rref, struct mqueuemgr_name mqueue, mode_t mode)
{
	return actvxactcapcall_hmcall_mqueue_chmod(false, false, __rref, mqueue, mode);
}

extern int __actvcall_hmcall_thread_exit(unsigned long long __rpc_info, void *__buf, int exitval);


extern int __actvcapcall_hmcall_thread_exit(rref_t __rref, unsigned long long __rpc_info, void *__buf, int exitval);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_exit(bool is_xact_fwd, bool is_xact_allow_refwd, int exitval)
{
	const unsigned long __callno = __sysmgr_method_thread_exit;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_exit(rpc_info, NULL, exitval);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_exit(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int exitval)
{
	const unsigned long __callno = __sysmgr_method_thread_exit;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_exit(__rref, rpc_info, NULL, exitval);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_exit(int exitval)
{
	return actvxactcall_hmcall_thread_exit(false, false, exitval);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_exit(rref_t __rref, int exitval)
{
	return actvxactcapcall_hmcall_thread_exit(false, false, __rref, exitval);
}

extern int __actvcall_hmcall_thread_kill(unsigned long long __rpc_info, void *__buf, int tid);


extern int __actvcapcall_hmcall_thread_kill(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_kill(bool is_xact_fwd, bool is_xact_allow_refwd, int tid)
{
	const unsigned long __callno = __sysmgr_method_thread_kill;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_kill(rpc_info, NULL, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_kill(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid)
{
	const unsigned long __callno = __sysmgr_method_thread_kill;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_kill(__rref, rpc_info, NULL, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_kill(int tid)
{
	return actvxactcall_hmcall_thread_kill(false, false, tid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_kill(rref_t __rref, int tid)
{
	return actvxactcapcall_hmcall_thread_kill(false, false, __rref, tid);
}

extern int __actvcall_hmcall_thread_gettid(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_thread_gettid(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_gettid(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_thread_gettid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_gettid(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_gettid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_thread_gettid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_gettid(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_gettid(void)
{
	return actvxactcall_hmcall_thread_gettid(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_gettid(rref_t __rref)
{
	return actvxactcapcall_hmcall_thread_gettid(false, false, __rref);
}

extern int __actvcall_hmcall_thread_tid2cref(unsigned long long __rpc_info, void *__buf, int tid);


extern int __actvcapcall_hmcall_thread_tid2cref(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_tid2cref(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, struct __actvret_hmcall_thread_tid2cref *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_tid2cref;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_tid2cref(rpc_info, __ret, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_tid2cref(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, struct __actvret_hmcall_thread_tid2cref *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_tid2cref;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_tid2cref(__rref, rpc_info, __ret, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_tid2cref(int tid, struct __actvret_hmcall_thread_tid2cref *__ret)
{
	return actvxactcall_hmcall_thread_tid2cref(false, false, tid, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_tid2cref(rref_t __rref, int tid, struct __actvret_hmcall_thread_tid2cref *__ret)
{
	return actvxactcapcall_hmcall_thread_tid2cref(false, false, __rref, tid, __ret);
}

extern int __actvcall_hmcall_thread_set_tid_address(unsigned long long __rpc_info, void *__buf, cref_t tcb_cref, int *tid_addr);


extern int __actvcapcall_hmcall_thread_set_tid_address(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t tcb_cref, int *tid_addr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_set_tid_address(bool is_xact_fwd, bool is_xact_allow_refwd, cref_t tcb_cref, int *tid_addr)
{
	const unsigned long __callno = __sysmgr_method_thread_set_tid_address;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int*), __arch_actv_rpc_stksz_alignment(int*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_set_tid_address(rpc_info, NULL, tcb_cref, tid_addr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_set_tid_address(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, cref_t tcb_cref, int *tid_addr)
{
	const unsigned long __callno = __sysmgr_method_thread_set_tid_address;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int*), __arch_actv_rpc_stksz_alignment(int*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_set_tid_address(__rref, rpc_info, NULL, tcb_cref, tid_addr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_set_tid_address(cref_t tcb_cref, int *tid_addr)
{
	return actvxactcall_hmcall_thread_set_tid_address(false, false, tcb_cref, tid_addr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_set_tid_address(rref_t __rref, cref_t tcb_cref, int *tid_addr)
{
	return actvxactcapcall_hmcall_thread_set_tid_address(false, false, __rref, tcb_cref, tid_addr);
}

extern int __actvcall_hmcall_thread_setname(unsigned long long __rpc_info, void *__buf, cref_t tcb_cref, struct threadmgr_thread_name th_name);


extern int __actvcapcall_hmcall_thread_setname(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t tcb_cref, struct threadmgr_thread_name th_name);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_setname(bool is_xact_fwd, bool is_xact_allow_refwd, cref_t tcb_cref, struct threadmgr_thread_name th_name)
{
	const unsigned long __callno = __sysmgr_method_thread_setname;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct threadmgr_thread_name), __arch_actv_rpc_stksz_alignment(struct threadmgr_thread_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_setname(rpc_info, NULL, tcb_cref, th_name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_setname(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, cref_t tcb_cref, struct threadmgr_thread_name th_name)
{
	const unsigned long __callno = __sysmgr_method_thread_setname;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct threadmgr_thread_name), __arch_actv_rpc_stksz_alignment(struct threadmgr_thread_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_setname(__rref, rpc_info, NULL, tcb_cref, th_name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_setname(cref_t tcb_cref, struct threadmgr_thread_name th_name)
{
	return actvxactcall_hmcall_thread_setname(false, false, tcb_cref, th_name);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_setname(rref_t __rref, cref_t tcb_cref, struct threadmgr_thread_name th_name)
{
	return actvxactcapcall_hmcall_thread_setname(false, false, __rref, tcb_cref, th_name);
}

extern int __actvcall_hmcall_thread_set_pdeath_signal(unsigned long long __rpc_info, void *__buf, int signum);


extern int __actvcapcall_hmcall_thread_set_pdeath_signal(rref_t __rref, unsigned long long __rpc_info, void *__buf, int signum);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_set_pdeath_signal(bool is_xact_fwd, bool is_xact_allow_refwd, int signum)
{
	const unsigned long __callno = __sysmgr_method_thread_set_pdeath_signal;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_set_pdeath_signal(rpc_info, NULL, signum);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_set_pdeath_signal(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int signum)
{
	const unsigned long __callno = __sysmgr_method_thread_set_pdeath_signal;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_set_pdeath_signal(__rref, rpc_info, NULL, signum);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_set_pdeath_signal(int signum)
{
	return actvxactcall_hmcall_thread_set_pdeath_signal(false, false, signum);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_set_pdeath_signal(rref_t __rref, int signum)
{
	return actvxactcapcall_hmcall_thread_set_pdeath_signal(false, false, __rref, signum);
}

extern int __actvcall_hmcall_thread_get_pdeath_signal(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_thread_get_pdeath_signal(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_get_pdeath_signal(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_thread_get_pdeath_signal *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_get_pdeath_signal;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_get_pdeath_signal(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_get_pdeath_signal(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_thread_get_pdeath_signal *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_get_pdeath_signal;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_get_pdeath_signal(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_get_pdeath_signal(struct __actvret_hmcall_thread_get_pdeath_signal *__ret)
{
	return actvxactcall_hmcall_thread_get_pdeath_signal(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_get_pdeath_signal(rref_t __rref, struct __actvret_hmcall_thread_get_pdeath_signal *__ret)
{
	return actvxactcapcall_hmcall_thread_get_pdeath_signal(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_thread_set_robust_list(unsigned long long __rpc_info, void *__buf, unsigned long list_head, unsigned long len);


extern int __actvcapcall_hmcall_thread_set_robust_list(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long list_head, unsigned long len);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_set_robust_list(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long list_head, unsigned long len)
{
	const unsigned long __callno = __sysmgr_method_thread_set_robust_list;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_set_robust_list(rpc_info, NULL, list_head, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_set_robust_list(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long list_head, unsigned long len)
{
	const unsigned long __callno = __sysmgr_method_thread_set_robust_list;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_set_robust_list(__rref, rpc_info, NULL, list_head, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_set_robust_list(unsigned long list_head, unsigned long len)
{
	return actvxactcall_hmcall_thread_set_robust_list(false, false, list_head, len);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_set_robust_list(rref_t __rref, unsigned long list_head, unsigned long len)
{
	return actvxactcapcall_hmcall_thread_set_robust_list(false, false, __rref, list_head, len);
}

extern int __actvcall_hmcall_thread_get_robust_list(unsigned long long __rpc_info, void *__buf, int tid);


extern int __actvcapcall_hmcall_thread_get_robust_list(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_get_robust_list(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, struct __actvret_hmcall_thread_get_robust_list *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_get_robust_list;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_get_robust_list(rpc_info, __ret, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_get_robust_list(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, struct __actvret_hmcall_thread_get_robust_list *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_get_robust_list;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_get_robust_list(__rref, rpc_info, __ret, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_get_robust_list(int tid, struct __actvret_hmcall_thread_get_robust_list *__ret)
{
	return actvxactcall_hmcall_thread_get_robust_list(false, false, tid, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_get_robust_list(rref_t __rref, int tid, struct __actvret_hmcall_thread_get_robust_list *__ret)
{
	return actvxactcapcall_hmcall_thread_get_robust_list(false, false, __rref, tid, __ret);
}

extern int __actvcall_hmcall_thread_freeze(unsigned long long __rpc_info, void *__buf, int tid, int flag);


extern int __actvcapcall_hmcall_thread_freeze(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, int flag);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_freeze(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, int flag)
{
	const unsigned long __callno = __sysmgr_method_thread_freeze;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_freeze(rpc_info, NULL, tid, flag);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_freeze(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, int flag)
{
	const unsigned long __callno = __sysmgr_method_thread_freeze;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_freeze(__rref, rpc_info, NULL, tid, flag);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_freeze(int tid, int flag)
{
	return actvxactcall_hmcall_thread_freeze(false, false, tid, flag);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_freeze(rref_t __rref, int tid, int flag)
{
	return actvxactcapcall_hmcall_thread_freeze(false, false, __rref, tid, flag);
}

extern int __actvcall_hmcall_thread_thaw(unsigned long long __rpc_info, void *__buf, int tid);


extern int __actvcapcall_hmcall_thread_thaw(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_thaw(bool is_xact_fwd, bool is_xact_allow_refwd, int tid)
{
	const unsigned long __callno = __sysmgr_method_thread_thaw;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_thaw(rpc_info, NULL, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_thaw(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid)
{
	const unsigned long __callno = __sysmgr_method_thread_thaw;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_thaw(__rref, rpc_info, NULL, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_thaw(int tid)
{
	return actvxactcall_hmcall_thread_thaw(false, false, tid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_thaw(rref_t __rref, int tid)
{
	return actvxactcapcall_hmcall_thread_thaw(false, false, __rref, tid);
}

extern int __actvcall_hmcall_thread_setpersonality(unsigned long long __rpc_info, void *__buf, unsigned long personality);


extern int __actvcapcall_hmcall_thread_setpersonality(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long personality);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_setpersonality(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long personality)
{
	const unsigned long __callno = __sysmgr_method_thread_setpersonality;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_setpersonality(rpc_info, NULL, personality);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_setpersonality(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long personality)
{
	const unsigned long __callno = __sysmgr_method_thread_setpersonality;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_setpersonality(__rref, rpc_info, NULL, personality);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_setpersonality(unsigned long personality)
{
	return actvxactcall_hmcall_thread_setpersonality(false, false, personality);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_setpersonality(rref_t __rref, unsigned long personality)
{
	return actvxactcapcall_hmcall_thread_setpersonality(false, false, __rref, personality);
}

extern int __actvcall_hmcall_thread_getpersonality(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_thread_getpersonality(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_getpersonality(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_thread_getpersonality *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_getpersonality;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_getpersonality(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_getpersonality(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_thread_getpersonality *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_getpersonality;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_getpersonality(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_getpersonality(struct __actvret_hmcall_thread_getpersonality *__ret)
{
	return actvxactcall_hmcall_thread_getpersonality(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_getpersonality(rref_t __rref, struct __actvret_hmcall_thread_getpersonality *__ret)
{
	return actvxactcapcall_hmcall_thread_getpersonality(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_thread_bind_info(unsigned long long __rpc_info, void *__buf, struct path_name name);


extern int __actvcapcall_hmcall_thread_bind_info(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct path_name name);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_bind_info(bool is_xact_fwd, bool is_xact_allow_refwd, struct path_name name, struct __actvret_hmcall_thread_bind_info *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_bind_info;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct path_name), __arch_actv_rpc_stksz_alignment(struct path_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_bind_info(rpc_info, __ret, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_bind_info(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct path_name name, struct __actvret_hmcall_thread_bind_info *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_bind_info;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct path_name), __arch_actv_rpc_stksz_alignment(struct path_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_bind_info(__rref, rpc_info, __ret, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_bind_info(struct path_name name, struct __actvret_hmcall_thread_bind_info *__ret)
{
	return actvxactcall_hmcall_thread_bind_info(false, false, name, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_bind_info(rref_t __rref, struct path_name name, struct __actvret_hmcall_thread_bind_info *__ret)
{
	return actvxactcapcall_hmcall_thread_bind_info(false, false, __rref, name, __ret);
}

extern int __actvcall_hmcall_thread_set_tickless(unsigned long long __rpc_info, void *__buf, int tid, bool tickless);


extern int __actvcapcall_hmcall_thread_set_tickless(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, bool tickless);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_set_tickless(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, bool tickless)
{
	const unsigned long __callno = __sysmgr_method_thread_set_tickless;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_set_tickless(rpc_info, NULL, tid, tickless);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_set_tickless(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, bool tickless)
{
	const unsigned long __callno = __sysmgr_method_thread_set_tickless;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_set_tickless(__rref, rpc_info, NULL, tid, tickless);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_set_tickless(int tid, bool tickless)
{
	return actvxactcall_hmcall_thread_set_tickless(false, false, tid, tickless);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_set_tickless(rref_t __rref, int tid, bool tickless)
{
	return actvxactcapcall_hmcall_thread_set_tickless(false, false, __rref, tid, tickless);
}

extern int __actvcall_hmcall_thread_set_runqueue(unsigned long long __rpc_info, void *__buf, int tid, unsigned int newrq);


extern int __actvcapcall_hmcall_thread_set_runqueue(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, unsigned int newrq);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_set_runqueue(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, unsigned int newrq)
{
	const unsigned long __callno = __sysmgr_method_thread_set_runqueue;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_set_runqueue(rpc_info, NULL, tid, newrq);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_set_runqueue(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, unsigned int newrq)
{
	const unsigned long __callno = __sysmgr_method_thread_set_runqueue;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_set_runqueue(__rref, rpc_info, NULL, tid, newrq);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_set_runqueue(int tid, unsigned int newrq)
{
	return actvxactcall_hmcall_thread_set_runqueue(false, false, tid, newrq);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_set_runqueue(rref_t __rref, int tid, unsigned int newrq)
{
	return actvxactcapcall_hmcall_thread_set_runqueue(false, false, __rref, tid, newrq);
}

extern int __actvcall_hmcall_thread_sched_setparam(unsigned long long __rpc_info, void *__buf, int tid, int prio);


extern int __actvcapcall_hmcall_thread_sched_setparam(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, int prio);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_sched_setparam(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, int prio)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_setparam;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_sched_setparam(rpc_info, NULL, tid, prio);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_sched_setparam(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, int prio)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_setparam;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_sched_setparam(__rref, rpc_info, NULL, tid, prio);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_sched_setparam(int tid, int prio)
{
	return actvxactcall_hmcall_thread_sched_setparam(false, false, tid, prio);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_sched_setparam(rref_t __rref, int tid, int prio)
{
	return actvxactcapcall_hmcall_thread_sched_setparam(false, false, __rref, tid, prio);
}

extern int __actvcall_hmcall_thread_sched_getparam(unsigned long long __rpc_info, void *__buf, int tid);


extern int __actvcapcall_hmcall_thread_sched_getparam(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_sched_getparam(bool is_xact_fwd, bool is_xact_allow_refwd, int tid)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_getparam;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_sched_getparam(rpc_info, NULL, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_sched_getparam(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_getparam;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_sched_getparam(__rref, rpc_info, NULL, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_sched_getparam(int tid)
{
	return actvxactcall_hmcall_thread_sched_getparam(false, false, tid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_sched_getparam(rref_t __rref, int tid)
{
	return actvxactcapcall_hmcall_thread_sched_getparam(false, false, __rref, tid);
}

extern int __actvcall_hmcall_thread_sched_setscheduler(unsigned long long __rpc_info, void *__buf, int tid, int prio, int policy);


extern int __actvcapcall_hmcall_thread_sched_setscheduler(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, int prio, int policy);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_sched_setscheduler(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, int prio, int policy)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_setscheduler;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_sched_setscheduler(rpc_info, NULL, tid, prio, policy);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_sched_setscheduler(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, int prio, int policy)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_setscheduler;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_sched_setscheduler(__rref, rpc_info, NULL, tid, prio, policy);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_sched_setscheduler(int tid, int prio, int policy)
{
	return actvxactcall_hmcall_thread_sched_setscheduler(false, false, tid, prio, policy);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_sched_setscheduler(rref_t __rref, int tid, int prio, int policy)
{
	return actvxactcapcall_hmcall_thread_sched_setscheduler(false, false, __rref, tid, prio, policy);
}

extern int __actvcall_hmcall_thread_sched_getscheduler(unsigned long long __rpc_info, void *__buf, int tid);


extern int __actvcapcall_hmcall_thread_sched_getscheduler(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_sched_getscheduler(bool is_xact_fwd, bool is_xact_allow_refwd, int tid)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_getscheduler;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_sched_getscheduler(rpc_info, NULL, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_sched_getscheduler(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_getscheduler;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_sched_getscheduler(__rref, rpc_info, NULL, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_sched_getscheduler(int tid)
{
	return actvxactcall_hmcall_thread_sched_getscheduler(false, false, tid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_sched_getscheduler(rref_t __rref, int tid)
{
	return actvxactcapcall_hmcall_thread_sched_getscheduler(false, false, __rref, tid);
}

extern int __actvcall_hmcall_thread_getseq(unsigned long long __rpc_info, void *__buf, int tid);


extern int __actvcapcall_hmcall_thread_getseq(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_getseq(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, struct __actvret_hmcall_thread_getseq *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_getseq;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_getseq(rpc_info, __ret, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_getseq(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, struct __actvret_hmcall_thread_getseq *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_getseq;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_getseq(__rref, rpc_info, __ret, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_getseq(int tid, struct __actvret_hmcall_thread_getseq *__ret)
{
	return actvxactcall_hmcall_thread_getseq(false, false, tid, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_getseq(rref_t __rref, int tid, struct __actvret_hmcall_thread_getseq *__ret)
{
	return actvxactcapcall_hmcall_thread_getseq(false, false, __rref, tid, __ret);
}

extern int __actvcall_hmcall_thread_setpriority(unsigned long long __rpc_info, void *__buf, int tid, int nice);


extern int __actvcapcall_hmcall_thread_setpriority(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, int nice);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_setpriority(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, int nice)
{
	const unsigned long __callno = __sysmgr_method_thread_setpriority;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_setpriority(rpc_info, NULL, tid, nice);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_setpriority(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, int nice)
{
	const unsigned long __callno = __sysmgr_method_thread_setpriority;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_setpriority(__rref, rpc_info, NULL, tid, nice);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_setpriority(int tid, int nice)
{
	return actvxactcall_hmcall_thread_setpriority(false, false, tid, nice);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_setpriority(rref_t __rref, int tid, int nice)
{
	return actvxactcapcall_hmcall_thread_setpriority(false, false, __rref, tid, nice);
}

extern int __actvcall_hmcall_thread_getpriority(unsigned long long __rpc_info, void *__buf, int tid);


extern int __actvcapcall_hmcall_thread_getpriority(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_getpriority(bool is_xact_fwd, bool is_xact_allow_refwd, int tid)
{
	const unsigned long __callno = __sysmgr_method_thread_getpriority;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_getpriority(rpc_info, NULL, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_getpriority(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid)
{
	const unsigned long __callno = __sysmgr_method_thread_getpriority;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_getpriority(__rref, rpc_info, NULL, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_getpriority(int tid)
{
	return actvxactcall_hmcall_thread_getpriority(false, false, tid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_getpriority(rref_t __rref, int tid)
{
	return actvxactcapcall_hmcall_thread_getpriority(false, false, __rref, tid);
}

extern int __actvcall_hmcall_thread_sched_getattr(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_thread_sched_getattr(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_sched_getattr(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_getattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_sched_getattr(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_sched_getattr(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_getattr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_sched_getattr(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_sched_getattr(void)
{
	return actvxactcall_hmcall_thread_sched_getattr(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_sched_getattr(rref_t __rref)
{
	return actvxactcapcall_hmcall_thread_sched_getattr(false, false, __rref);
}

extern int __actvcall_hmcall_thread_sched_get_interval_rr(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_thread_sched_get_interval_rr(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_sched_get_interval_rr(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_get_interval_rr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_sched_get_interval_rr(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_sched_get_interval_rr(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_get_interval_rr;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_sched_get_interval_rr(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_sched_get_interval_rr(void)
{
	return actvxactcall_hmcall_thread_sched_get_interval_rr(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_sched_get_interval_rr(rref_t __rref)
{
	return actvxactcapcall_hmcall_thread_sched_get_interval_rr(false, false, __rref);
}

extern int __actvcall_hmcall_thread_sched_setaffinity(unsigned long long __rpc_info, void *__buf, int tid, __cpuset_t cpuset);


extern int __actvcapcall_hmcall_thread_sched_setaffinity(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, __cpuset_t cpuset);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_sched_setaffinity(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, __cpuset_t cpuset)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_setaffinity;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(__cpuset_t), __arch_actv_rpc_stksz_alignment(__cpuset_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_sched_setaffinity(rpc_info, NULL, tid, cpuset);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_sched_setaffinity(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, __cpuset_t cpuset)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_setaffinity;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(__cpuset_t), __arch_actv_rpc_stksz_alignment(__cpuset_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_sched_setaffinity(__rref, rpc_info, NULL, tid, cpuset);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_sched_setaffinity(int tid, __cpuset_t cpuset)
{
	return actvxactcall_hmcall_thread_sched_setaffinity(false, false, tid, cpuset);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_sched_setaffinity(rref_t __rref, int tid, __cpuset_t cpuset)
{
	return actvxactcapcall_hmcall_thread_sched_setaffinity(false, false, __rref, tid, cpuset);
}

extern int __actvcall_hmcall_thread_sched_getaffinity(unsigned long long __rpc_info, void *__buf, int tid);


extern int __actvcapcall_hmcall_thread_sched_getaffinity(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_sched_getaffinity(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, struct __actvret_hmcall_thread_sched_getaffinity *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_getaffinity;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_sched_getaffinity(rpc_info, __ret, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_sched_getaffinity(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, struct __actvret_hmcall_thread_sched_getaffinity *__ret)
{
	const unsigned long __callno = __sysmgr_method_thread_sched_getaffinity;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_sched_getaffinity(__rref, rpc_info, __ret, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_sched_getaffinity(int tid, struct __actvret_hmcall_thread_sched_getaffinity *__ret)
{
	return actvxactcall_hmcall_thread_sched_getaffinity(false, false, tid, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_sched_getaffinity(rref_t __rref, int tid, struct __actvret_hmcall_thread_sched_getaffinity *__ret)
{
	return actvxactcapcall_hmcall_thread_sched_getaffinity(false, false, __rref, tid, __ret);
}

extern int __actvcall_hmcall_thread_update_vnotify_futex(unsigned long long __rpc_info, void *__buf, unsigned int chn, const int *futex);


extern int __actvcapcall_hmcall_thread_update_vnotify_futex(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int chn, const int *futex);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_update_vnotify_futex(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int chn, const int *futex)
{
	const unsigned long __callno = __sysmgr_method_thread_update_vnotify_futex;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const int*), __arch_actv_rpc_stksz_alignment(const int*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_update_vnotify_futex(rpc_info, NULL, chn, futex);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_update_vnotify_futex(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int chn, const int *futex)
{
	const unsigned long __callno = __sysmgr_method_thread_update_vnotify_futex;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const int*), __arch_actv_rpc_stksz_alignment(const int*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_update_vnotify_futex(__rref, rpc_info, NULL, chn, futex);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_update_vnotify_futex(unsigned int chn, const int *futex)
{
	return actvxactcall_hmcall_thread_update_vnotify_futex(false, false, chn, futex);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_update_vnotify_futex(rref_t __rref, unsigned int chn, const int *futex)
{
	return actvxactcapcall_hmcall_thread_update_vnotify_futex(false, false, __rref, chn, futex);
}

extern int __actvcall_hmcall_thread_futex_wait(unsigned long long __rpc_info, void *__buf, struct thread_futex_wait_args args);


extern int __actvcapcall_hmcall_thread_futex_wait(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct thread_futex_wait_args args);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_futex_wait(bool is_xact_fwd, bool is_xact_allow_refwd, struct thread_futex_wait_args args)
{
	const unsigned long __callno = __sysmgr_method_thread_futex_wait;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct thread_futex_wait_args), __arch_actv_rpc_stksz_alignment(struct thread_futex_wait_args));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_futex_wait(rpc_info, NULL, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_futex_wait(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct thread_futex_wait_args args)
{
	const unsigned long __callno = __sysmgr_method_thread_futex_wait;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct thread_futex_wait_args), __arch_actv_rpc_stksz_alignment(struct thread_futex_wait_args));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_futex_wait(__rref, rpc_info, NULL, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_futex_wait(struct thread_futex_wait_args args)
{
	return actvxactcall_hmcall_thread_futex_wait(false, false, args);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_futex_wait(rref_t __rref, struct thread_futex_wait_args args)
{
	return actvxactcapcall_hmcall_thread_futex_wait(false, false, __rref, args);
}

extern int __actvcall_hmcall_thread_futex_wake(unsigned long long __rpc_info, void *__buf, struct thread_futex_wake_args args);


extern int __actvcapcall_hmcall_thread_futex_wake(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct thread_futex_wake_args args);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_futex_wake(bool is_xact_fwd, bool is_xact_allow_refwd, struct thread_futex_wake_args args)
{
	const unsigned long __callno = __sysmgr_method_thread_futex_wake;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct thread_futex_wake_args), __arch_actv_rpc_stksz_alignment(struct thread_futex_wake_args));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_futex_wake(rpc_info, NULL, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_futex_wake(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct thread_futex_wake_args args)
{
	const unsigned long __callno = __sysmgr_method_thread_futex_wake;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct thread_futex_wake_args), __arch_actv_rpc_stksz_alignment(struct thread_futex_wake_args));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_futex_wake(__rref, rpc_info, NULL, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_futex_wake(struct thread_futex_wake_args args)
{
	return actvxactcall_hmcall_thread_futex_wake(false, false, args);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_futex_wake(rref_t __rref, struct thread_futex_wake_args args)
{
	return actvxactcapcall_hmcall_thread_futex_wake(false, false, __rref, args);
}

extern int __actvcall_hmcall_thread_futex_requeue(unsigned long long __rpc_info, void *__buf, struct thread_futex_requeue_args args);


extern int __actvcapcall_hmcall_thread_futex_requeue(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct thread_futex_requeue_args args);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_thread_futex_requeue(bool is_xact_fwd, bool is_xact_allow_refwd, struct thread_futex_requeue_args args)
{
	const unsigned long __callno = __sysmgr_method_thread_futex_requeue;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct thread_futex_requeue_args), __arch_actv_rpc_stksz_alignment(struct thread_futex_requeue_args));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_thread_futex_requeue(rpc_info, NULL, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_thread_futex_requeue(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct thread_futex_requeue_args args)
{
	const unsigned long __callno = __sysmgr_method_thread_futex_requeue;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct thread_futex_requeue_args), __arch_actv_rpc_stksz_alignment(struct thread_futex_requeue_args));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_thread_futex_requeue(__rref, rpc_info, NULL, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_thread_futex_requeue(struct thread_futex_requeue_args args)
{
	return actvxactcall_hmcall_thread_futex_requeue(false, false, args);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_thread_futex_requeue(rref_t __rref, struct thread_futex_requeue_args args)
{
	return actvxactcapcall_hmcall_thread_futex_requeue(false, false, __rref, args);
}

extern int __actvcall_hmcall_time_set_clock(unsigned long long __rpc_info, void *__buf, unsigned long long value);


extern int __actvcapcall_hmcall_time_set_clock(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long value);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_time_set_clock(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long value)
{
	const unsigned long __callno = __sysmgr_method_time_set_clock;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_time_set_clock(rpc_info, NULL, value);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_time_set_clock(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long value)
{
	const unsigned long __callno = __sysmgr_method_time_set_clock;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_time_set_clock(__rref, rpc_info, NULL, value);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_time_set_clock(unsigned long long value)
{
	return actvxactcall_hmcall_time_set_clock(false, false, value);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_time_set_clock(rref_t __rref, unsigned long long value)
{
	return actvxactcapcall_hmcall_time_set_clock(false, false, __rref, value);
}

extern int __actvcall_hmcall_time_set_tock_policy(unsigned long long __rpc_info, void *__buf, struct vtimekeep_tock_policy policy);


extern int __actvcapcall_hmcall_time_set_tock_policy(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct vtimekeep_tock_policy policy);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_time_set_tock_policy(bool is_xact_fwd, bool is_xact_allow_refwd, struct vtimekeep_tock_policy policy)
{
	const unsigned long __callno = __sysmgr_method_time_set_tock_policy;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct vtimekeep_tock_policy), __arch_actv_rpc_stksz_alignment(struct vtimekeep_tock_policy));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_time_set_tock_policy(rpc_info, NULL, policy);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_time_set_tock_policy(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct vtimekeep_tock_policy policy)
{
	const unsigned long __callno = __sysmgr_method_time_set_tock_policy;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct vtimekeep_tock_policy), __arch_actv_rpc_stksz_alignment(struct vtimekeep_tock_policy));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_time_set_tock_policy(__rref, rpc_info, NULL, policy);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_time_set_tock_policy(struct vtimekeep_tock_policy policy)
{
	return actvxactcall_hmcall_time_set_tock_policy(false, false, policy);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_time_set_tock_policy(rref_t __rref, struct vtimekeep_tock_policy policy)
{
	return actvxactcapcall_hmcall_time_set_tock_policy(false, false, __rref, policy);
}

extern int __actvcall_hmcall_signal_kill(unsigned long long __rpc_info, void *__buf, int pid, int signum, struct siginfo_set sig_set);


extern int __actvcapcall_hmcall_signal_kill(rref_t __rref, unsigned long long __rpc_info, void *__buf, int pid, int signum, struct siginfo_set sig_set);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_kill(bool is_xact_fwd, bool is_xact_allow_refwd, int pid, int signum, struct siginfo_set sig_set)
{
	const unsigned long __callno = __sysmgr_method_signal_kill;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct siginfo_set), __arch_actv_rpc_stksz_alignment(struct siginfo_set));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_kill(rpc_info, NULL, pid, signum, sig_set);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_kill(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int pid, int signum, struct siginfo_set sig_set)
{
	const unsigned long __callno = __sysmgr_method_signal_kill;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct siginfo_set), __arch_actv_rpc_stksz_alignment(struct siginfo_set));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_kill(__rref, rpc_info, NULL, pid, signum, sig_set);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_kill(int pid, int signum, struct siginfo_set sig_set)
{
	return actvxactcall_hmcall_signal_kill(false, false, pid, signum, sig_set);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_kill(rref_t __rref, int pid, int signum, struct siginfo_set sig_set)
{
	return actvxactcapcall_hmcall_signal_kill(false, false, __rref, pid, signum, sig_set);
}

extern int __actvcall_hmcall_signal_tkill(unsigned long long __rpc_info, void *__buf, int tid, int signum, struct siginfo_set sig_set);


extern int __actvcapcall_hmcall_signal_tkill(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, int signum, struct siginfo_set sig_set);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_tkill(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, int signum, struct siginfo_set sig_set)
{
	const unsigned long __callno = __sysmgr_method_signal_tkill;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct siginfo_set), __arch_actv_rpc_stksz_alignment(struct siginfo_set));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_tkill(rpc_info, NULL, tid, signum, sig_set);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_tkill(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, int signum, struct siginfo_set sig_set)
{
	const unsigned long __callno = __sysmgr_method_signal_tkill;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct siginfo_set), __arch_actv_rpc_stksz_alignment(struct siginfo_set));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_tkill(__rref, rpc_info, NULL, tid, signum, sig_set);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_tkill(int tid, int signum, struct siginfo_set sig_set)
{
	return actvxactcall_hmcall_signal_tkill(false, false, tid, signum, sig_set);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_tkill(rref_t __rref, int tid, int signum, struct siginfo_set sig_set)
{
	return actvxactcapcall_hmcall_signal_tkill(false, false, __rref, tid, signum, sig_set);
}

extern int __actvcall_hmcall_signal_tgkill(unsigned long long __rpc_info, void *__buf, int tgid, int tid, int signum);


extern int __actvcapcall_hmcall_signal_tgkill(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tgid, int tid, int signum);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_tgkill(bool is_xact_fwd, bool is_xact_allow_refwd, int tgid, int tid, int signum)
{
	const unsigned long __callno = __sysmgr_method_signal_tgkill;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_tgkill(rpc_info, NULL, tgid, tid, signum);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_tgkill(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tgid, int tid, int signum)
{
	const unsigned long __callno = __sysmgr_method_signal_tgkill;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_tgkill(__rref, rpc_info, NULL, tgid, tid, signum);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_tgkill(int tgid, int tid, int signum)
{
	return actvxactcall_hmcall_signal_tgkill(false, false, tgid, tid, signum);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_tgkill(rref_t __rref, int tgid, int tid, int signum)
{
	return actvxactcapcall_hmcall_signal_tgkill(false, false, __rref, tgid, tid, signum);
}

extern int __actvcall_hmcall_signal_sigqueue(unsigned long long __rpc_info, void *__buf, int tgid, struct __siginfo siginfo, int signum);


extern int __actvcapcall_hmcall_signal_sigqueue(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tgid, struct __siginfo siginfo, int signum);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_sigqueue(bool is_xact_fwd, bool is_xact_allow_refwd, int tgid, struct __siginfo siginfo, int signum)
{
	const unsigned long __callno = __sysmgr_method_signal_sigqueue;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct __siginfo), __arch_actv_rpc_stksz_alignment(struct __siginfo));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_sigqueue(rpc_info, NULL, tgid, siginfo, signum);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_sigqueue(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tgid, struct __siginfo siginfo, int signum)
{
	const unsigned long __callno = __sysmgr_method_signal_sigqueue;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct __siginfo), __arch_actv_rpc_stksz_alignment(struct __siginfo));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_sigqueue(__rref, rpc_info, NULL, tgid, siginfo, signum);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_sigqueue(int tgid, struct __siginfo siginfo, int signum)
{
	return actvxactcall_hmcall_signal_sigqueue(false, false, tgid, siginfo, signum);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_sigqueue(rref_t __rref, int tgid, struct __siginfo siginfo, int signum)
{
	return actvxactcapcall_hmcall_signal_sigqueue(false, false, __rref, tgid, siginfo, signum);
}

extern int __actvcall_hmcall_signal_pthread_sigqueue(unsigned long long __rpc_info, void *__buf, int tgid, int tid, int signum, struct __siginfo siginfo);


extern int __actvcapcall_hmcall_signal_pthread_sigqueue(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tgid, int tid, int signum, struct __siginfo siginfo);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_pthread_sigqueue(bool is_xact_fwd, bool is_xact_allow_refwd, int tgid, int tid, int signum, struct __siginfo siginfo)
{
	const unsigned long __callno = __sysmgr_method_signal_pthread_sigqueue;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct __siginfo), __arch_actv_rpc_stksz_alignment(struct __siginfo));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_pthread_sigqueue(rpc_info, NULL, tgid, tid, signum, siginfo);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_pthread_sigqueue(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tgid, int tid, int signum, struct __siginfo siginfo)
{
	const unsigned long __callno = __sysmgr_method_signal_pthread_sigqueue;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct __siginfo), __arch_actv_rpc_stksz_alignment(struct __siginfo));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_pthread_sigqueue(__rref, rpc_info, NULL, tgid, tid, signum, siginfo);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_pthread_sigqueue(int tgid, int tid, int signum, struct __siginfo siginfo)
{
	return actvxactcall_hmcall_signal_pthread_sigqueue(false, false, tgid, tid, signum, siginfo);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_pthread_sigqueue(rref_t __rref, int tgid, int tid, int signum, struct __siginfo siginfo)
{
	return actvxactcapcall_hmcall_signal_pthread_sigqueue(false, false, __rref, tgid, tid, signum, siginfo);
}

extern int __actvcall_hmcall_signal_set_signal_handler(unsigned long long __rpc_info, void *__buf, enum hm_sigaction_flag flag, int signum);


extern int __actvcapcall_hmcall_signal_set_signal_handler(rref_t __rref, unsigned long long __rpc_info, void *__buf, enum hm_sigaction_flag flag, int signum);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_set_signal_handler(bool is_xact_fwd, bool is_xact_allow_refwd, enum hm_sigaction_flag flag, int signum)
{
	const unsigned long __callno = __sysmgr_method_signal_set_signal_handler;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum hm_sigaction_flag), __arch_actv_rpc_stksz_alignment(enum hm_sigaction_flag));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_set_signal_handler(rpc_info, NULL, flag, signum);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_set_signal_handler(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, enum hm_sigaction_flag flag, int signum)
{
	const unsigned long __callno = __sysmgr_method_signal_set_signal_handler;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum hm_sigaction_flag), __arch_actv_rpc_stksz_alignment(enum hm_sigaction_flag));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_set_signal_handler(__rref, rpc_info, NULL, flag, signum);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_set_signal_handler(enum hm_sigaction_flag flag, int signum)
{
	return actvxactcall_hmcall_signal_set_signal_handler(false, false, flag, signum);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_set_signal_handler(rref_t __rref, enum hm_sigaction_flag flag, int signum)
{
	return actvxactcapcall_hmcall_signal_set_signal_handler(false, false, __rref, flag, signum);
}

extern int __actvcall_hmcall_signal_read_signalfd(unsigned long long __rpc_info, void *__buf, unsigned long long sigmask, unsigned int flags, void *buf, size_t buf_size);


extern int __actvcapcall_hmcall_signal_read_signalfd(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long sigmask, unsigned int flags, void *buf, size_t buf_size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_read_signalfd(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long sigmask, unsigned int flags, void *buf, size_t buf_size, struct __actvret_hmcall_signal_read_signalfd *__ret)
{
	const unsigned long __callno = __sysmgr_method_signal_read_signalfd;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_read_signalfd(rpc_info, __ret, sigmask, flags, buf, buf_size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_read_signalfd(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long sigmask, unsigned int flags, void *buf, size_t buf_size, struct __actvret_hmcall_signal_read_signalfd *__ret)
{
	const unsigned long __callno = __sysmgr_method_signal_read_signalfd;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_read_signalfd(__rref, rpc_info, __ret, sigmask, flags, buf, buf_size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_read_signalfd(unsigned long long sigmask, unsigned int flags, void *buf, size_t buf_size, struct __actvret_hmcall_signal_read_signalfd *__ret)
{
	return actvxactcall_hmcall_signal_read_signalfd(false, false, sigmask, flags, buf, buf_size, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_read_signalfd(rref_t __rref, unsigned long long sigmask, unsigned int flags, void *buf, size_t buf_size, struct __actvret_hmcall_signal_read_signalfd *__ret)
{
	return actvxactcapcall_hmcall_signal_read_signalfd(false, false, __rref, sigmask, flags, buf, buf_size, __ret);
}

extern int __actvcall_hmcall_signal_read_signalevents(unsigned long long __rpc_info, void *__buf, unsigned long long sigmask);


extern int __actvcapcall_hmcall_signal_read_signalevents(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long sigmask);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_read_signalevents(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long sigmask, struct __actvret_hmcall_signal_read_signalevents *__ret)
{
	const unsigned long __callno = __sysmgr_method_signal_read_signalevents;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_read_signalevents(rpc_info, __ret, sigmask);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_read_signalevents(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long sigmask, struct __actvret_hmcall_signal_read_signalevents *__ret)
{
	const unsigned long __callno = __sysmgr_method_signal_read_signalevents;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_read_signalevents(__rref, rpc_info, __ret, sigmask);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_read_signalevents(unsigned long long sigmask, struct __actvret_hmcall_signal_read_signalevents *__ret)
{
	return actvxactcall_hmcall_signal_read_signalevents(false, false, sigmask, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_read_signalevents(rref_t __rref, unsigned long long sigmask, struct __actvret_hmcall_signal_read_signalevents *__ret)
{
	return actvxactcapcall_hmcall_signal_read_signalevents(false, false, __rref, sigmask, __ret);
}

extern int __actvcall_hmcall_signal_epoll_ctrl(unsigned long long __rpc_info, void *__buf, int sigfd, unsigned long long sigmask, int op);


extern int __actvcapcall_hmcall_signal_epoll_ctrl(rref_t __rref, unsigned long long __rpc_info, void *__buf, int sigfd, unsigned long long sigmask, int op);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_epoll_ctrl(bool is_xact_fwd, bool is_xact_allow_refwd, int sigfd, unsigned long long sigmask, int op)
{
	const unsigned long __callno = __sysmgr_method_signal_epoll_ctrl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_epoll_ctrl(rpc_info, NULL, sigfd, sigmask, op);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_epoll_ctrl(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int sigfd, unsigned long long sigmask, int op)
{
	const unsigned long __callno = __sysmgr_method_signal_epoll_ctrl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_epoll_ctrl(__rref, rpc_info, NULL, sigfd, sigmask, op);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_epoll_ctrl(int sigfd, unsigned long long sigmask, int op)
{
	return actvxactcall_hmcall_signal_epoll_ctrl(false, false, sigfd, sigmask, op);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_epoll_ctrl(rref_t __rref, int sigfd, unsigned long long sigmask, int op)
{
	return actvxactcapcall_hmcall_signal_epoll_ctrl(false, false, __rref, sigfd, sigmask, op);
}

extern int __actvcall_hmcall_signal_init(unsigned long long __rpc_info, void *__buf, unsigned long sigentry);


extern int __actvcapcall_hmcall_signal_init(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long sigentry);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_init(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long sigentry)
{
	const unsigned long __callno = __sysmgr_method_signal_init;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_init(rpc_info, NULL, sigentry);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_init(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long sigentry)
{
	const unsigned long __callno = __sysmgr_method_signal_init;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_init(__rref, rpc_info, NULL, sigentry);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_init(unsigned long sigentry)
{
	return actvxactcall_hmcall_signal_init(false, false, sigentry);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_init(rref_t __rref, unsigned long sigentry)
{
	return actvxactcapcall_hmcall_signal_init(false, false, __rref, sigentry);
}

extern int __actvcall_hmcall_signal_set_sigmask(unsigned long long __rpc_info, void *__buf, unsigned long ops, unsigned long long new_mask);


extern int __actvcapcall_hmcall_signal_set_sigmask(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long ops, unsigned long long new_mask);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_set_sigmask(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long ops, unsigned long long new_mask, struct __actvret_hmcall_signal_set_sigmask *__ret)
{
	const unsigned long __callno = __sysmgr_method_signal_set_sigmask;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_set_sigmask(rpc_info, __ret, ops, new_mask);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_set_sigmask(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long ops, unsigned long long new_mask, struct __actvret_hmcall_signal_set_sigmask *__ret)
{
	const unsigned long __callno = __sysmgr_method_signal_set_sigmask;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_set_sigmask(__rref, rpc_info, __ret, ops, new_mask);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_set_sigmask(unsigned long ops, unsigned long long new_mask, struct __actvret_hmcall_signal_set_sigmask *__ret)
{
	return actvxactcall_hmcall_signal_set_sigmask(false, false, ops, new_mask, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_set_sigmask(rref_t __rref, unsigned long ops, unsigned long long new_mask, struct __actvret_hmcall_signal_set_sigmask *__ret)
{
	return actvxactcapcall_hmcall_signal_set_sigmask(false, false, __rref, ops, new_mask, __ret);
}

extern int __actvcall_hmcall_signal_get_pending_signal(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_signal_get_pending_signal(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_get_pending_signal(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_signal_get_pending_signal *__ret)
{
	const unsigned long __callno = __sysmgr_method_signal_get_pending_signal;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_get_pending_signal(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_get_pending_signal(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_signal_get_pending_signal *__ret)
{
	const unsigned long __callno = __sysmgr_method_signal_get_pending_signal;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_get_pending_signal(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_get_pending_signal(struct __actvret_hmcall_signal_get_pending_signal *__ret)
{
	return actvxactcall_hmcall_signal_get_pending_signal(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_get_pending_signal(rref_t __rref, struct __actvret_hmcall_signal_get_pending_signal *__ret)
{
	return actvxactcapcall_hmcall_signal_get_pending_signal(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_signal_drop_pending_signal(unsigned long long __rpc_info, void *__buf, unsigned long long sigmask);


extern int __actvcapcall_hmcall_signal_drop_pending_signal(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long sigmask);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_drop_pending_signal(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long sigmask, struct __actvret_hmcall_signal_drop_pending_signal *__ret)
{
	const unsigned long __callno = __sysmgr_method_signal_drop_pending_signal;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_drop_pending_signal(rpc_info, __ret, sigmask);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_drop_pending_signal(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long sigmask, struct __actvret_hmcall_signal_drop_pending_signal *__ret)
{
	const unsigned long __callno = __sysmgr_method_signal_drop_pending_signal;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_drop_pending_signal(__rref, rpc_info, __ret, sigmask);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_drop_pending_signal(unsigned long long sigmask, struct __actvret_hmcall_signal_drop_pending_signal *__ret)
{
	return actvxactcall_hmcall_signal_drop_pending_signal(false, false, sigmask, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_drop_pending_signal(rref_t __rref, unsigned long long sigmask, struct __actvret_hmcall_signal_drop_pending_signal *__ret)
{
	return actvxactcapcall_hmcall_signal_drop_pending_signal(false, false, __rref, sigmask, __ret);
}

extern int __actvcall_hmcall_signal_set_sigstack(unsigned long long __rpc_info, void *__buf, struct sigstack new_stack);


extern int __actvcapcall_hmcall_signal_set_sigstack(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct sigstack new_stack);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_set_sigstack(bool is_xact_fwd, bool is_xact_allow_refwd, struct sigstack new_stack)
{
	const unsigned long __callno = __sysmgr_method_signal_set_sigstack;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sigstack), __arch_actv_rpc_stksz_alignment(struct sigstack));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_set_sigstack(rpc_info, NULL, new_stack);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_set_sigstack(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct sigstack new_stack)
{
	const unsigned long __callno = __sysmgr_method_signal_set_sigstack;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct sigstack), __arch_actv_rpc_stksz_alignment(struct sigstack));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_set_sigstack(__rref, rpc_info, NULL, new_stack);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_set_sigstack(struct sigstack new_stack)
{
	return actvxactcall_hmcall_signal_set_sigstack(false, false, new_stack);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_set_sigstack(rref_t __rref, struct sigstack new_stack)
{
	return actvxactcapcall_hmcall_signal_set_sigstack(false, false, __rref, new_stack);
}

extern int __actvcall_hmcall_signal_set_sigaction_mask(unsigned long long __rpc_info, void *__buf, unsigned int signum, unsigned long long sigactionmask, int altstack_flag);


extern int __actvcapcall_hmcall_signal_set_sigaction_mask(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int signum, unsigned long long sigactionmask, int altstack_flag);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_set_sigaction_mask(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int signum, unsigned long long sigactionmask, int altstack_flag)
{
	const unsigned long __callno = __sysmgr_method_signal_set_sigaction_mask;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_set_sigaction_mask(rpc_info, NULL, signum, sigactionmask, altstack_flag);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_set_sigaction_mask(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int signum, unsigned long long sigactionmask, int altstack_flag)
{
	const unsigned long __callno = __sysmgr_method_signal_set_sigaction_mask;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_set_sigaction_mask(__rref, rpc_info, NULL, signum, sigactionmask, altstack_flag);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_set_sigaction_mask(unsigned int signum, unsigned long long sigactionmask, int altstack_flag)
{
	return actvxactcall_hmcall_signal_set_sigaction_mask(false, false, signum, sigactionmask, altstack_flag);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_set_sigaction_mask(rref_t __rref, unsigned int signum, unsigned long long sigactionmask, int altstack_flag)
{
	return actvxactcapcall_hmcall_signal_set_sigaction_mask(false, false, __rref, signum, sigactionmask, altstack_flag);
}

extern int __actvcall_hmcall_signal_timedwait(unsigned long long __rpc_info, void *__buf, unsigned long long sigset, bool set_timeout, time_t tv_sec, long tv_nsec);


extern int __actvcapcall_hmcall_signal_timedwait(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long sigset, bool set_timeout, time_t tv_sec, long tv_nsec);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_signal_timedwait(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long sigset, bool set_timeout, time_t tv_sec, long tv_nsec, struct __actvret_hmcall_signal_timedwait *__ret)
{
	const unsigned long __callno = __sysmgr_method_signal_timedwait;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(time_t), __arch_actv_rpc_stksz_alignment(time_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_timedwait(rpc_info, __ret, sigset, set_timeout, tv_sec, tv_nsec);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_signal_timedwait(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long sigset, bool set_timeout, time_t tv_sec, long tv_nsec, struct __actvret_hmcall_signal_timedwait *__ret)
{
	const unsigned long __callno = __sysmgr_method_signal_timedwait;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(time_t), __arch_actv_rpc_stksz_alignment(time_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_timedwait(__rref, rpc_info, __ret, sigset, set_timeout, tv_sec, tv_nsec);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_signal_timedwait(unsigned long long sigset, bool set_timeout, time_t tv_sec, long tv_nsec, struct __actvret_hmcall_signal_timedwait *__ret)
{
	return actvxactcall_hmcall_signal_timedwait(false, false, sigset, set_timeout, tv_sec, tv_nsec, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_signal_timedwait(rref_t __rref, unsigned long long sigset, bool set_timeout, time_t tv_sec, long tv_nsec, struct __actvret_hmcall_signal_timedwait *__ret)
{
	return actvxactcapcall_hmcall_signal_timedwait(false, false, __rref, sigset, set_timeout, tv_sec, tv_nsec, __ret);
}

extern unsigned long __actvcall_hmcall_signal_restore(unsigned long long __rpc_info, void *__buf, unsigned long long sigmask, unsigned long uctx_addr, unsigned int uctx_size);


extern unsigned long __actvcapcall_hmcall_signal_restore(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long sigmask, unsigned long uctx_addr, unsigned int uctx_size);


static inline unsigned long __attribute__((always_inline)) actvxactcall_hmcall_signal_restore(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long sigmask, unsigned long uctx_addr, unsigned int uctx_size)
{
	const unsigned long __callno = __sysmgr_method_signal_restore;
	unsigned long __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_signal_restore(rpc_info, NULL, sigmask, uctx_addr, uctx_size);
	} while (__res == (unsigned long)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline unsigned long __attribute__((always_inline)) actvxactcapcall_hmcall_signal_restore(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long sigmask, unsigned long uctx_addr, unsigned int uctx_size)
{
	const unsigned long __callno = __sysmgr_method_signal_restore;
	unsigned long __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_signal_restore(__rref, rpc_info, NULL, sigmask, uctx_addr, uctx_size);
	} while (__res == (unsigned long)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline unsigned long __attribute__((always_inline)) actvcall_hmcall_signal_restore(unsigned long long sigmask, unsigned long uctx_addr, unsigned int uctx_size)
{
	return actvxactcall_hmcall_signal_restore(false, false, sigmask, uctx_addr, uctx_size);
}

static inline unsigned long __attribute__((always_inline)) actvcapcall_hmcall_signal_restore(rref_t __rref, unsigned long long sigmask, unsigned long uctx_addr, unsigned int uctx_size)
{
	return actvxactcapcall_hmcall_signal_restore(false, false, __rref, sigmask, uctx_addr, uctx_size);
}

extern int __actvcall_hmcall_irq_grant_ctrl(unsigned long long __rpc_info, void *__buf, struct irqmgr_grant_arg arg);


extern int __actvcapcall_hmcall_irq_grant_ctrl(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct irqmgr_grant_arg arg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_irq_grant_ctrl(bool is_xact_fwd, bool is_xact_allow_refwd, struct irqmgr_grant_arg arg)
{
	const unsigned long __callno = __sysmgr_method_irq_grant_ctrl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct irqmgr_grant_arg), __arch_actv_rpc_stksz_alignment(struct irqmgr_grant_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_irq_grant_ctrl(rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_irq_grant_ctrl(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct irqmgr_grant_arg arg)
{
	const unsigned long __callno = __sysmgr_method_irq_grant_ctrl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct irqmgr_grant_arg), __arch_actv_rpc_stksz_alignment(struct irqmgr_grant_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_irq_grant_ctrl(__rref, rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_irq_grant_ctrl(struct irqmgr_grant_arg arg)
{
	return actvxactcall_hmcall_irq_grant_ctrl(false, false, arg);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_irq_grant_ctrl(rref_t __rref, struct irqmgr_grant_arg arg)
{
	return actvxactcapcall_hmcall_irq_grant_ctrl(false, false, __rref, arg);
}

extern int __actvcall_hmcall_irq_default_phyctrl_id(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_irq_default_phyctrl_id(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_irq_default_phyctrl_id(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_irq_default_phyctrl_id;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_irq_default_phyctrl_id(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_irq_default_phyctrl_id(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_irq_default_phyctrl_id;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_irq_default_phyctrl_id(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_irq_default_phyctrl_id(void)
{
	return actvxactcall_hmcall_irq_default_phyctrl_id(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_irq_default_phyctrl_id(rref_t __rref)
{
	return actvxactcapcall_hmcall_irq_default_phyctrl_id(false, false, __rref);
}

extern int __actvcall_hmcall_irq_to_logic(unsigned long long __rpc_info, void *__buf, int irqctrl_id, struct irqmgr_to_logic_arg arg, unsigned int cpuid);


extern int __actvcapcall_hmcall_irq_to_logic(rref_t __rref, unsigned long long __rpc_info, void *__buf, int irqctrl_id, struct irqmgr_to_logic_arg arg, unsigned int cpuid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_irq_to_logic(bool is_xact_fwd, bool is_xact_allow_refwd, int irqctrl_id, struct irqmgr_to_logic_arg arg, unsigned int cpuid)
{
	const unsigned long __callno = __sysmgr_method_irq_to_logic;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct irqmgr_to_logic_arg), __arch_actv_rpc_stksz_alignment(struct irqmgr_to_logic_arg));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_irq_to_logic(rpc_info, NULL, irqctrl_id, arg, cpuid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_irq_to_logic(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int irqctrl_id, struct irqmgr_to_logic_arg arg, unsigned int cpuid)
{
	const unsigned long __callno = __sysmgr_method_irq_to_logic;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct irqmgr_to_logic_arg), __arch_actv_rpc_stksz_alignment(struct irqmgr_to_logic_arg));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_irq_to_logic(__rref, rpc_info, NULL, irqctrl_id, arg, cpuid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_irq_to_logic(int irqctrl_id, struct irqmgr_to_logic_arg arg, unsigned int cpuid)
{
	return actvxactcall_hmcall_irq_to_logic(false, false, irqctrl_id, arg, cpuid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_irq_to_logic(rref_t __rref, int irqctrl_id, struct irqmgr_to_logic_arg arg, unsigned int cpuid)
{
	return actvxactcapcall_hmcall_irq_to_logic(false, false, __rref, irqctrl_id, arg, cpuid);
}

extern int __actvcall_hmcall_irq_revoke_ctrl(unsigned long long __rpc_info, void *__buf, int irqctrl_id, unsigned int logic_irq);


extern int __actvcapcall_hmcall_irq_revoke_ctrl(rref_t __rref, unsigned long long __rpc_info, void *__buf, int irqctrl_id, unsigned int logic_irq);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_irq_revoke_ctrl(bool is_xact_fwd, bool is_xact_allow_refwd, int irqctrl_id, unsigned int logic_irq)
{
	const unsigned long __callno = __sysmgr_method_irq_revoke_ctrl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_irq_revoke_ctrl(rpc_info, NULL, irqctrl_id, logic_irq);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_irq_revoke_ctrl(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int irqctrl_id, unsigned int logic_irq)
{
	const unsigned long __callno = __sysmgr_method_irq_revoke_ctrl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_irq_revoke_ctrl(__rref, rpc_info, NULL, irqctrl_id, logic_irq);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_irq_revoke_ctrl(int irqctrl_id, unsigned int logic_irq)
{
	return actvxactcall_hmcall_irq_revoke_ctrl(false, false, irqctrl_id, logic_irq);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_irq_revoke_ctrl(rref_t __rref, int irqctrl_id, unsigned int logic_irq)
{
	return actvxactcapcall_hmcall_irq_revoke_ctrl(false, false, __rref, irqctrl_id, logic_irq);
}

extern int __actvcall_hmcall_irq_version_get(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_irq_version_get(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_irq_version_get(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_irq_version_get *__ret)
{
	const unsigned long __callno = __sysmgr_method_irq_version_get;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_irq_version_get(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_irq_version_get(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_irq_version_get *__ret)
{
	const unsigned long __callno = __sysmgr_method_irq_version_get;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_irq_version_get(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_irq_version_get(struct __actvret_hmcall_irq_version_get *__ret)
{
	return actvxactcall_hmcall_irq_version_get(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_irq_version_get(rref_t __rref, struct __actvret_hmcall_irq_version_get *__ret)
{
	return actvxactcapcall_hmcall_irq_version_get(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_irq_version_check(unsigned long long __rpc_info, void *__buf, struct irqmgr_version expected);


extern int __actvcapcall_hmcall_irq_version_check(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct irqmgr_version expected);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_irq_version_check(bool is_xact_fwd, bool is_xact_allow_refwd, struct irqmgr_version expected)
{
	const unsigned long __callno = __sysmgr_method_irq_version_check;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct irqmgr_version), __arch_actv_rpc_stksz_alignment(struct irqmgr_version));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_irq_version_check(rpc_info, NULL, expected);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_irq_version_check(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct irqmgr_version expected)
{
	const unsigned long __callno = __sysmgr_method_irq_version_check;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct irqmgr_version), __arch_actv_rpc_stksz_alignment(struct irqmgr_version));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_irq_version_check(__rref, rpc_info, NULL, expected);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_irq_version_check(struct irqmgr_version expected)
{
	return actvxactcall_hmcall_irq_version_check(false, false, expected);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_irq_version_check(rref_t __rref, struct irqmgr_version expected)
{
	return actvxactcapcall_hmcall_irq_version_check(false, false, __rref, expected);
}

extern int __actvcall_hmcall_irq_stat(unsigned long long __rpc_info, void *__buf, struct irqmgr_stat_arg arg);


extern int __actvcapcall_hmcall_irq_stat(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct irqmgr_stat_arg arg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_irq_stat(bool is_xact_fwd, bool is_xact_allow_refwd, struct irqmgr_stat_arg arg)
{
	const unsigned long __callno = __sysmgr_method_irq_stat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct irqmgr_stat_arg), __arch_actv_rpc_stksz_alignment(struct irqmgr_stat_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_irq_stat(rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_irq_stat(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct irqmgr_stat_arg arg)
{
	const unsigned long __callno = __sysmgr_method_irq_stat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct irqmgr_stat_arg), __arch_actv_rpc_stksz_alignment(struct irqmgr_stat_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_irq_stat(__rref, rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_irq_stat(struct irqmgr_stat_arg arg)
{
	return actvxactcall_hmcall_irq_stat(false, false, arg);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_irq_stat(rref_t __rref, struct irqmgr_stat_arg arg)
{
	return actvxactcapcall_hmcall_irq_stat(false, false, __rref, arg);
}

extern int __actvcall_hmcall_irq_suspend(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_irq_suspend(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_irq_suspend(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_irq_suspend;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_irq_suspend(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_irq_suspend(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_irq_suspend;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_irq_suspend(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_irq_suspend(void)
{
	return actvxactcall_hmcall_irq_suspend(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_irq_suspend(rref_t __rref)
{
	return actvxactcapcall_hmcall_irq_suspend(false, false, __rref);
}

extern int __actvcall_hmcall_irq_resume(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_irq_resume(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_irq_resume(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_irq_resume;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_irq_resume(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_irq_resume(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_irq_resume;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_irq_resume(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_irq_resume(void)
{
	return actvxactcall_hmcall_irq_resume(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_irq_resume(rref_t __rref)
{
	return actvxactcapcall_hmcall_irq_resume(false, false, __rref);
}

extern int __actvcall_hmcall_sec_cred_cfg(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_sec_cred_cfg(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sec_cred_cfg(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_sec_cred_cfg *__ret)
{
	const unsigned long __callno = __sysmgr_method_sec_cred_cfg;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sec_cred_cfg(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sec_cred_cfg(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_sec_cred_cfg *__ret)
{
	const unsigned long __callno = __sysmgr_method_sec_cred_cfg;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sec_cred_cfg(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sec_cred_cfg(struct __actvret_hmcall_sec_cred_cfg *__ret)
{
	return actvxactcall_hmcall_sec_cred_cfg(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sec_cred_cfg(rref_t __rref, struct __actvret_hmcall_sec_cred_cfg *__ret)
{
	return actvxactcapcall_hmcall_sec_cred_cfg(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_sec_setexeccon(unsigned long long __rpc_info, void *__buf, struct secmgr_sec_context ctx);


extern int __actvcapcall_hmcall_sec_setexeccon(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct secmgr_sec_context ctx);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sec_setexeccon(bool is_xact_fwd, bool is_xact_allow_refwd, struct secmgr_sec_context ctx)
{
	const unsigned long __callno = __sysmgr_method_sec_setexeccon;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct secmgr_sec_context), __arch_actv_rpc_stksz_alignment(struct secmgr_sec_context));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sec_setexeccon(rpc_info, NULL, ctx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sec_setexeccon(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct secmgr_sec_context ctx)
{
	const unsigned long __callno = __sysmgr_method_sec_setexeccon;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct secmgr_sec_context), __arch_actv_rpc_stksz_alignment(struct secmgr_sec_context));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sec_setexeccon(__rref, rpc_info, NULL, ctx);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sec_setexeccon(struct secmgr_sec_context ctx)
{
	return actvxactcall_hmcall_sec_setexeccon(false, false, ctx);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sec_setexeccon(rref_t __rref, struct secmgr_sec_context ctx)
{
	return actvxactcapcall_hmcall_sec_setexeccon(false, false, __rref, ctx);
}

extern int __actvcall_hmcall_sec_shconf_set_field(unsigned long long __rpc_info, void *__buf, unsigned int field, unsigned int value);


extern int __actvcapcall_hmcall_sec_shconf_set_field(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int field, unsigned int value);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sec_shconf_set_field(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int field, unsigned int value)
{
	const unsigned long __callno = __sysmgr_method_sec_shconf_set_field;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sec_shconf_set_field(rpc_info, NULL, field, value);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sec_shconf_set_field(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int field, unsigned int value)
{
	const unsigned long __callno = __sysmgr_method_sec_shconf_set_field;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sec_shconf_set_field(__rref, rpc_info, NULL, field, value);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sec_shconf_set_field(unsigned int field, unsigned int value)
{
	return actvxactcall_hmcall_sec_shconf_set_field(false, false, field, value);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sec_shconf_set_field(rref_t __rref, unsigned int field, unsigned int value)
{
	return actvxactcapcall_hmcall_sec_shconf_set_field(false, false, __rref, field, value);
}

extern int __actvcall_hmcall_sec_crlread(unsigned long long __rpc_info, void *__buf, void *buf, unsigned int buf_sz, unsigned int offset);


extern int __actvcapcall_hmcall_sec_crlread(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *buf, unsigned int buf_sz, unsigned int offset);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sec_crlread(bool is_xact_fwd, bool is_xact_allow_refwd, void *buf, unsigned int buf_sz, unsigned int offset, struct __actvret_hmcall_sec_crlread *__ret)
{
	const unsigned long __callno = __sysmgr_method_sec_crlread;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sec_crlread(rpc_info, __ret, buf, buf_sz, offset);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sec_crlread(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, void *buf, unsigned int buf_sz, unsigned int offset, struct __actvret_hmcall_sec_crlread *__ret)
{
	const unsigned long __callno = __sysmgr_method_sec_crlread;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sec_crlread(__rref, rpc_info, __ret, buf, buf_sz, offset);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sec_crlread(void *buf, unsigned int buf_sz, unsigned int offset, struct __actvret_hmcall_sec_crlread *__ret)
{
	return actvxactcall_hmcall_sec_crlread(false, false, buf, buf_sz, offset, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sec_crlread(rref_t __rref, void *buf, unsigned int buf_sz, unsigned int offset, struct __actvret_hmcall_sec_crlread *__ret)
{
	return actvxactcapcall_hmcall_sec_crlread(false, false, __rref, buf, buf_sz, offset, __ret);
}

extern int __actvcall_hmcall_sec_crlwrite(unsigned long long __rpc_info, void *__buf, const void *crl, unsigned long long crl_sz);


extern int __actvcapcall_hmcall_sec_crlwrite(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *crl, unsigned long long crl_sz);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sec_crlwrite(bool is_xact_fwd, bool is_xact_allow_refwd, const void *crl, unsigned long long crl_sz)
{
	const unsigned long __callno = __sysmgr_method_sec_crlwrite;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sec_crlwrite(rpc_info, NULL, crl, crl_sz);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sec_crlwrite(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *crl, unsigned long long crl_sz)
{
	const unsigned long __callno = __sysmgr_method_sec_crlwrite;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sec_crlwrite(__rref, rpc_info, NULL, crl, crl_sz);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sec_crlwrite(const void *crl, unsigned long long crl_sz)
{
	return actvxactcall_hmcall_sec_crlwrite(false, false, crl, crl_sz);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sec_crlwrite(rref_t __rref, const void *crl, unsigned long long crl_sz)
{
	return actvxactcapcall_hmcall_sec_crlwrite(false, false, __rref, crl, crl_sz);
}

extern int __actvcall_hmcall_sec_umask(unsigned long long __rpc_info, void *__buf, int mode);


extern int __actvcapcall_hmcall_sec_umask(rref_t __rref, unsigned long long __rpc_info, void *__buf, int mode);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sec_umask(bool is_xact_fwd, bool is_xact_allow_refwd, int mode)
{
	const unsigned long __callno = __sysmgr_method_sec_umask;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sec_umask(rpc_info, NULL, mode);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sec_umask(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int mode)
{
	const unsigned long __callno = __sysmgr_method_sec_umask;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sec_umask(__rref, rpc_info, NULL, mode);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sec_umask(int mode)
{
	return actvxactcall_hmcall_sec_umask(false, false, mode);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sec_umask(rref_t __rref, int mode)
{
	return actvxactcapcall_hmcall_sec_umask(false, false, __rref, mode);
}

extern int __actvcall_hmcall_procfs_simple_read(unsigned long long __rpc_info, void *__buf, struct hm_actv_buf name_buf);


extern int __actvcapcall_hmcall_procfs_simple_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_actv_buf name_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_simple_read(bool is_xact_fwd, bool is_xact_allow_refwd, struct hm_actv_buf name_buf, struct __actvret_hmcall_procfs_simple_read *__ret)
{
	const unsigned long __callno = __sysmgr_method_procfs_simple_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_simple_read(rpc_info, __ret, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_simple_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct hm_actv_buf name_buf, struct __actvret_hmcall_procfs_simple_read *__ret)
{
	const unsigned long __callno = __sysmgr_method_procfs_simple_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_simple_read(__rref, rpc_info, __ret, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_simple_read(struct hm_actv_buf name_buf, struct __actvret_hmcall_procfs_simple_read *__ret)
{
	return actvxactcall_hmcall_procfs_simple_read(false, false, name_buf, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_simple_read(rref_t __rref, struct hm_actv_buf name_buf, struct __actvret_hmcall_procfs_simple_read *__ret)
{
	return actvxactcapcall_hmcall_procfs_simple_read(false, false, __rref, name_buf, __ret);
}

extern int __actvcall_hmcall_procfs_simple_pid_read(unsigned long long __rpc_info, void *__buf, int pid, unsigned long long seq, struct hm_actv_buf name_buf);


extern int __actvcapcall_hmcall_procfs_simple_pid_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, int pid, unsigned long long seq, struct hm_actv_buf name_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_simple_pid_read(bool is_xact_fwd, bool is_xact_allow_refwd, int pid, unsigned long long seq, struct hm_actv_buf name_buf, struct __actvret_hmcall_procfs_simple_pid_read *__ret)
{
	const unsigned long __callno = __sysmgr_method_procfs_simple_pid_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_simple_pid_read(rpc_info, __ret, pid, seq, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_simple_pid_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int pid, unsigned long long seq, struct hm_actv_buf name_buf, struct __actvret_hmcall_procfs_simple_pid_read *__ret)
{
	const unsigned long __callno = __sysmgr_method_procfs_simple_pid_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_simple_pid_read(__rref, rpc_info, __ret, pid, seq, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_simple_pid_read(int pid, unsigned long long seq, struct hm_actv_buf name_buf, struct __actvret_hmcall_procfs_simple_pid_read *__ret)
{
	return actvxactcall_hmcall_procfs_simple_pid_read(false, false, pid, seq, name_buf, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_simple_pid_read(rref_t __rref, int pid, unsigned long long seq, struct hm_actv_buf name_buf, struct __actvret_hmcall_procfs_simple_pid_read *__ret)
{
	return actvxactcapcall_hmcall_procfs_simple_pid_read(false, false, __rref, pid, seq, name_buf, __ret);
}

extern int __actvcall_hmcall_procfs_simple_tid_read(unsigned long long __rpc_info, void *__buf, int tid, unsigned long long seq, struct hm_actv_buf name_buf);


extern int __actvcapcall_hmcall_procfs_simple_tid_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, unsigned long long seq, struct hm_actv_buf name_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_simple_tid_read(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, unsigned long long seq, struct hm_actv_buf name_buf, struct __actvret_hmcall_procfs_simple_tid_read *__ret)
{
	const unsigned long __callno = __sysmgr_method_procfs_simple_tid_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_simple_tid_read(rpc_info, __ret, tid, seq, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_simple_tid_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, unsigned long long seq, struct hm_actv_buf name_buf, struct __actvret_hmcall_procfs_simple_tid_read *__ret)
{
	const unsigned long __callno = __sysmgr_method_procfs_simple_tid_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_simple_tid_read(__rref, rpc_info, __ret, tid, seq, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_simple_tid_read(int tid, unsigned long long seq, struct hm_actv_buf name_buf, struct __actvret_hmcall_procfs_simple_tid_read *__ret)
{
	return actvxactcall_hmcall_procfs_simple_tid_read(false, false, tid, seq, name_buf, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_simple_tid_read(rref_t __rref, int tid, unsigned long long seq, struct hm_actv_buf name_buf, struct __actvret_hmcall_procfs_simple_tid_read *__ret)
{
	return actvxactcapcall_hmcall_procfs_simple_tid_read(false, false, __rref, tid, seq, name_buf, __ret);
}

extern int __actvcall_hmcall_procfs_pid_read(unsigned long long __rpc_info, void *__buf, int pid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf);


extern int __actvcapcall_hmcall_procfs_pid_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, int pid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_pid_read(bool is_xact_fwd, bool is_xact_allow_refwd, int pid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_pid_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_pid_read(rpc_info, NULL, pid, seq, shm_id, mpool_size, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_pid_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int pid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_pid_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_pid_read(__rref, rpc_info, NULL, pid, seq, shm_id, mpool_size, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_pid_read(int pid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	return actvxactcall_hmcall_procfs_pid_read(false, false, pid, seq, shm_id, mpool_size, name_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_pid_read(rref_t __rref, int pid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	return actvxactcapcall_hmcall_procfs_pid_read(false, false, __rref, pid, seq, shm_id, mpool_size, name_buf);
}

extern int __actvcall_hmcall_procfs_tid_read(unsigned long long __rpc_info, void *__buf, int tid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf);


extern int __actvcapcall_hmcall_procfs_tid_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_tid_read(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_tid_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_tid_read(rpc_info, NULL, tid, seq, shm_id, mpool_size, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_tid_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_tid_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_tid_read(__rref, rpc_info, NULL, tid, seq, shm_id, mpool_size, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_tid_read(int tid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	return actvxactcall_hmcall_procfs_tid_read(false, false, tid, seq, shm_id, mpool_size, name_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_tid_read(rref_t __rref, int tid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	return actvxactcapcall_hmcall_procfs_tid_read(false, false, __rref, tid, seq, shm_id, mpool_size, name_buf);
}

extern int __actvcall_hmcall_procfs_read(unsigned long long __rpc_info, void *__buf, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf);


extern int __actvcapcall_hmcall_procfs_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_read(bool is_xact_fwd, bool is_xact_allow_refwd, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_read(rpc_info, NULL, shm_id, mpool_size, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_read(__rref, rpc_info, NULL, shm_id, mpool_size, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_read(int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	return actvxactcall_hmcall_procfs_read(false, false, shm_id, mpool_size, name_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_read(rref_t __rref, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	return actvxactcapcall_hmcall_procfs_read(false, false, __rref, shm_id, mpool_size, name_buf);
}

extern int __actvcall_hmcall_procfs_pid_write(unsigned long long __rpc_info, void *__buf, struct procfs_tagname name, int pid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf);


extern int __actvcapcall_hmcall_procfs_pid_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct procfs_tagname name, int pid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_pid_write(bool is_xact_fwd, bool is_xact_allow_refwd, struct procfs_tagname name, int pid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_pid_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct procfs_tagname), __arch_actv_rpc_stksz_alignment(struct procfs_tagname));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_pid_write(rpc_info, NULL, name, pid, seq, pos, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_pid_write(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct procfs_tagname name, int pid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_pid_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct procfs_tagname), __arch_actv_rpc_stksz_alignment(struct procfs_tagname));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_pid_write(__rref, rpc_info, NULL, name, pid, seq, pos, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_pid_write(struct procfs_tagname name, int pid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf)
{
	return actvxactcall_hmcall_procfs_pid_write(false, false, name, pid, seq, pos, name_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_pid_write(rref_t __rref, struct procfs_tagname name, int pid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf)
{
	return actvxactcapcall_hmcall_procfs_pid_write(false, false, __rref, name, pid, seq, pos, name_buf);
}

extern int __actvcall_hmcall_procfs_tid_write(unsigned long long __rpc_info, void *__buf, struct procfs_tagname name, int tid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf);


extern int __actvcapcall_hmcall_procfs_tid_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct procfs_tagname name, int tid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_tid_write(bool is_xact_fwd, bool is_xact_allow_refwd, struct procfs_tagname name, int tid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_tid_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct procfs_tagname), __arch_actv_rpc_stksz_alignment(struct procfs_tagname));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_tid_write(rpc_info, NULL, name, tid, seq, pos, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_tid_write(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct procfs_tagname name, int tid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_tid_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct procfs_tagname), __arch_actv_rpc_stksz_alignment(struct procfs_tagname));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_tid_write(__rref, rpc_info, NULL, name, tid, seq, pos, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_tid_write(struct procfs_tagname name, int tid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf)
{
	return actvxactcall_hmcall_procfs_tid_write(false, false, name, tid, seq, pos, name_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_tid_write(rref_t __rref, struct procfs_tagname name, int tid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf)
{
	return actvxactcapcall_hmcall_procfs_tid_write(false, false, __rref, name, tid, seq, pos, name_buf);
}

extern int __actvcall_hmcall_procfs_write(unsigned long long __rpc_info, void *__buf, struct procfs_tagname name, unsigned long long pos, struct hm_actv_buf name_buf);


extern int __actvcapcall_hmcall_procfs_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct procfs_tagname name, unsigned long long pos, struct hm_actv_buf name_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_write(bool is_xact_fwd, bool is_xact_allow_refwd, struct procfs_tagname name, unsigned long long pos, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct procfs_tagname), __arch_actv_rpc_stksz_alignment(struct procfs_tagname));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_write(rpc_info, NULL, name, pos, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_write(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct procfs_tagname name, unsigned long long pos, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct procfs_tagname), __arch_actv_rpc_stksz_alignment(struct procfs_tagname));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_write(__rref, rpc_info, NULL, name, pos, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_write(struct procfs_tagname name, unsigned long long pos, struct hm_actv_buf name_buf)
{
	return actvxactcall_hmcall_procfs_write(false, false, name, pos, name_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_write(rref_t __rref, struct procfs_tagname name, unsigned long long pos, struct hm_actv_buf name_buf)
{
	return actvxactcapcall_hmcall_procfs_write(false, false, __rref, name, pos, name_buf);
}

extern int __actvcall_hmcall_procfs_yama_write(unsigned long long __rpc_info, void *__buf, unsigned long long pos, unsigned int cnode_idx, struct procfs_tagname name, const void *send_buf, unsigned long buf_len);


extern int __actvcapcall_hmcall_procfs_yama_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long pos, unsigned int cnode_idx, struct procfs_tagname name, const void *send_buf, unsigned long buf_len);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_yama_write(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long pos, unsigned int cnode_idx, struct procfs_tagname name, const void *send_buf, unsigned long buf_len)
{
	const unsigned long __callno = __sysmgr_method_procfs_yama_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct procfs_tagname), __arch_actv_rpc_stksz_alignment(struct procfs_tagname));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_yama_write(rpc_info, NULL, pos, cnode_idx, name, send_buf, buf_len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_yama_write(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long pos, unsigned int cnode_idx, struct procfs_tagname name, const void *send_buf, unsigned long buf_len)
{
	const unsigned long __callno = __sysmgr_method_procfs_yama_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct procfs_tagname), __arch_actv_rpc_stksz_alignment(struct procfs_tagname));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_yama_write(__rref, rpc_info, NULL, pos, cnode_idx, name, send_buf, buf_len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_yama_write(unsigned long long pos, unsigned int cnode_idx, struct procfs_tagname name, const void *send_buf, unsigned long buf_len)
{
	return actvxactcall_hmcall_procfs_yama_write(false, false, pos, cnode_idx, name, send_buf, buf_len);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_yama_write(rref_t __rref, unsigned long long pos, unsigned int cnode_idx, struct procfs_tagname name, const void *send_buf, unsigned long buf_len)
{
	return actvxactcapcall_hmcall_procfs_yama_write(false, false, __rref, pos, cnode_idx, name, send_buf, buf_len);
}

extern int __actvcall_hmcall_procfs_get_allpids(unsigned long long __rpc_info, void *__buf, int shm_id);


extern int __actvcapcall_hmcall_procfs_get_allpids(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_get_allpids(bool is_xact_fwd, bool is_xact_allow_refwd, int shm_id)
{
	const unsigned long __callno = __sysmgr_method_procfs_get_allpids;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_get_allpids(rpc_info, NULL, shm_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_get_allpids(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shm_id)
{
	const unsigned long __callno = __sysmgr_method_procfs_get_allpids;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_get_allpids(__rref, rpc_info, NULL, shm_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_get_allpids(int shm_id)
{
	return actvxactcall_hmcall_procfs_get_allpids(false, false, shm_id);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_get_allpids(rref_t __rref, int shm_id)
{
	return actvxactcapcall_hmcall_procfs_get_allpids(false, false, __rref, shm_id);
}

extern int __actvcall_hmcall_procfs_get_alltids(unsigned long long __rpc_info, void *__buf, int pid, unsigned long long seq, int shm_id);


extern int __actvcapcall_hmcall_procfs_get_alltids(rref_t __rref, unsigned long long __rpc_info, void *__buf, int pid, unsigned long long seq, int shm_id);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_get_alltids(bool is_xact_fwd, bool is_xact_allow_refwd, int pid, unsigned long long seq, int shm_id)
{
	const unsigned long __callno = __sysmgr_method_procfs_get_alltids;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_get_alltids(rpc_info, NULL, pid, seq, shm_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_get_alltids(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int pid, unsigned long long seq, int shm_id)
{
	const unsigned long __callno = __sysmgr_method_procfs_get_alltids;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_get_alltids(__rref, rpc_info, NULL, pid, seq, shm_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_get_alltids(int pid, unsigned long long seq, int shm_id)
{
	return actvxactcall_hmcall_procfs_get_alltids(false, false, pid, seq, shm_id);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_get_alltids(rref_t __rref, int pid, unsigned long long seq, int shm_id)
{
	return actvxactcapcall_hmcall_procfs_get_alltids(false, false, __rref, pid, seq, shm_id);
}

extern int __actvcall_hmcall_procfs_get_irq_names(unsigned long long __rpc_info, void *__buf, int shm_id);


extern int __actvcapcall_hmcall_procfs_get_irq_names(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_get_irq_names(bool is_xact_fwd, bool is_xact_allow_refwd, int shm_id)
{
	const unsigned long __callno = __sysmgr_method_procfs_get_irq_names;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_get_irq_names(rpc_info, NULL, shm_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_get_irq_names(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shm_id)
{
	const unsigned long __callno = __sysmgr_method_procfs_get_irq_names;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_get_irq_names(__rref, rpc_info, NULL, shm_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_get_irq_names(int shm_id)
{
	return actvxactcall_hmcall_procfs_get_irq_names(false, false, shm_id);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_get_irq_names(rref_t __rref, int shm_id)
{
	return actvxactcapcall_hmcall_procfs_get_irq_names(false, false, __rref, shm_id);
}

extern int __actvcall_hmcall_procfs_simple_irq_read(unsigned long long __rpc_info, void *__buf, uint32_t id, struct hm_actv_buf name_buf);


extern int __actvcapcall_hmcall_procfs_simple_irq_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, uint32_t id, struct hm_actv_buf name_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_simple_irq_read(bool is_xact_fwd, bool is_xact_allow_refwd, uint32_t id, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_simple_irq_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint32_t), __arch_actv_rpc_stksz_alignment(uint32_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_simple_irq_read(rpc_info, NULL, id, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_simple_irq_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, uint32_t id, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_simple_irq_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint32_t), __arch_actv_rpc_stksz_alignment(uint32_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_simple_irq_read(__rref, rpc_info, NULL, id, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_simple_irq_read(uint32_t id, struct hm_actv_buf name_buf)
{
	return actvxactcall_hmcall_procfs_simple_irq_read(false, false, id, name_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_simple_irq_read(rref_t __rref, uint32_t id, struct hm_actv_buf name_buf)
{
	return actvxactcapcall_hmcall_procfs_simple_irq_read(false, false, __rref, id, name_buf);
}

extern int __actvcall_hmcall_procfs_irq_read(unsigned long long __rpc_info, void *__buf, uint32_t irq_id, int shm_id, unsigned long long shm_size, struct hm_actv_buf name_buf);


extern int __actvcapcall_hmcall_procfs_irq_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, uint32_t irq_id, int shm_id, unsigned long long shm_size, struct hm_actv_buf name_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_irq_read(bool is_xact_fwd, bool is_xact_allow_refwd, uint32_t irq_id, int shm_id, unsigned long long shm_size, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_irq_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint32_t), __arch_actv_rpc_stksz_alignment(uint32_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_irq_read(rpc_info, NULL, irq_id, shm_id, shm_size, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_irq_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, uint32_t irq_id, int shm_id, unsigned long long shm_size, struct hm_actv_buf name_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_irq_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint32_t), __arch_actv_rpc_stksz_alignment(uint32_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_irq_read(__rref, rpc_info, NULL, irq_id, shm_id, shm_size, name_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_irq_read(uint32_t irq_id, int shm_id, unsigned long long shm_size, struct hm_actv_buf name_buf)
{
	return actvxactcall_hmcall_procfs_irq_read(false, false, irq_id, shm_id, shm_size, name_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_irq_read(rref_t __rref, uint32_t irq_id, int shm_id, unsigned long long shm_size, struct hm_actv_buf name_buf)
{
	return actvxactcapcall_hmcall_procfs_irq_read(false, false, __rref, irq_id, shm_id, shm_size, name_buf);
}

extern int __actvcall_hmcall_procfs_irq_write(unsigned long long __rpc_info, void *__buf, uint32_t irq_id, struct procfs_tagname tagname, unsigned long long pos, struct hm_actv_buf src_buf);


extern int __actvcapcall_hmcall_procfs_irq_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, uint32_t irq_id, struct procfs_tagname tagname, unsigned long long pos, struct hm_actv_buf src_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_procfs_irq_write(bool is_xact_fwd, bool is_xact_allow_refwd, uint32_t irq_id, struct procfs_tagname tagname, unsigned long long pos, struct hm_actv_buf src_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_irq_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint32_t), __arch_actv_rpc_stksz_alignment(uint32_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct procfs_tagname), __arch_actv_rpc_stksz_alignment(struct procfs_tagname));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_procfs_irq_write(rpc_info, NULL, irq_id, tagname, pos, src_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_procfs_irq_write(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, uint32_t irq_id, struct procfs_tagname tagname, unsigned long long pos, struct hm_actv_buf src_buf)
{
	const unsigned long __callno = __sysmgr_method_procfs_irq_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint32_t), __arch_actv_rpc_stksz_alignment(uint32_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct procfs_tagname), __arch_actv_rpc_stksz_alignment(struct procfs_tagname));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_procfs_irq_write(__rref, rpc_info, NULL, irq_id, tagname, pos, src_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_procfs_irq_write(uint32_t irq_id, struct procfs_tagname tagname, unsigned long long pos, struct hm_actv_buf src_buf)
{
	return actvxactcall_hmcall_procfs_irq_write(false, false, irq_id, tagname, pos, src_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_procfs_irq_write(rref_t __rref, uint32_t irq_id, struct procfs_tagname tagname, unsigned long long pos, struct hm_actv_buf src_buf)
{
	return actvxactcapcall_hmcall_procfs_irq_write(false, false, __rref, irq_id, tagname, pos, src_buf);
}

extern int __actvcall_hmcall_vm_get_region_num(unsigned long long __rpc_info, void *__buf, xref_t vm, unsigned int type);


extern int __actvcapcall_hmcall_vm_get_region_num(rref_t __rref, unsigned long long __rpc_info, void *__buf, xref_t vm, unsigned int type);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_get_region_num(bool is_xact_fwd, bool is_xact_allow_refwd, xref_t vm, unsigned int type, struct __actvret_hmcall_vm_get_region_num *__ret)
{
	const unsigned long __callno = __sysmgr_method_vm_get_region_num;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(xref_t), __arch_actv_rpc_stksz_alignment(xref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_get_region_num(rpc_info, __ret, vm, type);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_get_region_num(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, xref_t vm, unsigned int type, struct __actvret_hmcall_vm_get_region_num *__ret)
{
	const unsigned long __callno = __sysmgr_method_vm_get_region_num;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(xref_t), __arch_actv_rpc_stksz_alignment(xref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_get_region_num(__rref, rpc_info, __ret, vm, type);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_get_region_num(xref_t vm, unsigned int type, struct __actvret_hmcall_vm_get_region_num *__ret)
{
	return actvxactcall_hmcall_vm_get_region_num(false, false, vm, type, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_get_region_num(rref_t __rref, xref_t vm, unsigned int type, struct __actvret_hmcall_vm_get_region_num *__ret)
{
	return actvxactcapcall_hmcall_vm_get_region_num(false, false, __rref, vm, type, __ret);
}

extern int __actvcall_hmcall_vm_map_iomem(unsigned long long __rpc_info, void *__buf, cref_t vm, void *vm_regions, unsigned int region_num);


extern int __actvcapcall_hmcall_vm_map_iomem(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t vm, void *vm_regions, unsigned int region_num);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_map_iomem(bool is_xact_fwd, bool is_xact_allow_refwd, cref_t vm, void *vm_regions, unsigned int region_num)
{
	const unsigned long __callno = __sysmgr_method_vm_map_iomem;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_map_iomem(rpc_info, NULL, vm, vm_regions, region_num);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_map_iomem(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, cref_t vm, void *vm_regions, unsigned int region_num)
{
	const unsigned long __callno = __sysmgr_method_vm_map_iomem;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_map_iomem(__rref, rpc_info, NULL, vm, vm_regions, region_num);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_map_iomem(cref_t vm, void *vm_regions, unsigned int region_num)
{
	return actvxactcall_hmcall_vm_map_iomem(false, false, vm, vm_regions, region_num);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_map_iomem(rref_t __rref, cref_t vm, void *vm_regions, unsigned int region_num)
{
	return actvxactcapcall_hmcall_vm_map_iomem(false, false, __rref, vm, vm_regions, region_num);
}

extern int __actvcall_hmcall_vm_map_to_process(unsigned long long __rpc_info, void *__buf, rref_t vm, void *vm_regions, unsigned int region_num);


extern int __actvcapcall_hmcall_vm_map_to_process(rref_t __rref, unsigned long long __rpc_info, void *__buf, rref_t vm, void *vm_regions, unsigned int region_num);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_map_to_process(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t vm, void *vm_regions, unsigned int region_num)
{
	const unsigned long __callno = __sysmgr_method_vm_map_to_process;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_map_to_process(rpc_info, NULL, vm, vm_regions, region_num);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_map_to_process(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, rref_t vm, void *vm_regions, unsigned int region_num)
{
	const unsigned long __callno = __sysmgr_method_vm_map_to_process;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(rref_t), __arch_actv_rpc_stksz_alignment(rref_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_map_to_process(__rref, rpc_info, NULL, vm, vm_regions, region_num);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_map_to_process(rref_t vm, void *vm_regions, unsigned int region_num)
{
	return actvxactcall_hmcall_vm_map_to_process(false, false, vm, vm_regions, region_num);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_map_to_process(rref_t __rref, rref_t vm, void *vm_regions, unsigned int region_num)
{
	return actvxactcapcall_hmcall_vm_map_to_process(false, false, __rref, vm, vm_regions, region_num);
}

extern int __actvcall_hmcall_vm_map_shmmem(unsigned long long __rpc_info, void *__buf, cref_t vm);


extern int __actvcapcall_hmcall_vm_map_shmmem(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t vm);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_map_shmmem(bool is_xact_fwd, bool is_xact_allow_refwd, cref_t vm, struct __actvret_hmcall_vm_map_shmmem *__ret)
{
	const unsigned long __callno = __sysmgr_method_vm_map_shmmem;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_map_shmmem(rpc_info, __ret, vm);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_map_shmmem(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, cref_t vm, struct __actvret_hmcall_vm_map_shmmem *__ret)
{
	const unsigned long __callno = __sysmgr_method_vm_map_shmmem;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(cref_t), __arch_actv_rpc_stksz_alignment(cref_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_map_shmmem(__rref, rpc_info, __ret, vm);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_map_shmmem(cref_t vm, struct __actvret_hmcall_vm_map_shmmem *__ret)
{
	return actvxactcall_hmcall_vm_map_shmmem(false, false, vm, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_map_shmmem(rref_t __rref, cref_t vm, struct __actvret_hmcall_vm_map_shmmem *__ret)
{
	return actvxactcapcall_hmcall_vm_map_shmmem(false, false, __rref, vm, __ret);
}

extern int __actvcall_hmcall_vm_populate_map(unsigned long long __rpc_info, void *__buf, uintptr_t vm_gpa, uintptr_t uvmm_hva);


extern int __actvcapcall_hmcall_vm_populate_map(rref_t __rref, unsigned long long __rpc_info, void *__buf, uintptr_t vm_gpa, uintptr_t uvmm_hva);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_populate_map(bool is_xact_fwd, bool is_xact_allow_refwd, uintptr_t vm_gpa, uintptr_t uvmm_hva)
{
	const unsigned long __callno = __sysmgr_method_vm_populate_map;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_populate_map(rpc_info, NULL, vm_gpa, uvmm_hva);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_populate_map(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, uintptr_t vm_gpa, uintptr_t uvmm_hva)
{
	const unsigned long __callno = __sysmgr_method_vm_populate_map;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_populate_map(__rref, rpc_info, NULL, vm_gpa, uvmm_hva);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_populate_map(uintptr_t vm_gpa, uintptr_t uvmm_hva)
{
	return actvxactcall_hmcall_vm_populate_map(false, false, vm_gpa, uvmm_hva);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_populate_map(rref_t __rref, uintptr_t vm_gpa, uintptr_t uvmm_hva)
{
	return actvxactcapcall_hmcall_vm_populate_map(false, false, __rref, vm_gpa, uvmm_hva);
}

extern int __actvcall_hmcall_vm_create_vm_vspace(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_vm_create_vm_vspace(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_create_vm_vspace(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_vm_create_vm_vspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_create_vm_vspace(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_create_vm_vspace(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_vm_create_vm_vspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_create_vm_vspace(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_create_vm_vspace(void)
{
	return actvxactcall_hmcall_vm_create_vm_vspace(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_create_vm_vspace(rref_t __rref)
{
	return actvxactcapcall_hmcall_vm_create_vm_vspace(false, false, __rref);
}

extern int __actvcall_hmcall_vm_destroy_vm_vspace(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_vm_destroy_vm_vspace(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_destroy_vm_vspace(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_vm_destroy_vm_vspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_destroy_vm_vspace(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_destroy_vm_vspace(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_vm_destroy_vm_vspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_destroy_vm_vspace(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_destroy_vm_vspace(void)
{
	return actvxactcall_hmcall_vm_destroy_vm_vspace(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_destroy_vm_vspace(rref_t __rref)
{
	return actvxactcapcall_hmcall_vm_destroy_vm_vspace(false, false, __rref);
}

extern int __actvcall_hmcall_vm_map_ipcshm(unsigned long long __rpc_info, void *__buf, int shm_id, int shmflg, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf);


extern int __actvcapcall_hmcall_vm_map_ipcshm(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, int shmflg, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_map_ipcshm(bool is_xact_fwd, bool is_xact_allow_refwd, int shm_id, int shmflg, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf)
{
	const unsigned long __callno = __sysmgr_method_vm_map_ipcshm;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_map_ipcshm(rpc_info, NULL, shm_id, shmflg, nr_gpa_lists, gpa_lists_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_map_ipcshm(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shm_id, int shmflg, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf)
{
	const unsigned long __callno = __sysmgr_method_vm_map_ipcshm;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_map_ipcshm(__rref, rpc_info, NULL, shm_id, shmflg, nr_gpa_lists, gpa_lists_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_map_ipcshm(int shm_id, int shmflg, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf)
{
	return actvxactcall_hmcall_vm_map_ipcshm(false, false, shm_id, shmflg, nr_gpa_lists, gpa_lists_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_map_ipcshm(rref_t __rref, int shm_id, int shmflg, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf)
{
	return actvxactcapcall_hmcall_vm_map_ipcshm(false, false, __rref, shm_id, shmflg, nr_gpa_lists, gpa_lists_buf);
}

extern int __actvcall_hmcall_vm_unmap_ipcshm(unsigned long long __rpc_info, void *__buf, int shm_id, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf);


extern int __actvcapcall_hmcall_vm_unmap_ipcshm(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_unmap_ipcshm(bool is_xact_fwd, bool is_xact_allow_refwd, int shm_id, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf)
{
	const unsigned long __callno = __sysmgr_method_vm_unmap_ipcshm;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_unmap_ipcshm(rpc_info, NULL, shm_id, nr_gpa_lists, gpa_lists_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_unmap_ipcshm(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shm_id, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf)
{
	const unsigned long __callno = __sysmgr_method_vm_unmap_ipcshm;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_unmap_ipcshm(__rref, rpc_info, NULL, shm_id, nr_gpa_lists, gpa_lists_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_unmap_ipcshm(int shm_id, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf)
{
	return actvxactcall_hmcall_vm_unmap_ipcshm(false, false, shm_id, nr_gpa_lists, gpa_lists_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_unmap_ipcshm(rref_t __rref, int shm_id, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf)
{
	return actvxactcapcall_hmcall_vm_unmap_ipcshm(false, false, __rref, shm_id, nr_gpa_lists, gpa_lists_buf);
}

extern int __actvcall_hmcall_vm_mmap(unsigned long long __rpc_info, void *__buf, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd, struct hm_actv_buf gpa_list_buf);


extern int __actvcapcall_hmcall_vm_mmap(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd, struct hm_actv_buf gpa_list_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_mmap(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd, struct hm_actv_buf gpa_list_buf)
{
	const unsigned long __callno = __sysmgr_method_vm_mmap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct fs_service_name), __arch_actv_rpc_stksz_alignment(struct fs_service_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long long), __arch_actv_rpc_stksz_alignment(long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_mmap(rpc_info, NULL, prot, flags, file_type, service_name, offset, fd, gpa_list_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_mmap(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd, struct hm_actv_buf gpa_list_buf)
{
	const unsigned long __callno = __sysmgr_method_vm_mmap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct fs_service_name), __arch_actv_rpc_stksz_alignment(struct fs_service_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long long), __arch_actv_rpc_stksz_alignment(long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_mmap(__rref, rpc_info, NULL, prot, flags, file_type, service_name, offset, fd, gpa_list_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_mmap(unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd, struct hm_actv_buf gpa_list_buf)
{
	return actvxactcall_hmcall_vm_mmap(false, false, prot, flags, file_type, service_name, offset, fd, gpa_list_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_mmap(rref_t __rref, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd, struct hm_actv_buf gpa_list_buf)
{
	return actvxactcapcall_hmcall_vm_mmap(false, false, __rref, prot, flags, file_type, service_name, offset, fd, gpa_list_buf);
}

extern int __actvcall_hmcall_vm_munmap(unsigned long long __rpc_info, void *__buf, struct hm_actv_buf gpa_list_buf);


extern int __actvcapcall_hmcall_vm_munmap(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_actv_buf gpa_list_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_munmap(bool is_xact_fwd, bool is_xact_allow_refwd, struct hm_actv_buf gpa_list_buf)
{
	const unsigned long __callno = __sysmgr_method_vm_munmap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_munmap(rpc_info, NULL, gpa_list_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_munmap(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct hm_actv_buf gpa_list_buf)
{
	const unsigned long __callno = __sysmgr_method_vm_munmap;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_munmap(__rref, rpc_info, NULL, gpa_list_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_munmap(struct hm_actv_buf gpa_list_buf)
{
	return actvxactcall_hmcall_vm_munmap(false, false, gpa_list_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_munmap(rref_t __rref, struct hm_actv_buf gpa_list_buf)
{
	return actvxactcapcall_hmcall_vm_munmap(false, false, __rref, gpa_list_buf);
}

extern int __actvcall_hmcall_vm_mmap_vdso(unsigned long long __rpc_info, void *__buf, uint64_t gpa, uint64_t size);


extern int __actvcapcall_hmcall_vm_mmap_vdso(rref_t __rref, unsigned long long __rpc_info, void *__buf, uint64_t gpa, uint64_t size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_mmap_vdso(bool is_xact_fwd, bool is_xact_allow_refwd, uint64_t gpa, uint64_t size)
{
	const unsigned long __callno = __sysmgr_method_vm_mmap_vdso;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_mmap_vdso(rpc_info, NULL, gpa, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_mmap_vdso(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, uint64_t gpa, uint64_t size)
{
	const unsigned long __callno = __sysmgr_method_vm_mmap_vdso;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_mmap_vdso(__rref, rpc_info, NULL, gpa, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_mmap_vdso(uint64_t gpa, uint64_t size)
{
	return actvxactcall_hmcall_vm_mmap_vdso(false, false, gpa, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_mmap_vdso(rref_t __rref, uint64_t gpa, uint64_t size)
{
	return actvxactcapcall_hmcall_vm_mmap_vdso(false, false, __rref, gpa, size);
}

extern int __actvcall_hmcall_vm_gpa_to_hpa(unsigned long long __rpc_info, void *__buf, uintptr_t gpa);


extern int __actvcapcall_hmcall_vm_gpa_to_hpa(rref_t __rref, unsigned long long __rpc_info, void *__buf, uintptr_t gpa);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_gpa_to_hpa(bool is_xact_fwd, bool is_xact_allow_refwd, uintptr_t gpa, struct __actvret_hmcall_vm_gpa_to_hpa *__ret)
{
	const unsigned long __callno = __sysmgr_method_vm_gpa_to_hpa;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_gpa_to_hpa(rpc_info, __ret, gpa);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_gpa_to_hpa(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, uintptr_t gpa, struct __actvret_hmcall_vm_gpa_to_hpa *__ret)
{
	const unsigned long __callno = __sysmgr_method_vm_gpa_to_hpa;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_gpa_to_hpa(__rref, rpc_info, __ret, gpa);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_gpa_to_hpa(uintptr_t gpa, struct __actvret_hmcall_vm_gpa_to_hpa *__ret)
{
	return actvxactcall_hmcall_vm_gpa_to_hpa(false, false, gpa, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_gpa_to_hpa(rref_t __rref, uintptr_t gpa, struct __actvret_hmcall_vm_gpa_to_hpa *__ret)
{
	return actvxactcapcall_hmcall_vm_gpa_to_hpa(false, false, __rref, gpa, __ret);
}

extern int __actvcall_hmcall_vm_madvise(unsigned long long __rpc_info, void *__buf, unsigned long long vm_gpa, unsigned long long uvmm_hva, unsigned long long length, unsigned int flags);


extern int __actvcapcall_hmcall_vm_madvise(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long vm_gpa, unsigned long long uvmm_hva, unsigned long long length, unsigned int flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_madvise(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long vm_gpa, unsigned long long uvmm_hva, unsigned long long length, unsigned int flags)
{
	const unsigned long __callno = __sysmgr_method_vm_madvise;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_madvise(rpc_info, NULL, vm_gpa, uvmm_hva, length, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_madvise(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long vm_gpa, unsigned long long uvmm_hva, unsigned long long length, unsigned int flags)
{
	const unsigned long __callno = __sysmgr_method_vm_madvise;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_madvise(__rref, rpc_info, NULL, vm_gpa, uvmm_hva, length, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_madvise(unsigned long long vm_gpa, unsigned long long uvmm_hva, unsigned long long length, unsigned int flags)
{
	return actvxactcall_hmcall_vm_madvise(false, false, vm_gpa, uvmm_hva, length, flags);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_madvise(rref_t __rref, unsigned long long vm_gpa, unsigned long long uvmm_hva, unsigned long long length, unsigned int flags)
{
	return actvxactcapcall_hmcall_vm_madvise(false, false, __rref, vm_gpa, uvmm_hva, length, flags);
}

extern int __actvcall_hmcall_vm_mclone(unsigned long long __rpc_info, void *__buf, uint64_t src_va, uint64_t tgt_gpa, uint64_t len, uint32_t prot);


extern int __actvcapcall_hmcall_vm_mclone(rref_t __rref, unsigned long long __rpc_info, void *__buf, uint64_t src_va, uint64_t tgt_gpa, uint64_t len, uint32_t prot);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_vm_mclone(bool is_xact_fwd, bool is_xact_allow_refwd, uint64_t src_va, uint64_t tgt_gpa, uint64_t len, uint32_t prot)
{
	const unsigned long __callno = __sysmgr_method_vm_mclone;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint32_t), __arch_actv_rpc_stksz_alignment(uint32_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_vm_mclone(rpc_info, NULL, src_va, tgt_gpa, len, prot);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_vm_mclone(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, uint64_t src_va, uint64_t tgt_gpa, uint64_t len, uint32_t prot)
{
	const unsigned long __callno = __sysmgr_method_vm_mclone;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint64_t), __arch_actv_rpc_stksz_alignment(uint64_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uint32_t), __arch_actv_rpc_stksz_alignment(uint32_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_vm_mclone(__rref, rpc_info, NULL, src_va, tgt_gpa, len, prot);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_vm_mclone(uint64_t src_va, uint64_t tgt_gpa, uint64_t len, uint32_t prot)
{
	return actvxactcall_hmcall_vm_mclone(false, false, src_va, tgt_gpa, len, prot);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_vm_mclone(rref_t __rref, uint64_t src_va, uint64_t tgt_gpa, uint64_t len, uint32_t prot)
{
	return actvxactcapcall_hmcall_vm_mclone(false, false, __rref, src_va, tgt_gpa, len, prot);
}

extern int __actvcall_hmcall_ns_unshare(unsigned long long __rpc_info, void *__buf, int flags);


extern int __actvcapcall_hmcall_ns_unshare(rref_t __rref, unsigned long long __rpc_info, void *__buf, int flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ns_unshare(bool is_xact_fwd, bool is_xact_allow_refwd, int flags)
{
	const unsigned long __callno = __sysmgr_method_ns_unshare;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ns_unshare(rpc_info, NULL, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ns_unshare(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int flags)
{
	const unsigned long __callno = __sysmgr_method_ns_unshare;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ns_unshare(__rref, rpc_info, NULL, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ns_unshare(int flags)
{
	return actvxactcall_hmcall_ns_unshare(false, false, flags);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ns_unshare(rref_t __rref, int flags)
{
	return actvxactcapcall_hmcall_ns_unshare(false, false, __rref, flags);
}

extern int __actvcall_hmcall_ns_setns(unsigned long long __rpc_info, void *__buf, int fd, int flags);


extern int __actvcapcall_hmcall_ns_setns(rref_t __rref, unsigned long long __rpc_info, void *__buf, int fd, int flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ns_setns(bool is_xact_fwd, bool is_xact_allow_refwd, int fd, int flags)
{
	const unsigned long __callno = __sysmgr_method_ns_setns;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ns_setns(rpc_info, NULL, fd, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ns_setns(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int fd, int flags)
{
	const unsigned long __callno = __sysmgr_method_ns_setns;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ns_setns(__rref, rpc_info, NULL, fd, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ns_setns(int fd, int flags)
{
	return actvxactcall_hmcall_ns_setns(false, false, fd, flags);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ns_setns(rref_t __rref, int fd, int flags)
{
	return actvxactcapcall_hmcall_ns_setns(false, false, __rref, fd, flags);
}

extern int __actvcall_hmcall_ns_get(unsigned long long __rpc_info, void *__buf, unsigned int nsid, int flags);


extern int __actvcapcall_hmcall_ns_get(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int nsid, int flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ns_get(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int nsid, int flags)
{
	const unsigned long __callno = __sysmgr_method_ns_get;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ns_get(rpc_info, NULL, nsid, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ns_get(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int nsid, int flags)
{
	const unsigned long __callno = __sysmgr_method_ns_get;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ns_get(__rref, rpc_info, NULL, nsid, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ns_get(unsigned int nsid, int flags)
{
	return actvxactcall_hmcall_ns_get(false, false, nsid, flags);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ns_get(rref_t __rref, unsigned int nsid, int flags)
{
	return actvxactcapcall_hmcall_ns_get(false, false, __rref, nsid, flags);
}

extern int __actvcall_hmcall_ns_put(unsigned long long __rpc_info, void *__buf, unsigned int nsid, int flags);


extern int __actvcapcall_hmcall_ns_put(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int nsid, int flags);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ns_put(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int nsid, int flags)
{
	const unsigned long __callno = __sysmgr_method_ns_put;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ns_put(rpc_info, NULL, nsid, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ns_put(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int nsid, int flags)
{
	const unsigned long __callno = __sysmgr_method_ns_put;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ns_put(__rref, rpc_info, NULL, nsid, flags);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ns_put(unsigned int nsid, int flags)
{
	return actvxactcall_hmcall_ns_put(false, false, nsid, flags);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ns_put(rref_t __rref, unsigned int nsid, int flags)
{
	return actvxactcapcall_hmcall_ns_put(false, false, __rref, nsid, flags);
}

extern int __actvcall_hmcall_guard_action(unsigned long long __rpc_info, void *__buf, unsigned int cmd, union guard_action_args args);


extern int __actvcapcall_hmcall_guard_action(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int cmd, union guard_action_args args);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_guard_action(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int cmd, union guard_action_args args, struct __actvret_hmcall_guard_action *__ret)
{
	const unsigned long __callno = __sysmgr_method_guard_action;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(union guard_action_args), __arch_actv_rpc_stksz_alignment(union guard_action_args));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_guard_action(rpc_info, __ret, cmd, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_guard_action(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int cmd, union guard_action_args args, struct __actvret_hmcall_guard_action *__ret)
{
	const unsigned long __callno = __sysmgr_method_guard_action;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(union guard_action_args), __arch_actv_rpc_stksz_alignment(union guard_action_args));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_guard_action(__rref, rpc_info, __ret, cmd, args);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_guard_action(unsigned int cmd, union guard_action_args args, struct __actvret_hmcall_guard_action *__ret)
{
	return actvxactcall_hmcall_guard_action(false, false, cmd, args, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_guard_action(rref_t __rref, unsigned int cmd, union guard_action_args args, struct __actvret_hmcall_guard_action *__ret)
{
	return actvxactcapcall_hmcall_guard_action(false, false, __rref, cmd, args, __ret);
}

extern int __actvcall_hmcall_guard_sysrq(unsigned long long __rpc_info, void *__buf, int key, int lock_free);


extern int __actvcapcall_hmcall_guard_sysrq(rref_t __rref, unsigned long long __rpc_info, void *__buf, int key, int lock_free);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_guard_sysrq(bool is_xact_fwd, bool is_xact_allow_refwd, int key, int lock_free)
{
	const unsigned long __callno = __sysmgr_method_guard_sysrq;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_guard_sysrq(rpc_info, NULL, key, lock_free);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_guard_sysrq(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int key, int lock_free)
{
	const unsigned long __callno = __sysmgr_method_guard_sysrq;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_guard_sysrq(__rref, rpc_info, NULL, key, lock_free);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_guard_sysrq(int key, int lock_free)
{
	return actvxactcall_hmcall_guard_sysrq(false, false, key, lock_free);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_guard_sysrq(rref_t __rref, int key, int lock_free)
{
	return actvxactcapcall_hmcall_guard_sysrq(false, false, __rref, key, lock_free);
}

extern int __actvcall_hmcall_guard_alive(unsigned long long __rpc_info, void *__buf, pid_t pid);


extern int __actvcapcall_hmcall_guard_alive(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_guard_alive(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid)
{
	const unsigned long __callno = __sysmgr_method_guard_alive;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_guard_alive(rpc_info, NULL, pid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_guard_alive(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid)
{
	const unsigned long __callno = __sysmgr_method_guard_alive;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_guard_alive(__rref, rpc_info, NULL, pid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_guard_alive(pid_t pid)
{
	return actvxactcall_hmcall_guard_alive(false, false, pid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_guard_alive(rref_t __rref, pid_t pid)
{
	return actvxactcapcall_hmcall_guard_alive(false, false, __rref, pid);
}

extern int __actvcall_hmcall_iov_add_device(unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg);


extern int __actvcapcall_hmcall_iov_add_device(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_iov_add_device(bool is_xact_fwd, bool is_xact_allow_refwd, struct iovmgr_ops_arg arg)
{
	const unsigned long __callno = __sysmgr_method_iov_add_device;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct iovmgr_ops_arg), __arch_actv_rpc_stksz_alignment(struct iovmgr_ops_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_iov_add_device(rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_iov_add_device(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct iovmgr_ops_arg arg)
{
	const unsigned long __callno = __sysmgr_method_iov_add_device;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct iovmgr_ops_arg), __arch_actv_rpc_stksz_alignment(struct iovmgr_ops_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_iov_add_device(__rref, rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_iov_add_device(struct iovmgr_ops_arg arg)
{
	return actvxactcall_hmcall_iov_add_device(false, false, arg);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_iov_add_device(rref_t __rref, struct iovmgr_ops_arg arg)
{
	return actvxactcapcall_hmcall_iov_add_device(false, false, __rref, arg);
}

extern int __actvcall_hmcall_iov_attach_device(unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg);


extern int __actvcapcall_hmcall_iov_attach_device(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_iov_attach_device(bool is_xact_fwd, bool is_xact_allow_refwd, struct iovmgr_ops_arg arg)
{
	const unsigned long __callno = __sysmgr_method_iov_attach_device;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct iovmgr_ops_arg), __arch_actv_rpc_stksz_alignment(struct iovmgr_ops_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_iov_attach_device(rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_iov_attach_device(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct iovmgr_ops_arg arg)
{
	const unsigned long __callno = __sysmgr_method_iov_attach_device;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct iovmgr_ops_arg), __arch_actv_rpc_stksz_alignment(struct iovmgr_ops_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_iov_attach_device(__rref, rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_iov_attach_device(struct iovmgr_ops_arg arg)
{
	return actvxactcall_hmcall_iov_attach_device(false, false, arg);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_iov_attach_device(rref_t __rref, struct iovmgr_ops_arg arg)
{
	return actvxactcapcall_hmcall_iov_attach_device(false, false, __rref, arg);
}

extern int __actvcall_hmcall_iov_vspace_bind(unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg);


extern int __actvcapcall_hmcall_iov_vspace_bind(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_iov_vspace_bind(bool is_xact_fwd, bool is_xact_allow_refwd, struct iovmgr_ops_arg arg)
{
	const unsigned long __callno = __sysmgr_method_iov_vspace_bind;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct iovmgr_ops_arg), __arch_actv_rpc_stksz_alignment(struct iovmgr_ops_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_iov_vspace_bind(rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_iov_vspace_bind(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct iovmgr_ops_arg arg)
{
	const unsigned long __callno = __sysmgr_method_iov_vspace_bind;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct iovmgr_ops_arg), __arch_actv_rpc_stksz_alignment(struct iovmgr_ops_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_iov_vspace_bind(__rref, rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_iov_vspace_bind(struct iovmgr_ops_arg arg)
{
	return actvxactcall_hmcall_iov_vspace_bind(false, false, arg);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_iov_vspace_bind(rref_t __rref, struct iovmgr_ops_arg arg)
{
	return actvxactcapcall_hmcall_iov_vspace_bind(false, false, __rref, arg);
}

extern int __actvcall_hmcall_iov_vspace_unbind(unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg);


extern int __actvcapcall_hmcall_iov_vspace_unbind(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_iov_vspace_unbind(bool is_xact_fwd, bool is_xact_allow_refwd, struct iovmgr_ops_arg arg)
{
	const unsigned long __callno = __sysmgr_method_iov_vspace_unbind;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct iovmgr_ops_arg), __arch_actv_rpc_stksz_alignment(struct iovmgr_ops_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_iov_vspace_unbind(rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_iov_vspace_unbind(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct iovmgr_ops_arg arg)
{
	const unsigned long __callno = __sysmgr_method_iov_vspace_unbind;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct iovmgr_ops_arg), __arch_actv_rpc_stksz_alignment(struct iovmgr_ops_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_iov_vspace_unbind(__rref, rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_iov_vspace_unbind(struct iovmgr_ops_arg arg)
{
	return actvxactcall_hmcall_iov_vspace_unbind(false, false, arg);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_iov_vspace_unbind(rref_t __rref, struct iovmgr_ops_arg arg)
{
	return actvxactcapcall_hmcall_iov_vspace_unbind(false, false, __rref, arg);
}

extern int __actvcall_hmcall_resmgr_mount(unsigned long long __rpc_info, void *__buf, char *fsbuf, size_t size, struct hm_actv_buf path_buf);


extern int __actvcapcall_hmcall_resmgr_mount(rref_t __rref, unsigned long long __rpc_info, void *__buf, char *fsbuf, size_t size, struct hm_actv_buf path_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_resmgr_mount(bool is_xact_fwd, bool is_xact_allow_refwd, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	const unsigned long __callno = __sysmgr_method_resmgr_mount;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_resmgr_mount(rpc_info, NULL, fsbuf, size, path_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_resmgr_mount(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	const unsigned long __callno = __sysmgr_method_resmgr_mount;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_resmgr_mount(__rref, rpc_info, NULL, fsbuf, size, path_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_resmgr_mount(char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	return actvxactcall_hmcall_resmgr_mount(false, false, fsbuf, size, path_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_resmgr_mount(rref_t __rref, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	return actvxactcapcall_hmcall_resmgr_mount(false, false, __rref, fsbuf, size, path_buf);
}

extern int __actvcall_hmcall_resmgr_umount(unsigned long long __rpc_info, void *__buf, struct hm_actv_buf path_buf);


extern int __actvcapcall_hmcall_resmgr_umount(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_actv_buf path_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_resmgr_umount(bool is_xact_fwd, bool is_xact_allow_refwd, struct hm_actv_buf path_buf)
{
	const unsigned long __callno = __sysmgr_method_resmgr_umount;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_resmgr_umount(rpc_info, NULL, path_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_resmgr_umount(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct hm_actv_buf path_buf)
{
	const unsigned long __callno = __sysmgr_method_resmgr_umount;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_resmgr_umount(__rref, rpc_info, NULL, path_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_resmgr_umount(struct hm_actv_buf path_buf)
{
	return actvxactcall_hmcall_resmgr_umount(false, false, path_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_resmgr_umount(rref_t __rref, struct hm_actv_buf path_buf)
{
	return actvxactcapcall_hmcall_resmgr_umount(false, false, __rref, path_buf);
}

extern int __actvcall_hmcall_resmgr_create(unsigned long long __rpc_info, void *__buf, char *fsbuf, size_t size, struct hm_actv_buf path_buf);


extern int __actvcapcall_hmcall_resmgr_create(rref_t __rref, unsigned long long __rpc_info, void *__buf, char *fsbuf, size_t size, struct hm_actv_buf path_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_resmgr_create(bool is_xact_fwd, bool is_xact_allow_refwd, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	const unsigned long __callno = __sysmgr_method_resmgr_create;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_resmgr_create(rpc_info, NULL, fsbuf, size, path_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_resmgr_create(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	const unsigned long __callno = __sysmgr_method_resmgr_create;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_resmgr_create(__rref, rpc_info, NULL, fsbuf, size, path_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_resmgr_create(char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	return actvxactcall_hmcall_resmgr_create(false, false, fsbuf, size, path_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_resmgr_create(rref_t __rref, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	return actvxactcapcall_hmcall_resmgr_create(false, false, __rref, fsbuf, size, path_buf);
}

extern int __actvcall_hmcall_resmgr_remove(unsigned long long __rpc_info, void *__buf, struct hm_actv_buf path_buf);


extern int __actvcapcall_hmcall_resmgr_remove(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_actv_buf path_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_resmgr_remove(bool is_xact_fwd, bool is_xact_allow_refwd, struct hm_actv_buf path_buf)
{
	const unsigned long __callno = __sysmgr_method_resmgr_remove;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_resmgr_remove(rpc_info, NULL, path_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_resmgr_remove(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct hm_actv_buf path_buf)
{
	const unsigned long __callno = __sysmgr_method_resmgr_remove;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_resmgr_remove(__rref, rpc_info, NULL, path_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_resmgr_remove(struct hm_actv_buf path_buf)
{
	return actvxactcall_hmcall_resmgr_remove(false, false, path_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_resmgr_remove(rref_t __rref, struct hm_actv_buf path_buf)
{
	return actvxactcapcall_hmcall_resmgr_remove(false, false, __rref, path_buf);
}

extern int __actvcall_hmcall_resmgr_read(unsigned long long __rpc_info, void *__buf, char *fsbuf, size_t size, struct hm_actv_buf path_buf);


extern int __actvcapcall_hmcall_resmgr_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, char *fsbuf, size_t size, struct hm_actv_buf path_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_resmgr_read(bool is_xact_fwd, bool is_xact_allow_refwd, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	const unsigned long __callno = __sysmgr_method_resmgr_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_resmgr_read(rpc_info, NULL, fsbuf, size, path_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_resmgr_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	const unsigned long __callno = __sysmgr_method_resmgr_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(char*), __arch_actv_rpc_stksz_alignment(char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_resmgr_read(__rref, rpc_info, NULL, fsbuf, size, path_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_resmgr_read(char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	return actvxactcall_hmcall_resmgr_read(false, false, fsbuf, size, path_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_resmgr_read(rref_t __rref, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	return actvxactcapcall_hmcall_resmgr_read(false, false, __rref, fsbuf, size, path_buf);
}

extern int __actvcall_hmcall_resmgr_write(unsigned long long __rpc_info, void *__buf, const char *fsbuf, size_t size, struct hm_actv_buf path_buf);


extern int __actvcapcall_hmcall_resmgr_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, const char *fsbuf, size_t size, struct hm_actv_buf path_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_resmgr_write(bool is_xact_fwd, bool is_xact_allow_refwd, const char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	const unsigned long __callno = __sysmgr_method_resmgr_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_resmgr_write(rpc_info, NULL, fsbuf, size, path_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_resmgr_write(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	const unsigned long __callno = __sysmgr_method_resmgr_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_resmgr_write(__rref, rpc_info, NULL, fsbuf, size, path_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_resmgr_write(const char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	return actvxactcall_hmcall_resmgr_write(false, false, fsbuf, size, path_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_resmgr_write(rref_t __rref, const char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	return actvxactcapcall_hmcall_resmgr_write(false, false, __rref, fsbuf, size, path_buf);
}

extern int __actvcall_hmcall_resmgr_mem_mapping(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_resmgr_mem_mapping(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_resmgr_mem_mapping(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_resmgr_mem_mapping *__ret)
{
	const unsigned long __callno = __sysmgr_method_resmgr_mem_mapping;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_resmgr_mem_mapping(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_resmgr_mem_mapping(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_resmgr_mem_mapping *__ret)
{
	const unsigned long __callno = __sysmgr_method_resmgr_mem_mapping;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_resmgr_mem_mapping(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_resmgr_mem_mapping(struct __actvret_hmcall_resmgr_mem_mapping *__ret)
{
	return actvxactcall_hmcall_resmgr_mem_mapping(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_resmgr_mem_mapping(rref_t __rref, struct __actvret_hmcall_resmgr_mem_mapping *__ret)
{
	return actvxactcapcall_hmcall_resmgr_mem_mapping(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_resmgr_mem_fs_charge(unsigned long long __rpc_info, void *__buf, unsigned int memcg_id, unsigned int nr_pages);


extern int __actvcapcall_hmcall_resmgr_mem_fs_charge(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int memcg_id, unsigned int nr_pages);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_resmgr_mem_fs_charge(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int memcg_id, unsigned int nr_pages, struct __actvret_hmcall_resmgr_mem_fs_charge *__ret)
{
	const unsigned long __callno = __sysmgr_method_resmgr_mem_fs_charge;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_resmgr_mem_fs_charge(rpc_info, __ret, memcg_id, nr_pages);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_resmgr_mem_fs_charge(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int memcg_id, unsigned int nr_pages, struct __actvret_hmcall_resmgr_mem_fs_charge *__ret)
{
	const unsigned long __callno = __sysmgr_method_resmgr_mem_fs_charge;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_resmgr_mem_fs_charge(__rref, rpc_info, __ret, memcg_id, nr_pages);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_resmgr_mem_fs_charge(unsigned int memcg_id, unsigned int nr_pages, struct __actvret_hmcall_resmgr_mem_fs_charge *__ret)
{
	return actvxactcall_hmcall_resmgr_mem_fs_charge(false, false, memcg_id, nr_pages, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_resmgr_mem_fs_charge(rref_t __rref, unsigned int memcg_id, unsigned int nr_pages, struct __actvret_hmcall_resmgr_mem_fs_charge *__ret)
{
	return actvxactcapcall_hmcall_resmgr_mem_fs_charge(false, false, __rref, memcg_id, nr_pages, __ret);
}

extern int __actvcall_hmcall_resmgr_mem_fs_uncharge(unsigned long long __rpc_info, void *__buf, unsigned int memcg_id, unsigned int nr_pages);


extern int __actvcapcall_hmcall_resmgr_mem_fs_uncharge(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int memcg_id, unsigned int nr_pages);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_resmgr_mem_fs_uncharge(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int memcg_id, unsigned int nr_pages)
{
	const unsigned long __callno = __sysmgr_method_resmgr_mem_fs_uncharge;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_resmgr_mem_fs_uncharge(rpc_info, NULL, memcg_id, nr_pages);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_resmgr_mem_fs_uncharge(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int memcg_id, unsigned int nr_pages)
{
	const unsigned long __callno = __sysmgr_method_resmgr_mem_fs_uncharge;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_resmgr_mem_fs_uncharge(__rref, rpc_info, NULL, memcg_id, nr_pages);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_resmgr_mem_fs_uncharge(unsigned int memcg_id, unsigned int nr_pages)
{
	return actvxactcall_hmcall_resmgr_mem_fs_uncharge(false, false, memcg_id, nr_pages);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_resmgr_mem_fs_uncharge(rref_t __rref, unsigned int memcg_id, unsigned int nr_pages)
{
	return actvxactcapcall_hmcall_resmgr_mem_fs_uncharge(false, false, __rref, memcg_id, nr_pages);
}

extern int __actvcall_hmcall_module_grant_ctrl(unsigned long long __rpc_info, void *__buf, struct module_grant_arg arg);


extern int __actvcapcall_hmcall_module_grant_ctrl(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct module_grant_arg arg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_module_grant_ctrl(bool is_xact_fwd, bool is_xact_allow_refwd, struct module_grant_arg arg)
{
	const unsigned long __callno = __sysmgr_method_module_grant_ctrl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct module_grant_arg), __arch_actv_rpc_stksz_alignment(struct module_grant_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_module_grant_ctrl(rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_module_grant_ctrl(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct module_grant_arg arg)
{
	const unsigned long __callno = __sysmgr_method_module_grant_ctrl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct module_grant_arg), __arch_actv_rpc_stksz_alignment(struct module_grant_arg));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_module_grant_ctrl(__rref, rpc_info, NULL, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_module_grant_ctrl(struct module_grant_arg arg)
{
	return actvxactcall_hmcall_module_grant_ctrl(false, false, arg);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_module_grant_ctrl(rref_t __rref, struct module_grant_arg arg)
{
	return actvxactcapcall_hmcall_module_grant_ctrl(false, false, __rref, arg);
}

extern int __actvcall_hmcall_entropy_read(unsigned long long __rpc_info, void *__buf, unsigned int num);


extern int __actvcapcall_hmcall_entropy_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int num);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_entropy_read(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int num, struct __actvret_hmcall_entropy_read *__ret)
{
	const unsigned long __callno = __sysmgr_method_entropy_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_entropy_read(rpc_info, __ret, num);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_entropy_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int num, struct __actvret_hmcall_entropy_read *__ret)
{
	const unsigned long __callno = __sysmgr_method_entropy_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_entropy_read(__rref, rpc_info, __ret, num);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_entropy_read(unsigned int num, struct __actvret_hmcall_entropy_read *__ret)
{
	return actvxactcall_hmcall_entropy_read(false, false, num, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_entropy_read(rref_t __rref, unsigned int num, struct __actvret_hmcall_entropy_read *__ret)
{
	return actvxactcapcall_hmcall_entropy_read(false, false, __rref, num, __ret);
}

extern int __actvcall_hmcall_kbox_query_device(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_kbox_query_device(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_kbox_query_device(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_kbox_query_device *__ret)
{
	const unsigned long __callno = __sysmgr_method_kbox_query_device;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_kbox_query_device(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_kbox_query_device(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_kbox_query_device *__ret)
{
	const unsigned long __callno = __sysmgr_method_kbox_query_device;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_kbox_query_device(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_kbox_query_device(struct __actvret_hmcall_kbox_query_device *__ret)
{
	return actvxactcall_hmcall_kbox_query_device(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_kbox_query_device(rref_t __rref, struct __actvret_hmcall_kbox_query_device *__ret)
{
	return actvxactcapcall_hmcall_kbox_query_device(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_kbox_query_region(unsigned long long __rpc_info, void *__buf, unsigned int index);


extern int __actvcapcall_hmcall_kbox_query_region(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int index);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_kbox_query_region(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int index, struct __actvret_hmcall_kbox_query_region *__ret)
{
	const unsigned long __callno = __sysmgr_method_kbox_query_region;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_kbox_query_region(rpc_info, __ret, index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_kbox_query_region(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int index, struct __actvret_hmcall_kbox_query_region *__ret)
{
	const unsigned long __callno = __sysmgr_method_kbox_query_region;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_kbox_query_region(__rref, rpc_info, __ret, index);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_kbox_query_region(unsigned int index, struct __actvret_hmcall_kbox_query_region *__ret)
{
	return actvxactcall_hmcall_kbox_query_region(false, false, index, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_kbox_query_region(rref_t __rref, unsigned int index, struct __actvret_hmcall_kbox_query_region *__ret)
{
	return actvxactcapcall_hmcall_kbox_query_region(false, false, __rref, index, __ret);
}

extern int __actvcall_hmcall_kbox_open_region(unsigned long long __rpc_info, void *__buf, struct kbox_region_name name);


extern int __actvcapcall_hmcall_kbox_open_region(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct kbox_region_name name);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_kbox_open_region(bool is_xact_fwd, bool is_xact_allow_refwd, struct kbox_region_name name, struct __actvret_hmcall_kbox_open_region *__ret)
{
	const unsigned long __callno = __sysmgr_method_kbox_open_region;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct kbox_region_name), __arch_actv_rpc_stksz_alignment(struct kbox_region_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_kbox_open_region(rpc_info, __ret, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_kbox_open_region(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct kbox_region_name name, struct __actvret_hmcall_kbox_open_region *__ret)
{
	const unsigned long __callno = __sysmgr_method_kbox_open_region;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct kbox_region_name), __arch_actv_rpc_stksz_alignment(struct kbox_region_name));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_kbox_open_region(__rref, rpc_info, __ret, name);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_kbox_open_region(struct kbox_region_name name, struct __actvret_hmcall_kbox_open_region *__ret)
{
	return actvxactcall_hmcall_kbox_open_region(false, false, name, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_kbox_open_region(rref_t __rref, struct kbox_region_name name, struct __actvret_hmcall_kbox_open_region *__ret)
{
	return actvxactcapcall_hmcall_kbox_open_region(false, false, __rref, name, __ret);
}

extern int __actvcall_hmcall_kbox_close_region(unsigned long long __rpc_info, void *__buf, struct kbox_region_name name, unsigned long long vaddr, unsigned long long size);


extern int __actvcapcall_hmcall_kbox_close_region(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct kbox_region_name name, unsigned long long vaddr, unsigned long long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_kbox_close_region(bool is_xact_fwd, bool is_xact_allow_refwd, struct kbox_region_name name, unsigned long long vaddr, unsigned long long size)
{
	const unsigned long __callno = __sysmgr_method_kbox_close_region;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct kbox_region_name), __arch_actv_rpc_stksz_alignment(struct kbox_region_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_kbox_close_region(rpc_info, NULL, name, vaddr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_kbox_close_region(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct kbox_region_name name, unsigned long long vaddr, unsigned long long size)
{
	const unsigned long __callno = __sysmgr_method_kbox_close_region;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct kbox_region_name), __arch_actv_rpc_stksz_alignment(struct kbox_region_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_kbox_close_region(__rref, rpc_info, NULL, name, vaddr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_kbox_close_region(struct kbox_region_name name, unsigned long long vaddr, unsigned long long size)
{
	return actvxactcall_hmcall_kbox_close_region(false, false, name, vaddr, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_kbox_close_region(rref_t __rref, struct kbox_region_name name, unsigned long long vaddr, unsigned long long size)
{
	return actvxactcapcall_hmcall_kbox_close_region(false, false, __rref, name, vaddr, size);
}

extern int __actvcall_hmcall_kbox_create_region(unsigned long long __rpc_info, void *__buf, struct kbox_region_name name, unsigned long long size);


extern int __actvcapcall_hmcall_kbox_create_region(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct kbox_region_name name, unsigned long long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_kbox_create_region(bool is_xact_fwd, bool is_xact_allow_refwd, struct kbox_region_name name, unsigned long long size)
{
	const unsigned long __callno = __sysmgr_method_kbox_create_region;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct kbox_region_name), __arch_actv_rpc_stksz_alignment(struct kbox_region_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_kbox_create_region(rpc_info, NULL, name, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_kbox_create_region(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct kbox_region_name name, unsigned long long size)
{
	const unsigned long __callno = __sysmgr_method_kbox_create_region;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct kbox_region_name), __arch_actv_rpc_stksz_alignment(struct kbox_region_name));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_kbox_create_region(__rref, rpc_info, NULL, name, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_kbox_create_region(struct kbox_region_name name, unsigned long long size)
{
	return actvxactcall_hmcall_kbox_create_region(false, false, name, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_kbox_create_region(rref_t __rref, struct kbox_region_name name, unsigned long long size)
{
	return actvxactcapcall_hmcall_kbox_create_region(false, false, __rref, name, size);
}

extern int __actvcall_hmcall_kbox_delete_dynamic_regions(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_kbox_delete_dynamic_regions(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_kbox_delete_dynamic_regions(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_kbox_delete_dynamic_regions;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_kbox_delete_dynamic_regions(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_kbox_delete_dynamic_regions(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_kbox_delete_dynamic_regions;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_kbox_delete_dynamic_regions(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_kbox_delete_dynamic_regions(void)
{
	return actvxactcall_hmcall_kbox_delete_dynamic_regions(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_kbox_delete_dynamic_regions(rref_t __rref)
{
	return actvxactcapcall_hmcall_kbox_delete_dynamic_regions(false, false, __rref);
}

extern int __actvcall_hmcall_dump_thread(unsigned long long __rpc_info, void *__buf, pid_t tid, unsigned int flags, enum dump_output_type output_type, struct bunch_ipc_attr attr);


extern int __actvcapcall_hmcall_dump_thread(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t tid, unsigned int flags, enum dump_output_type output_type, struct bunch_ipc_attr attr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_dump_thread(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t tid, unsigned int flags, enum dump_output_type output_type, struct bunch_ipc_attr attr)
{
	const unsigned long __callno = __sysmgr_method_dump_thread;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum dump_output_type), __arch_actv_rpc_stksz_alignment(enum dump_output_type));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct bunch_ipc_attr), __arch_actv_rpc_stksz_alignment(struct bunch_ipc_attr));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_dump_thread(rpc_info, NULL, tid, flags, output_type, attr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_dump_thread(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t tid, unsigned int flags, enum dump_output_type output_type, struct bunch_ipc_attr attr)
{
	const unsigned long __callno = __sysmgr_method_dump_thread;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum dump_output_type), __arch_actv_rpc_stksz_alignment(enum dump_output_type));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct bunch_ipc_attr), __arch_actv_rpc_stksz_alignment(struct bunch_ipc_attr));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_dump_thread(__rref, rpc_info, NULL, tid, flags, output_type, attr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_dump_thread(pid_t tid, unsigned int flags, enum dump_output_type output_type, struct bunch_ipc_attr attr)
{
	return actvxactcall_hmcall_dump_thread(false, false, tid, flags, output_type, attr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_dump_thread(rref_t __rref, pid_t tid, unsigned int flags, enum dump_output_type output_type, struct bunch_ipc_attr attr)
{
	return actvxactcapcall_hmcall_dump_thread(false, false, __rref, tid, flags, output_type, attr);
}

extern int __actvcall_hmcall_linuxemu_install_handler(unsigned long long __rpc_info, void *__buf, unsigned long pc, unsigned long sp);


extern int __actvcapcall_hmcall_linuxemu_install_handler(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long pc, unsigned long sp);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_linuxemu_install_handler(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long pc, unsigned long sp)
{
	const unsigned long __callno = __sysmgr_method_linuxemu_install_handler;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_linuxemu_install_handler(rpc_info, NULL, pc, sp);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_linuxemu_install_handler(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long pc, unsigned long sp)
{
	const unsigned long __callno = __sysmgr_method_linuxemu_install_handler;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_linuxemu_install_handler(__rref, rpc_info, NULL, pc, sp);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_linuxemu_install_handler(unsigned long pc, unsigned long sp)
{
	return actvxactcall_hmcall_linuxemu_install_handler(false, false, pc, sp);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_linuxemu_install_handler(rref_t __rref, unsigned long pc, unsigned long sp)
{
	return actvxactcapcall_hmcall_linuxemu_install_handler(false, false, __rref, pc, sp);
}

extern int __actvcall_hmcall_linuxemu_set_callsite(unsigned long long __rpc_info, void *__buf, unsigned long pc, unsigned long sp);


extern int __actvcapcall_hmcall_linuxemu_set_callsite(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long pc, unsigned long sp);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_linuxemu_set_callsite(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long pc, unsigned long sp)
{
	const unsigned long __callno = __sysmgr_method_linuxemu_set_callsite;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_linuxemu_set_callsite(rpc_info, NULL, pc, sp);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_linuxemu_set_callsite(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long pc, unsigned long sp)
{
	const unsigned long __callno = __sysmgr_method_linuxemu_set_callsite;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_linuxemu_set_callsite(__rref, rpc_info, NULL, pc, sp);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_linuxemu_set_callsite(unsigned long pc, unsigned long sp)
{
	return actvxactcall_hmcall_linuxemu_set_callsite(false, false, pc, sp);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_linuxemu_set_callsite(rref_t __rref, unsigned long pc, unsigned long sp)
{
	return actvxactcapcall_hmcall_linuxemu_set_callsite(false, false, __rref, pc, sp);
}

extern int __actvcall_hmcall_livepatch_register_target(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_livepatch_register_target(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_livepatch_register_target(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_livepatch_register_target;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_livepatch_register_target(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_livepatch_register_target(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_livepatch_register_target;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_livepatch_register_target(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_livepatch_register_target(void)
{
	return actvxactcall_hmcall_livepatch_register_target(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_livepatch_register_target(rref_t __rref)
{
	return actvxactcapcall_hmcall_livepatch_register_target(false, false, __rref);
}

extern int __actvcall_hmcall_livepatch_unregister_target(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_livepatch_unregister_target(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_livepatch_unregister_target(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_livepatch_unregister_target;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_livepatch_unregister_target(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_livepatch_unregister_target(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_livepatch_unregister_target;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_livepatch_unregister_target(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_livepatch_unregister_target(void)
{
	return actvxactcall_hmcall_livepatch_unregister_target(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_livepatch_unregister_target(rref_t __rref)
{
	return actvxactcapcall_hmcall_livepatch_unregister_target(false, false, __rref);
}

extern int __actvcall_hmcall_livepatch_load(unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch, unsigned long long content, unsigned long long content_sz, unsigned long long signature, unsigned long long signature_sz);


extern int __actvcapcall_hmcall_livepatch_load(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch, unsigned long long content, unsigned long long content_sz, unsigned long long signature, unsigned long long signature_sz);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_livepatch_load(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, struct livepatch_string patch, unsigned long long content, unsigned long long content_sz, unsigned long long signature, unsigned long long signature_sz)
{
	const unsigned long __callno = __sysmgr_method_livepatch_load;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct livepatch_string), __arch_actv_rpc_stksz_alignment(struct livepatch_string));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_livepatch_load(rpc_info, NULL, pid, patch, content, content_sz, signature, signature_sz);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_livepatch_load(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, struct livepatch_string patch, unsigned long long content, unsigned long long content_sz, unsigned long long signature, unsigned long long signature_sz)
{
	const unsigned long __callno = __sysmgr_method_livepatch_load;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct livepatch_string), __arch_actv_rpc_stksz_alignment(struct livepatch_string));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_livepatch_load(__rref, rpc_info, NULL, pid, patch, content, content_sz, signature, signature_sz);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_livepatch_load(pid_t pid, struct livepatch_string patch, unsigned long long content, unsigned long long content_sz, unsigned long long signature, unsigned long long signature_sz)
{
	return actvxactcall_hmcall_livepatch_load(false, false, pid, patch, content, content_sz, signature, signature_sz);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_livepatch_load(rref_t __rref, pid_t pid, struct livepatch_string patch, unsigned long long content, unsigned long long content_sz, unsigned long long signature, unsigned long long signature_sz)
{
	return actvxactcapcall_hmcall_livepatch_load(false, false, __rref, pid, patch, content, content_sz, signature, signature_sz);
}

extern int __actvcall_hmcall_livepatch_unload(unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch);


extern int __actvcapcall_hmcall_livepatch_unload(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_livepatch_unload(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, struct livepatch_string patch)
{
	const unsigned long __callno = __sysmgr_method_livepatch_unload;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct livepatch_string), __arch_actv_rpc_stksz_alignment(struct livepatch_string));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_livepatch_unload(rpc_info, NULL, pid, patch);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_livepatch_unload(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, struct livepatch_string patch)
{
	const unsigned long __callno = __sysmgr_method_livepatch_unload;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct livepatch_string), __arch_actv_rpc_stksz_alignment(struct livepatch_string));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_livepatch_unload(__rref, rpc_info, NULL, pid, patch);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_livepatch_unload(pid_t pid, struct livepatch_string patch)
{
	return actvxactcall_hmcall_livepatch_unload(false, false, pid, patch);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_livepatch_unload(rref_t __rref, pid_t pid, struct livepatch_string patch)
{
	return actvxactcapcall_hmcall_livepatch_unload(false, false, __rref, pid, patch);
}

extern int __actvcall_hmcall_livepatch_enable(unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch);


extern int __actvcapcall_hmcall_livepatch_enable(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_livepatch_enable(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, struct livepatch_string patch)
{
	const unsigned long __callno = __sysmgr_method_livepatch_enable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct livepatch_string), __arch_actv_rpc_stksz_alignment(struct livepatch_string));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_livepatch_enable(rpc_info, NULL, pid, patch);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_livepatch_enable(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, struct livepatch_string patch)
{
	const unsigned long __callno = __sysmgr_method_livepatch_enable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct livepatch_string), __arch_actv_rpc_stksz_alignment(struct livepatch_string));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_livepatch_enable(__rref, rpc_info, NULL, pid, patch);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_livepatch_enable(pid_t pid, struct livepatch_string patch)
{
	return actvxactcall_hmcall_livepatch_enable(false, false, pid, patch);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_livepatch_enable(rref_t __rref, pid_t pid, struct livepatch_string patch)
{
	return actvxactcapcall_hmcall_livepatch_enable(false, false, __rref, pid, patch);
}

extern int __actvcall_hmcall_livepatch_disable(unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch);


extern int __actvcapcall_hmcall_livepatch_disable(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_livepatch_disable(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, struct livepatch_string patch)
{
	const unsigned long __callno = __sysmgr_method_livepatch_disable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct livepatch_string), __arch_actv_rpc_stksz_alignment(struct livepatch_string));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_livepatch_disable(rpc_info, NULL, pid, patch);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_livepatch_disable(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, struct livepatch_string patch)
{
	const unsigned long __callno = __sysmgr_method_livepatch_disable;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct livepatch_string), __arch_actv_rpc_stksz_alignment(struct livepatch_string));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_livepatch_disable(__rref, rpc_info, NULL, pid, patch);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_livepatch_disable(pid_t pid, struct livepatch_string patch)
{
	return actvxactcall_hmcall_livepatch_disable(false, false, pid, patch);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_livepatch_disable(rref_t __rref, pid_t pid, struct livepatch_string patch)
{
	return actvxactcapcall_hmcall_livepatch_disable(false, false, __rref, pid, patch);
}

extern int __actvcall_hmcall_livepatch_list(unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch);


extern int __actvcapcall_hmcall_livepatch_list(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_livepatch_list(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, struct livepatch_string patch)
{
	const unsigned long __callno = __sysmgr_method_livepatch_list;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct livepatch_string), __arch_actv_rpc_stksz_alignment(struct livepatch_string));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_livepatch_list(rpc_info, NULL, pid, patch);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_livepatch_list(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, struct livepatch_string patch)
{
	const unsigned long __callno = __sysmgr_method_livepatch_list;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct livepatch_string), __arch_actv_rpc_stksz_alignment(struct livepatch_string));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_livepatch_list(__rref, rpc_info, NULL, pid, patch);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_livepatch_list(pid_t pid, struct livepatch_string patch)
{
	return actvxactcall_hmcall_livepatch_list(false, false, pid, patch);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_livepatch_list(rref_t __rref, pid_t pid, struct livepatch_string patch)
{
	return actvxactcapcall_hmcall_livepatch_list(false, false, __rref, pid, patch);
}

extern int __actvcall_hmcall_livepatch_reserved(unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch);


extern int __actvcapcall_hmcall_livepatch_reserved(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_livepatch_reserved(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, struct livepatch_string patch)
{
	const unsigned long __callno = __sysmgr_method_livepatch_reserved;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct livepatch_string), __arch_actv_rpc_stksz_alignment(struct livepatch_string));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_livepatch_reserved(rpc_info, NULL, pid, patch);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_livepatch_reserved(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, struct livepatch_string patch)
{
	const unsigned long __callno = __sysmgr_method_livepatch_reserved;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct livepatch_string), __arch_actv_rpc_stksz_alignment(struct livepatch_string));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_livepatch_reserved(__rref, rpc_info, NULL, pid, patch);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_livepatch_reserved(pid_t pid, struct livepatch_string patch)
{
	return actvxactcall_hmcall_livepatch_reserved(false, false, pid, patch);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_livepatch_reserved(rref_t __rref, pid_t pid, struct livepatch_string patch)
{
	return actvxactcapcall_hmcall_livepatch_reserved(false, false, __rref, pid, patch);
}

extern int __actvcall_hmcall_perf_create_session(unsigned long long __rpc_info, void *__buf, unsigned int buffer_page_nr);


extern int __actvcapcall_hmcall_perf_create_session(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int buffer_page_nr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_perf_create_session(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int buffer_page_nr)
{
	const unsigned long __callno = __sysmgr_method_perf_create_session;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_perf_create_session(rpc_info, NULL, buffer_page_nr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_perf_create_session(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int buffer_page_nr)
{
	const unsigned long __callno = __sysmgr_method_perf_create_session;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_perf_create_session(__rref, rpc_info, NULL, buffer_page_nr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_perf_create_session(unsigned int buffer_page_nr)
{
	return actvxactcall_hmcall_perf_create_session(false, false, buffer_page_nr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_perf_create_session(rref_t __rref, unsigned int buffer_page_nr)
{
	return actvxactcapcall_hmcall_perf_create_session(false, false, __rref, buffer_page_nr);
}

extern int __actvcall_hmcall_perf_config_event(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long size);


extern int __actvcapcall_hmcall_perf_config_event(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_perf_config_event(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_perf_config_event;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_perf_config_event(rpc_info, NULL, addr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_perf_config_event(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_perf_config_event;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_perf_config_event(__rref, rpc_info, NULL, addr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_perf_config_event(const void *addr, unsigned long size)
{
	return actvxactcall_hmcall_perf_config_event(false, false, addr, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_perf_config_event(rref_t __rref, const void *addr, unsigned long size)
{
	return actvxactcapcall_hmcall_perf_config_event(false, false, __rref, addr, size);
}

extern int __actvcall_hmcall_perf_start_session(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_perf_start_session(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_perf_start_session(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_perf_start_session;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_perf_start_session(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_perf_start_session(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_perf_start_session;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_perf_start_session(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_perf_start_session(void)
{
	return actvxactcall_hmcall_perf_start_session(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_perf_start_session(rref_t __rref)
{
	return actvxactcapcall_hmcall_perf_start_session(false, false, __rref);
}

extern int __actvcall_hmcall_perf_stop_session(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_perf_stop_session(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_perf_stop_session(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_perf_stop_session;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_perf_stop_session(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_perf_stop_session(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_perf_stop_session;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_perf_stop_session(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_perf_stop_session(void)
{
	return actvxactcall_hmcall_perf_stop_session(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_perf_stop_session(rref_t __rref)
{
	return actvxactcapcall_hmcall_perf_stop_session(false, false, __rref);
}

extern int __actvcall_hmcall_perf_release_session(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_perf_release_session(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_perf_release_session(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_perf_release_session;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_perf_release_session(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_perf_release_session(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_perf_release_session;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_perf_release_session(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_perf_release_session(void)
{
	return actvxactcall_hmcall_perf_release_session(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_perf_release_session(rref_t __rref)
{
	return actvxactcapcall_hmcall_perf_release_session(false, false, __rref);
}

extern int __actvcall_hmcall_perf_read_data(unsigned long long __rpc_info, void *__buf, void *dst, unsigned int size);


extern int __actvcapcall_hmcall_perf_read_data(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *dst, unsigned int size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_perf_read_data(bool is_xact_fwd, bool is_xact_allow_refwd, void *dst, unsigned int size, struct __actvret_hmcall_perf_read_data *__ret)
{
	const unsigned long __callno = __sysmgr_method_perf_read_data;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_perf_read_data(rpc_info, __ret, dst, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_perf_read_data(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, void *dst, unsigned int size, struct __actvret_hmcall_perf_read_data *__ret)
{
	const unsigned long __callno = __sysmgr_method_perf_read_data;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_perf_read_data(__rref, rpc_info, __ret, dst, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_perf_read_data(void *dst, unsigned int size, struct __actvret_hmcall_perf_read_data *__ret)
{
	return actvxactcall_hmcall_perf_read_data(false, false, dst, size, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_perf_read_data(rref_t __rref, void *dst, unsigned int size, struct __actvret_hmcall_perf_read_data *__ret)
{
	return actvxactcapcall_hmcall_perf_read_data(false, false, __rref, dst, size, __ret);
}

extern int __actvcall_hmcall_hmspif_ksus_user_start_session(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_hmspif_ksus_user_start_session(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_hmspif_ksus_user_start_session(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_hmspif_ksus_user_start_session;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_hmspif_ksus_user_start_session(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_hmspif_ksus_user_start_session(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_hmspif_ksus_user_start_session;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_hmspif_ksus_user_start_session(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_hmspif_ksus_user_start_session(void)
{
	return actvxactcall_hmcall_hmspif_ksus_user_start_session(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_hmspif_ksus_user_start_session(rref_t __rref)
{
	return actvxactcapcall_hmcall_hmspif_ksus_user_start_session(false, false, __rref);
}

extern int __actvcall_hmcall_hmspif_ksus_user_create_region(unsigned long long __rpc_info, void *__buf, unsigned int chunkid, unsigned int prot, unsigned int page_order, bool percpu);


extern int __actvcapcall_hmcall_hmspif_ksus_user_create_region(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int chunkid, unsigned int prot, unsigned int page_order, bool percpu);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_hmspif_ksus_user_create_region(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned int chunkid, unsigned int prot, unsigned int page_order, bool percpu, struct __actvret_hmcall_hmspif_ksus_user_create_region *__ret)
{
	const unsigned long __callno = __sysmgr_method_hmspif_ksus_user_create_region;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_hmspif_ksus_user_create_region(rpc_info, __ret, chunkid, prot, page_order, percpu);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_hmspif_ksus_user_create_region(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned int chunkid, unsigned int prot, unsigned int page_order, bool percpu, struct __actvret_hmcall_hmspif_ksus_user_create_region *__ret)
{
	const unsigned long __callno = __sysmgr_method_hmspif_ksus_user_create_region;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(bool), __arch_actv_rpc_stksz_alignment(bool));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_hmspif_ksus_user_create_region(__rref, rpc_info, __ret, chunkid, prot, page_order, percpu);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_hmspif_ksus_user_create_region(unsigned int chunkid, unsigned int prot, unsigned int page_order, bool percpu, struct __actvret_hmcall_hmspif_ksus_user_create_region *__ret)
{
	return actvxactcall_hmcall_hmspif_ksus_user_create_region(false, false, chunkid, prot, page_order, percpu, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_hmspif_ksus_user_create_region(rref_t __rref, unsigned int chunkid, unsigned int prot, unsigned int page_order, bool percpu, struct __actvret_hmcall_hmspif_ksus_user_create_region *__ret)
{
	return actvxactcapcall_hmcall_hmspif_ksus_user_create_region(false, false, __rref, chunkid, prot, page_order, percpu, __ret);
}

extern int __actvcall_hmcall_hmspif_ksus_user_attach_process(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int chunkid, unsigned int prot, unsigned int inherit);


extern int __actvcapcall_hmcall_hmspif_ksus_user_attach_process(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int chunkid, unsigned int prot, unsigned int inherit);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_hmspif_ksus_user_attach_process(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, unsigned int chunkid, unsigned int prot, unsigned int inherit)
{
	const unsigned long __callno = __sysmgr_method_hmspif_ksus_user_attach_process;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_hmspif_ksus_user_attach_process(rpc_info, NULL, pid, chunkid, prot, inherit);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_hmspif_ksus_user_attach_process(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, unsigned int chunkid, unsigned int prot, unsigned int inherit)
{
	const unsigned long __callno = __sysmgr_method_hmspif_ksus_user_attach_process;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_hmspif_ksus_user_attach_process(__rref, rpc_info, NULL, pid, chunkid, prot, inherit);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_hmspif_ksus_user_attach_process(pid_t pid, unsigned int chunkid, unsigned int prot, unsigned int inherit)
{
	return actvxactcall_hmcall_hmspif_ksus_user_attach_process(false, false, pid, chunkid, prot, inherit);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_hmspif_ksus_user_attach_process(rref_t __rref, pid_t pid, unsigned int chunkid, unsigned int prot, unsigned int inherit)
{
	return actvxactcapcall_hmcall_hmspif_ksus_user_attach_process(false, false, __rref, pid, chunkid, prot, inherit);
}

extern int __actvcall_hmcall_hmspif_ksus_user_finish_session(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_hmspif_ksus_user_finish_session(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_hmspif_ksus_user_finish_session(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_hmspif_ksus_user_finish_session;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_hmspif_ksus_user_finish_session(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_hmspif_ksus_user_finish_session(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_hmspif_ksus_user_finish_session;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_hmspif_ksus_user_finish_session(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_hmspif_ksus_user_finish_session(void)
{
	return actvxactcall_hmcall_hmspif_ksus_user_finish_session(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_hmspif_ksus_user_finish_session(rref_t __rref)
{
	return actvxactcapcall_hmcall_hmspif_ksus_user_finish_session(false, false, __rref);
}

extern int __actvcall_hmcall_hmspif_paju_user_cmd(unsigned long long __rpc_info, void *__buf, pid_t pid, const char *dso_name, unsigned int dso_namesize, const char *section_name, unsigned int seciton_namesize, unsigned int paju_index, unsigned int cmd, unsigned int *status);


extern int __actvcapcall_hmcall_hmspif_paju_user_cmd(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, const char *dso_name, unsigned int dso_namesize, const char *section_name, unsigned int seciton_namesize, unsigned int paju_index, unsigned int cmd, unsigned int *status);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_hmspif_paju_user_cmd(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid, const char *dso_name, unsigned int dso_namesize, const char *section_name, unsigned int seciton_namesize, unsigned int paju_index, unsigned int cmd, unsigned int *status)
{
	const unsigned long __callno = __sysmgr_method_hmspif_paju_user_cmd;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int*), __arch_actv_rpc_stksz_alignment(unsigned int*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_hmspif_paju_user_cmd(rpc_info, NULL, pid, dso_name, dso_namesize, section_name, seciton_namesize, paju_index, cmd, status);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_hmspif_paju_user_cmd(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid, const char *dso_name, unsigned int dso_namesize, const char *section_name, unsigned int seciton_namesize, unsigned int paju_index, unsigned int cmd, unsigned int *status)
{
	const unsigned long __callno = __sysmgr_method_hmspif_paju_user_cmd;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int*), __arch_actv_rpc_stksz_alignment(unsigned int*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_hmspif_paju_user_cmd(__rref, rpc_info, NULL, pid, dso_name, dso_namesize, section_name, seciton_namesize, paju_index, cmd, status);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_hmspif_paju_user_cmd(pid_t pid, const char *dso_name, unsigned int dso_namesize, const char *section_name, unsigned int seciton_namesize, unsigned int paju_index, unsigned int cmd, unsigned int *status)
{
	return actvxactcall_hmcall_hmspif_paju_user_cmd(false, false, pid, dso_name, dso_namesize, section_name, seciton_namesize, paju_index, cmd, status);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_hmspif_paju_user_cmd(rref_t __rref, pid_t pid, const char *dso_name, unsigned int dso_namesize, const char *section_name, unsigned int seciton_namesize, unsigned int paju_index, unsigned int cmd, unsigned int *status)
{
	return actvxactcapcall_hmcall_hmspif_paju_user_cmd(false, false, __rref, pid, dso_name, dso_namesize, section_name, seciton_namesize, paju_index, cmd, status);
}

extern int __actvcall_hmcall_dynlog_query_by_tid(unsigned long long __rpc_info, void *__buf, pid_t tid);


extern int __actvcapcall_hmcall_dynlog_query_by_tid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t tid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_dynlog_query_by_tid(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t tid)
{
	const unsigned long __callno = __sysmgr_method_dynlog_query_by_tid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_dynlog_query_by_tid(rpc_info, NULL, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_dynlog_query_by_tid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t tid)
{
	const unsigned long __callno = __sysmgr_method_dynlog_query_by_tid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_dynlog_query_by_tid(__rref, rpc_info, NULL, tid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_dynlog_query_by_tid(pid_t tid)
{
	return actvxactcall_hmcall_dynlog_query_by_tid(false, false, tid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_dynlog_query_by_tid(rref_t __rref, pid_t tid)
{
	return actvxactcapcall_hmcall_dynlog_query_by_tid(false, false, __rref, tid);
}

extern int __actvcall_hmcall_dynlog_read_by_tid(unsigned long long __rpc_info, void *__buf, pid_t tid, unsigned long long rentry, int num);


extern int __actvcapcall_hmcall_dynlog_read_by_tid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t tid, unsigned long long rentry, int num);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_dynlog_read_by_tid(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t tid, unsigned long long rentry, int num)
{
	const unsigned long __callno = __sysmgr_method_dynlog_read_by_tid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_dynlog_read_by_tid(rpc_info, NULL, tid, rentry, num);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_dynlog_read_by_tid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t tid, unsigned long long rentry, int num)
{
	const unsigned long __callno = __sysmgr_method_dynlog_read_by_tid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_dynlog_read_by_tid(__rref, rpc_info, NULL, tid, rentry, num);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_dynlog_read_by_tid(pid_t tid, unsigned long long rentry, int num)
{
	return actvxactcall_hmcall_dynlog_read_by_tid(false, false, tid, rentry, num);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_dynlog_read_by_tid(rref_t __rref, pid_t tid, unsigned long long rentry, int num)
{
	return actvxactcapcall_hmcall_dynlog_read_by_tid(false, false, __rref, tid, rentry, num);
}

extern int __actvcall_hmcall_dynlog_update_by_tid(unsigned long long __rpc_info, void *__buf, pid_t tid, int index, int freq);


extern int __actvcapcall_hmcall_dynlog_update_by_tid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t tid, int index, int freq);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_dynlog_update_by_tid(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t tid, int index, int freq)
{
	const unsigned long __callno = __sysmgr_method_dynlog_update_by_tid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_dynlog_update_by_tid(rpc_info, NULL, tid, index, freq);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_dynlog_update_by_tid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t tid, int index, int freq)
{
	const unsigned long __callno = __sysmgr_method_dynlog_update_by_tid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_dynlog_update_by_tid(__rref, rpc_info, NULL, tid, index, freq);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_dynlog_update_by_tid(pid_t tid, int index, int freq)
{
	return actvxactcall_hmcall_dynlog_update_by_tid(false, false, tid, index, freq);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_dynlog_update_by_tid(rref_t __rref, pid_t tid, int index, int freq)
{
	return actvxactcapcall_hmcall_dynlog_update_by_tid(false, false, __rref, tid, index, freq);
}

extern int __actvcall_hmcall_dynlog_query_by_lspace(unsigned long long __rpc_info, void *__buf, struct dynlog_logspace lspace);


extern int __actvcapcall_hmcall_dynlog_query_by_lspace(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct dynlog_logspace lspace);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_dynlog_query_by_lspace(bool is_xact_fwd, bool is_xact_allow_refwd, struct dynlog_logspace lspace)
{
	const unsigned long __callno = __sysmgr_method_dynlog_query_by_lspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct dynlog_logspace), __arch_actv_rpc_stksz_alignment(struct dynlog_logspace));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_dynlog_query_by_lspace(rpc_info, NULL, lspace);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_dynlog_query_by_lspace(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct dynlog_logspace lspace)
{
	const unsigned long __callno = __sysmgr_method_dynlog_query_by_lspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct dynlog_logspace), __arch_actv_rpc_stksz_alignment(struct dynlog_logspace));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_dynlog_query_by_lspace(__rref, rpc_info, NULL, lspace);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_dynlog_query_by_lspace(struct dynlog_logspace lspace)
{
	return actvxactcall_hmcall_dynlog_query_by_lspace(false, false, lspace);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_dynlog_query_by_lspace(rref_t __rref, struct dynlog_logspace lspace)
{
	return actvxactcapcall_hmcall_dynlog_query_by_lspace(false, false, __rref, lspace);
}

extern int __actvcall_hmcall_dynlog_read_by_lspace(unsigned long long __rpc_info, void *__buf, struct dynlog_logspace lspace, unsigned long long rentry, int num);


extern int __actvcapcall_hmcall_dynlog_read_by_lspace(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct dynlog_logspace lspace, unsigned long long rentry, int num);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_dynlog_read_by_lspace(bool is_xact_fwd, bool is_xact_allow_refwd, struct dynlog_logspace lspace, unsigned long long rentry, int num)
{
	const unsigned long __callno = __sysmgr_method_dynlog_read_by_lspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct dynlog_logspace), __arch_actv_rpc_stksz_alignment(struct dynlog_logspace));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_dynlog_read_by_lspace(rpc_info, NULL, lspace, rentry, num);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_dynlog_read_by_lspace(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct dynlog_logspace lspace, unsigned long long rentry, int num)
{
	const unsigned long __callno = __sysmgr_method_dynlog_read_by_lspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct dynlog_logspace), __arch_actv_rpc_stksz_alignment(struct dynlog_logspace));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_dynlog_read_by_lspace(__rref, rpc_info, NULL, lspace, rentry, num);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_dynlog_read_by_lspace(struct dynlog_logspace lspace, unsigned long long rentry, int num)
{
	return actvxactcall_hmcall_dynlog_read_by_lspace(false, false, lspace, rentry, num);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_dynlog_read_by_lspace(rref_t __rref, struct dynlog_logspace lspace, unsigned long long rentry, int num)
{
	return actvxactcapcall_hmcall_dynlog_read_by_lspace(false, false, __rref, lspace, rentry, num);
}

extern int __actvcall_hmcall_dynlog_update_by_lspace(unsigned long long __rpc_info, void *__buf, struct dynlog_logspace lspace, int index, int freq);


extern int __actvcapcall_hmcall_dynlog_update_by_lspace(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct dynlog_logspace lspace, int index, int freq);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_dynlog_update_by_lspace(bool is_xact_fwd, bool is_xact_allow_refwd, struct dynlog_logspace lspace, int index, int freq)
{
	const unsigned long __callno = __sysmgr_method_dynlog_update_by_lspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct dynlog_logspace), __arch_actv_rpc_stksz_alignment(struct dynlog_logspace));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_dynlog_update_by_lspace(rpc_info, NULL, lspace, index, freq);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_dynlog_update_by_lspace(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct dynlog_logspace lspace, int index, int freq)
{
	const unsigned long __callno = __sysmgr_method_dynlog_update_by_lspace;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct dynlog_logspace), __arch_actv_rpc_stksz_alignment(struct dynlog_logspace));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_dynlog_update_by_lspace(__rref, rpc_info, NULL, lspace, index, freq);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_dynlog_update_by_lspace(struct dynlog_logspace lspace, int index, int freq)
{
	return actvxactcall_hmcall_dynlog_update_by_lspace(false, false, lspace, index, freq);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_dynlog_update_by_lspace(rref_t __rref, struct dynlog_logspace lspace, int index, int freq)
{
	return actvxactcapcall_hmcall_dynlog_update_by_lspace(false, false, __rref, lspace, index, freq);
}

extern int __actvcall_hmcall_sysfs_read(unsigned long long __rpc_info, void *__buf, struct hm_actv_buf actv_buf);


extern int __actvcapcall_hmcall_sysfs_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_actv_buf actv_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysfs_read(bool is_xact_fwd, bool is_xact_allow_refwd, struct hm_actv_buf actv_buf)
{
	const unsigned long __callno = __sysmgr_method_sysfs_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysfs_read(rpc_info, NULL, actv_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysfs_read(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct hm_actv_buf actv_buf)
{
	const unsigned long __callno = __sysmgr_method_sysfs_read;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysfs_read(__rref, rpc_info, NULL, actv_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysfs_read(struct hm_actv_buf actv_buf)
{
	return actvxactcall_hmcall_sysfs_read(false, false, actv_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysfs_read(rref_t __rref, struct hm_actv_buf actv_buf)
{
	return actvxactcapcall_hmcall_sysfs_read(false, false, __rref, actv_buf);
}

extern int __actvcall_hmcall_sysfs_write(unsigned long long __rpc_info, void *__buf, int tagid, unsigned long long ctx, unsigned long long pos, struct hm_actv_buf actv_buf);


extern int __actvcapcall_hmcall_sysfs_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tagid, unsigned long long ctx, unsigned long long pos, struct hm_actv_buf actv_buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_sysfs_write(bool is_xact_fwd, bool is_xact_allow_refwd, int tagid, unsigned long long ctx, unsigned long long pos, struct hm_actv_buf actv_buf)
{
	const unsigned long __callno = __sysmgr_method_sysfs_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_sysfs_write(rpc_info, NULL, tagid, ctx, pos, actv_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_sysfs_write(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tagid, unsigned long long ctx, unsigned long long pos, struct hm_actv_buf actv_buf)
{
	const unsigned long __callno = __sysmgr_method_sysfs_write;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(struct hm_actv_buf), __arch_actv_rpc_stksz_alignment(struct hm_actv_buf));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_sysfs_write(__rref, rpc_info, NULL, tagid, ctx, pos, actv_buf);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_sysfs_write(int tagid, unsigned long long ctx, unsigned long long pos, struct hm_actv_buf actv_buf)
{
	return actvxactcall_hmcall_sysfs_write(false, false, tagid, ctx, pos, actv_buf);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_sysfs_write(rref_t __rref, int tagid, unsigned long long ctx, unsigned long long pos, struct hm_actv_buf actv_buf)
{
	return actvxactcapcall_hmcall_sysfs_write(false, false, __rref, tagid, ctx, pos, actv_buf);
}

extern int __actvcall_hmcall_ftrace_modify_code(unsigned long long __rpc_info, void *__buf, uintptr_t addr, unsigned int insn);


extern int __actvcapcall_hmcall_ftrace_modify_code(rref_t __rref, unsigned long long __rpc_info, void *__buf, uintptr_t addr, unsigned int insn);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ftrace_modify_code(bool is_xact_fwd, bool is_xact_allow_refwd, uintptr_t addr, unsigned int insn)
{
	const unsigned long __callno = __sysmgr_method_ftrace_modify_code;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ftrace_modify_code(rpc_info, NULL, addr, insn);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ftrace_modify_code(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, uintptr_t addr, unsigned int insn)
{
	const unsigned long __callno = __sysmgr_method_ftrace_modify_code;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(uintptr_t), __arch_actv_rpc_stksz_alignment(uintptr_t));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ftrace_modify_code(__rref, rpc_info, NULL, addr, insn);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ftrace_modify_code(uintptr_t addr, unsigned int insn)
{
	return actvxactcall_hmcall_ftrace_modify_code(false, false, addr, insn);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ftrace_modify_code(rref_t __rref, uintptr_t addr, unsigned int insn)
{
	return actvxactcapcall_hmcall_ftrace_modify_code(false, false, __rref, addr, insn);
}

extern int __actvcall_hmcall_hmtrace_alloc_eid(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_hmtrace_alloc_eid(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_hmtrace_alloc_eid(bool is_xact_fwd, bool is_xact_allow_refwd, struct __actvret_hmcall_hmtrace_alloc_eid *__ret)
{
	const unsigned long __callno = __sysmgr_method_hmtrace_alloc_eid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_hmtrace_alloc_eid(rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_hmtrace_alloc_eid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, struct __actvret_hmcall_hmtrace_alloc_eid *__ret)
{
	const unsigned long __callno = __sysmgr_method_hmtrace_alloc_eid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_hmtrace_alloc_eid(__rref, rpc_info, __ret);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_hmtrace_alloc_eid(struct __actvret_hmcall_hmtrace_alloc_eid *__ret)
{
	return actvxactcall_hmcall_hmtrace_alloc_eid(false, false, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_hmtrace_alloc_eid(rref_t __rref, struct __actvret_hmcall_hmtrace_alloc_eid *__ret)
{
	return actvxactcapcall_hmcall_hmtrace_alloc_eid(false, false, __rref, __ret);
}

extern int __actvcall_hmcall_hmtrace_free_eid(unsigned long long __rpc_info, void *__buf, int eid);


extern int __actvcapcall_hmcall_hmtrace_free_eid(rref_t __rref, unsigned long long __rpc_info, void *__buf, int eid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_hmtrace_free_eid(bool is_xact_fwd, bool is_xact_allow_refwd, int eid)
{
	const unsigned long __callno = __sysmgr_method_hmtrace_free_eid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_hmtrace_free_eid(rpc_info, NULL, eid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_hmtrace_free_eid(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int eid)
{
	const unsigned long __callno = __sysmgr_method_hmtrace_free_eid;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_hmtrace_free_eid(__rref, rpc_info, NULL, eid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_hmtrace_free_eid(int eid)
{
	return actvxactcall_hmcall_hmtrace_free_eid(false, false, eid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_hmtrace_free_eid(rref_t __rref, int eid)
{
	return actvxactcapcall_hmcall_hmtrace_free_eid(false, false, __rref, eid);
}

extern int __actvcall_hmcall_inject_fault(unsigned long long __rpc_info, void *__buf, int type, int sub_type, const void *args, unsigned int length);


extern int __actvcapcall_hmcall_inject_fault(rref_t __rref, unsigned long long __rpc_info, void *__buf, int type, int sub_type, const void *args, unsigned int length);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_inject_fault(bool is_xact_fwd, bool is_xact_allow_refwd, int type, int sub_type, const void *args, unsigned int length)
{
	const unsigned long __callno = __sysmgr_method_inject_fault;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_inject_fault(rpc_info, NULL, type, sub_type, args, length);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_inject_fault(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int type, int sub_type, const void *args, unsigned int length)
{
	const unsigned long __callno = __sysmgr_method_inject_fault;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_inject_fault(__rref, rpc_info, NULL, type, sub_type, args, length);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_inject_fault(int type, int sub_type, const void *args, unsigned int length)
{
	return actvxactcall_hmcall_inject_fault(false, false, type, sub_type, args, length);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_inject_fault(rref_t __rref, int type, int sub_type, const void *args, unsigned int length)
{
	return actvxactcapcall_hmcall_inject_fault(false, false, __rref, type, sub_type, args, length);
}

extern int __actvcall_hmcall_proc_capget(unsigned long long __rpc_info, void *__buf, int tid, unsigned int version);


extern int __actvcapcall_hmcall_proc_capget(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, unsigned int version);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_capget(bool is_xact_fwd, bool is_xact_allow_refwd, int tid, unsigned int version, struct __actvret_hmcall_proc_capget *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_capget;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_capget(rpc_info, __ret, tid, version);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_capget(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int tid, unsigned int version, struct __actvret_hmcall_proc_capget *__ret)
{
	const unsigned long __callno = __sysmgr_method_proc_capget;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_capget(__rref, rpc_info, __ret, tid, version);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_capget(int tid, unsigned int version, struct __actvret_hmcall_proc_capget *__ret)
{
	return actvxactcall_hmcall_proc_capget(false, false, tid, version, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_capget(rref_t __rref, int tid, unsigned int version, struct __actvret_hmcall_proc_capget *__ret)
{
	return actvxactcapcall_hmcall_proc_capget(false, false, __rref, tid, version, __ret);
}

extern int __actvcall_hmcall_proc_capset(unsigned long long __rpc_info, void *__buf, int pid, unsigned int version, unsigned long long effective, unsigned long long permitted, unsigned long long inheritable);


extern int __actvcapcall_hmcall_proc_capset(rref_t __rref, unsigned long long __rpc_info, void *__buf, int pid, unsigned int version, unsigned long long effective, unsigned long long permitted, unsigned long long inheritable);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_capset(bool is_xact_fwd, bool is_xact_allow_refwd, int pid, unsigned int version, unsigned long long effective, unsigned long long permitted, unsigned long long inheritable)
{
	const unsigned long __callno = __sysmgr_method_proc_capset;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_capset(rpc_info, NULL, pid, version, effective, permitted, inheritable);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_capset(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int pid, unsigned int version, unsigned long long effective, unsigned long long permitted, unsigned long long inheritable)
{
	const unsigned long __callno = __sysmgr_method_proc_capset;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_capset(__rref, rpc_info, NULL, pid, version, effective, permitted, inheritable);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_capset(int pid, unsigned int version, unsigned long long effective, unsigned long long permitted, unsigned long long inheritable)
{
	return actvxactcall_hmcall_proc_capset(false, false, pid, version, effective, permitted, inheritable);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_capset(rref_t __rref, int pid, unsigned int version, unsigned long long effective, unsigned long long permitted, unsigned long long inheritable)
{
	return actvxactcapcall_hmcall_proc_capset(false, false, __rref, pid, version, effective, permitted, inheritable);
}

extern int __actvcall_hmcall_proc_cap_bset_drop(unsigned long long __rpc_info, void *__buf, unsigned long cap);


extern int __actvcapcall_hmcall_proc_cap_bset_drop(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long cap);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_cap_bset_drop(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long cap)
{
	const unsigned long __callno = __sysmgr_method_proc_cap_bset_drop;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_cap_bset_drop(rpc_info, NULL, cap);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_cap_bset_drop(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long cap)
{
	const unsigned long __callno = __sysmgr_method_proc_cap_bset_drop;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_cap_bset_drop(__rref, rpc_info, NULL, cap);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_cap_bset_drop(unsigned long cap)
{
	return actvxactcall_hmcall_proc_cap_bset_drop(false, false, cap);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_cap_bset_drop(rref_t __rref, unsigned long cap)
{
	return actvxactcapcall_hmcall_proc_cap_bset_drop(false, false, __rref, cap);
}

extern int __actvcall_hmcall_proc_cap_ambient_clear(unsigned long long __rpc_info, void *__buf);


extern int __actvcapcall_hmcall_proc_cap_ambient_clear(rref_t __rref, unsigned long long __rpc_info, void *__buf);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_cap_ambient_clear(bool is_xact_fwd, bool is_xact_allow_refwd)
{
	const unsigned long __callno = __sysmgr_method_proc_cap_ambient_clear;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_cap_ambient_clear(rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_cap_ambient_clear(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref)
{
	const unsigned long __callno = __sysmgr_method_proc_cap_ambient_clear;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_cap_ambient_clear(__rref, rpc_info, NULL);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_cap_ambient_clear(void)
{
	return actvxactcall_hmcall_proc_cap_ambient_clear(false, false);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_cap_ambient_clear(rref_t __rref)
{
	return actvxactcapcall_hmcall_proc_cap_ambient_clear(false, false, __rref);
}

extern int __actvcall_hmcall_proc_cap_ambient_add(unsigned long long __rpc_info, void *__buf, unsigned long cap);


extern int __actvcapcall_hmcall_proc_cap_ambient_add(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long cap);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_cap_ambient_add(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long cap)
{
	const unsigned long __callno = __sysmgr_method_proc_cap_ambient_add;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_cap_ambient_add(rpc_info, NULL, cap);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_cap_ambient_add(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long cap)
{
	const unsigned long __callno = __sysmgr_method_proc_cap_ambient_add;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_cap_ambient_add(__rref, rpc_info, NULL, cap);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_cap_ambient_add(unsigned long cap)
{
	return actvxactcall_hmcall_proc_cap_ambient_add(false, false, cap);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_cap_ambient_add(rref_t __rref, unsigned long cap)
{
	return actvxactcapcall_hmcall_proc_cap_ambient_add(false, false, __rref, cap);
}

extern int __actvcall_hmcall_proc_cap_ambient_cut(unsigned long long __rpc_info, void *__buf, unsigned long cap);


extern int __actvcapcall_hmcall_proc_cap_ambient_cut(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long cap);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_cap_ambient_cut(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long cap)
{
	const unsigned long __callno = __sysmgr_method_proc_cap_ambient_cut;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_cap_ambient_cut(rpc_info, NULL, cap);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_cap_ambient_cut(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long cap)
{
	const unsigned long __callno = __sysmgr_method_proc_cap_ambient_cut;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_cap_ambient_cut(__rref, rpc_info, NULL, cap);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_cap_ambient_cut(unsigned long cap)
{
	return actvxactcall_hmcall_proc_cap_ambient_cut(false, false, cap);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_cap_ambient_cut(rref_t __rref, unsigned long cap)
{
	return actvxactcapcall_hmcall_proc_cap_ambient_cut(false, false, __rref, cap);
}

extern int __actvcall_hmcall_proc_cap_sbits(unsigned long long __rpc_info, void *__buf, unsigned long bit);


extern int __actvcapcall_hmcall_proc_cap_sbits(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long bit);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_cap_sbits(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long bit)
{
	const unsigned long __callno = __sysmgr_method_proc_cap_sbits;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_cap_sbits(rpc_info, NULL, bit);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_cap_sbits(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long bit)
{
	const unsigned long __callno = __sysmgr_method_proc_cap_sbits;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_cap_sbits(__rref, rpc_info, NULL, bit);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_cap_sbits(unsigned long bit)
{
	return actvxactcall_hmcall_proc_cap_sbits(false, false, bit);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_cap_sbits(rref_t __rref, unsigned long bit)
{
	return actvxactcapcall_hmcall_proc_cap_sbits(false, false, __rref, bit);
}

extern int __actvcall_hmcall_proc_cap_keep(unsigned long long __rpc_info, void *__buf, unsigned long bit);


extern int __actvcapcall_hmcall_proc_cap_keep(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long bit);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_proc_cap_keep(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long bit)
{
	const unsigned long __callno = __sysmgr_method_proc_cap_keep;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_proc_cap_keep(rpc_info, NULL, bit);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_proc_cap_keep(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long bit)
{
	const unsigned long __callno = __sysmgr_method_proc_cap_keep;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_proc_cap_keep(__rref, rpc_info, NULL, bit);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_proc_cap_keep(unsigned long bit)
{
	return actvxactcall_hmcall_proc_cap_keep(false, false, bit);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_proc_cap_keep(rref_t __rref, unsigned long bit)
{
	return actvxactcapcall_hmcall_proc_cap_keep(false, false, __rref, bit);
}

extern int __actvcall_hmcall_ipc_shmget(unsigned long long __rpc_info, void *__buf, int key, unsigned long size, int shmflg);


extern int __actvcapcall_hmcall_ipc_shmget(rref_t __rref, unsigned long long __rpc_info, void *__buf, int key, unsigned long size, int shmflg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ipc_shmget(bool is_xact_fwd, bool is_xact_allow_refwd, int key, unsigned long size, int shmflg, struct __actvret_hmcall_ipc_shmget *__ret)
{
	const unsigned long __callno = __sysmgr_method_ipc_shmget;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ipc_shmget(rpc_info, __ret, key, size, shmflg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ipc_shmget(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int key, unsigned long size, int shmflg, struct __actvret_hmcall_ipc_shmget *__ret)
{
	const unsigned long __callno = __sysmgr_method_ipc_shmget;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ipc_shmget(__rref, rpc_info, __ret, key, size, shmflg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ipc_shmget(int key, unsigned long size, int shmflg, struct __actvret_hmcall_ipc_shmget *__ret)
{
	return actvxactcall_hmcall_ipc_shmget(false, false, key, size, shmflg, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ipc_shmget(rref_t __rref, int key, unsigned long size, int shmflg, struct __actvret_hmcall_ipc_shmget *__ret)
{
	return actvxactcapcall_hmcall_ipc_shmget(false, false, __rref, key, size, shmflg, __ret);
}

extern int __actvcall_hmcall_ipc_shmat(unsigned long long __rpc_info, void *__buf, int shmid, const void *shmaddr, int shmflg);


extern int __actvcapcall_hmcall_ipc_shmat(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shmid, const void *shmaddr, int shmflg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ipc_shmat(bool is_xact_fwd, bool is_xact_allow_refwd, int shmid, const void *shmaddr, int shmflg, struct __actvret_hmcall_ipc_shmat *__ret)
{
	const unsigned long __callno = __sysmgr_method_ipc_shmat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ipc_shmat(rpc_info, __ret, shmid, shmaddr, shmflg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ipc_shmat(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shmid, const void *shmaddr, int shmflg, struct __actvret_hmcall_ipc_shmat *__ret)
{
	const unsigned long __callno = __sysmgr_method_ipc_shmat;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ipc_shmat(__rref, rpc_info, __ret, shmid, shmaddr, shmflg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ipc_shmat(int shmid, const void *shmaddr, int shmflg, struct __actvret_hmcall_ipc_shmat *__ret)
{
	return actvxactcall_hmcall_ipc_shmat(false, false, shmid, shmaddr, shmflg, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ipc_shmat(rref_t __rref, int shmid, const void *shmaddr, int shmflg, struct __actvret_hmcall_ipc_shmat *__ret)
{
	return actvxactcapcall_hmcall_ipc_shmat(false, false, __rref, shmid, shmaddr, shmflg, __ret);
}

extern int __actvcall_hmcall_ipc_shmdt(unsigned long long __rpc_info, void *__buf, const void *addr);


extern int __actvcapcall_hmcall_ipc_shmdt(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ipc_shmdt(bool is_xact_fwd, bool is_xact_allow_refwd, const void *addr)
{
	const unsigned long __callno = __sysmgr_method_ipc_shmdt;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ipc_shmdt(rpc_info, NULL, addr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ipc_shmdt(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const void *addr)
{
	const unsigned long __callno = __sysmgr_method_ipc_shmdt;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const void*), __arch_actv_rpc_stksz_alignment(const void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ipc_shmdt(__rref, rpc_info, NULL, addr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ipc_shmdt(const void *addr)
{
	return actvxactcall_hmcall_ipc_shmdt(false, false, addr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ipc_shmdt(rref_t __rref, const void *addr)
{
	return actvxactcapcall_hmcall_ipc_shmdt(false, false, __rref, addr);
}

extern int __actvcall_hmcall_ipc_shmctl(unsigned long long __rpc_info, void *__buf, int shmid, int cmd, void *ds_ptr, unsigned long len);


extern int __actvcapcall_hmcall_ipc_shmctl(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shmid, int cmd, void *ds_ptr, unsigned long len);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ipc_shmctl(bool is_xact_fwd, bool is_xact_allow_refwd, int shmid, int cmd, void *ds_ptr, unsigned long len)
{
	const unsigned long __callno = __sysmgr_method_ipc_shmctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ipc_shmctl(rpc_info, NULL, shmid, cmd, ds_ptr, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ipc_shmctl(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shmid, int cmd, void *ds_ptr, unsigned long len)
{
	const unsigned long __callno = __sysmgr_method_ipc_shmctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ipc_shmctl(__rref, rpc_info, NULL, shmid, cmd, ds_ptr, len);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ipc_shmctl(int shmid, int cmd, void *ds_ptr, unsigned long len)
{
	return actvxactcall_hmcall_ipc_shmctl(false, false, shmid, cmd, ds_ptr, len);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ipc_shmctl(rref_t __rref, int shmid, int cmd, void *ds_ptr, unsigned long len)
{
	return actvxactcapcall_hmcall_ipc_shmctl(false, false, __rref, shmid, cmd, ds_ptr, len);
}

extern int __actvcall_hmcall_ipc_shmctl_get(unsigned long long __rpc_info, void *__buf, int shmid, int cmd, void *recv_addr, unsigned long size);


extern int __actvcapcall_hmcall_ipc_shmctl_get(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shmid, int cmd, void *recv_addr, unsigned long size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ipc_shmctl_get(bool is_xact_fwd, bool is_xact_allow_refwd, int shmid, int cmd, void *recv_addr, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_ipc_shmctl_get;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ipc_shmctl_get(rpc_info, NULL, shmid, cmd, recv_addr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ipc_shmctl_get(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int shmid, int cmd, void *recv_addr, unsigned long size)
{
	const unsigned long __callno = __sysmgr_method_ipc_shmctl_get;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ipc_shmctl_get(__rref, rpc_info, NULL, shmid, cmd, recv_addr, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ipc_shmctl_get(int shmid, int cmd, void *recv_addr, unsigned long size)
{
	return actvxactcall_hmcall_ipc_shmctl_get(false, false, shmid, cmd, recv_addr, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ipc_shmctl_get(rref_t __rref, int shmid, int cmd, void *recv_addr, unsigned long size)
{
	return actvxactcapcall_hmcall_ipc_shmctl_get(false, false, __rref, shmid, cmd, recv_addr, size);
}

extern int __actvcall_hmcall_ipc_msgget(unsigned long long __rpc_info, void *__buf, int key, int msgflg);


extern int __actvcapcall_hmcall_ipc_msgget(rref_t __rref, unsigned long long __rpc_info, void *__buf, int key, int msgflg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ipc_msgget(bool is_xact_fwd, bool is_xact_allow_refwd, int key, int msgflg, struct __actvret_hmcall_ipc_msgget *__ret)
{
	const unsigned long __callno = __sysmgr_method_ipc_msgget;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ipc_msgget(rpc_info, __ret, key, msgflg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ipc_msgget(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int key, int msgflg, struct __actvret_hmcall_ipc_msgget *__ret)
{
	const unsigned long __callno = __sysmgr_method_ipc_msgget;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ipc_msgget(__rref, rpc_info, __ret, key, msgflg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ipc_msgget(int key, int msgflg, struct __actvret_hmcall_ipc_msgget *__ret)
{
	return actvxactcall_hmcall_ipc_msgget(false, false, key, msgflg, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ipc_msgget(rref_t __rref, int key, int msgflg, struct __actvret_hmcall_ipc_msgget *__ret)
{
	return actvxactcapcall_hmcall_ipc_msgget(false, false, __rref, key, msgflg, __ret);
}

extern int __actvcall_hmcall_ipc_msgsnd(unsigned long long __rpc_info, void *__buf, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg);


extern int __actvcapcall_hmcall_ipc_msgsnd(rref_t __rref, unsigned long long __rpc_info, void *__buf, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ipc_msgsnd(bool is_xact_fwd, bool is_xact_allow_refwd, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg)
{
	const unsigned long __callno = __sysmgr_method_ipc_msgsnd;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ipc_msgsnd(rpc_info, NULL, msqid, msg, msgsz, msgtyp, msgflg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ipc_msgsnd(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg)
{
	const unsigned long __callno = __sysmgr_method_ipc_msgsnd;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ipc_msgsnd(__rref, rpc_info, NULL, msqid, msg, msgsz, msgtyp, msgflg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ipc_msgsnd(int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg)
{
	return actvxactcall_hmcall_ipc_msgsnd(false, false, msqid, msg, msgsz, msgtyp, msgflg);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ipc_msgsnd(rref_t __rref, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg)
{
	return actvxactcapcall_hmcall_ipc_msgsnd(false, false, __rref, msqid, msg, msgsz, msgtyp, msgflg);
}

extern int __actvcall_hmcall_ipc_msgrcv(unsigned long long __rpc_info, void *__buf, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg);


extern int __actvcapcall_hmcall_ipc_msgrcv(rref_t __rref, unsigned long long __rpc_info, void *__buf, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ipc_msgrcv(bool is_xact_fwd, bool is_xact_allow_refwd, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg, struct __actvret_hmcall_ipc_msgrcv *__ret)
{
	const unsigned long __callno = __sysmgr_method_ipc_msgrcv;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ipc_msgrcv(rpc_info, __ret, msqid, msg, msgsz, msgtyp, msgflg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ipc_msgrcv(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg, struct __actvret_hmcall_ipc_msgrcv *__ret)
{
	const unsigned long __callno = __sysmgr_method_ipc_msgrcv;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(long), __arch_actv_rpc_stksz_alignment(long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ipc_msgrcv(__rref, rpc_info, __ret, msqid, msg, msgsz, msgtyp, msgflg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ipc_msgrcv(int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg, struct __actvret_hmcall_ipc_msgrcv *__ret)
{
	return actvxactcall_hmcall_ipc_msgrcv(false, false, msqid, msg, msgsz, msgtyp, msgflg, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ipc_msgrcv(rref_t __rref, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg, struct __actvret_hmcall_ipc_msgrcv *__ret)
{
	return actvxactcapcall_hmcall_ipc_msgrcv(false, false, __rref, msqid, msg, msgsz, msgtyp, msgflg, __ret);
}

extern int __actvcall_hmcall_ipc_msgctl(unsigned long long __rpc_info, void *__buf, int msqid, int cmd, unsigned long send_buf, unsigned long send_sz, unsigned long recv_buf, unsigned long recv_sz);


extern int __actvcapcall_hmcall_ipc_msgctl(rref_t __rref, unsigned long long __rpc_info, void *__buf, int msqid, int cmd, unsigned long send_buf, unsigned long send_sz, unsigned long recv_buf, unsigned long recv_sz);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ipc_msgctl(bool is_xact_fwd, bool is_xact_allow_refwd, int msqid, int cmd, unsigned long send_buf, unsigned long send_sz, unsigned long recv_buf, unsigned long recv_sz)
{
	const unsigned long __callno = __sysmgr_method_ipc_msgctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ipc_msgctl(rpc_info, NULL, msqid, cmd, send_buf, send_sz, recv_buf, recv_sz);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ipc_msgctl(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int msqid, int cmd, unsigned long send_buf, unsigned long send_sz, unsigned long recv_buf, unsigned long recv_sz)
{
	const unsigned long __callno = __sysmgr_method_ipc_msgctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ipc_msgctl(__rref, rpc_info, NULL, msqid, cmd, send_buf, send_sz, recv_buf, recv_sz);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ipc_msgctl(int msqid, int cmd, unsigned long send_buf, unsigned long send_sz, unsigned long recv_buf, unsigned long recv_sz)
{
	return actvxactcall_hmcall_ipc_msgctl(false, false, msqid, cmd, send_buf, send_sz, recv_buf, recv_sz);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ipc_msgctl(rref_t __rref, int msqid, int cmd, unsigned long send_buf, unsigned long send_sz, unsigned long recv_buf, unsigned long recv_sz)
{
	return actvxactcapcall_hmcall_ipc_msgctl(false, false, __rref, msqid, cmd, send_buf, send_sz, recv_buf, recv_sz);
}

extern int __actvcall_hmcall_ipc_semget(unsigned long long __rpc_info, void *__buf, int key, int nsems, int semflg);


extern int __actvcapcall_hmcall_ipc_semget(rref_t __rref, unsigned long long __rpc_info, void *__buf, int key, int nsems, int semflg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ipc_semget(bool is_xact_fwd, bool is_xact_allow_refwd, int key, int nsems, int semflg, struct __actvret_hmcall_ipc_semget *__ret)
{
	const unsigned long __callno = __sysmgr_method_ipc_semget;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ipc_semget(rpc_info, __ret, key, nsems, semflg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ipc_semget(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int key, int nsems, int semflg, struct __actvret_hmcall_ipc_semget *__ret)
{
	const unsigned long __callno = __sysmgr_method_ipc_semget;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ipc_semget(__rref, rpc_info, __ret, key, nsems, semflg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ipc_semget(int key, int nsems, int semflg, struct __actvret_hmcall_ipc_semget *__ret)
{
	return actvxactcall_hmcall_ipc_semget(false, false, key, nsems, semflg, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ipc_semget(rref_t __rref, int key, int nsems, int semflg, struct __actvret_hmcall_ipc_semget *__ret)
{
	return actvxactcapcall_hmcall_ipc_semget(false, false, __rref, key, nsems, semflg, __ret);
}

extern int __actvcall_hmcall_ipc_semop(unsigned long long __rpc_info, void *__buf, int semid, unsigned long sops, unsigned long nsops);


extern int __actvcapcall_hmcall_ipc_semop(rref_t __rref, unsigned long long __rpc_info, void *__buf, int semid, unsigned long sops, unsigned long nsops);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ipc_semop(bool is_xact_fwd, bool is_xact_allow_refwd, int semid, unsigned long sops, unsigned long nsops)
{
	const unsigned long __callno = __sysmgr_method_ipc_semop;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ipc_semop(rpc_info, NULL, semid, sops, nsops);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ipc_semop(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int semid, unsigned long sops, unsigned long nsops)
{
	const unsigned long __callno = __sysmgr_method_ipc_semop;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ipc_semop(__rref, rpc_info, NULL, semid, sops, nsops);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ipc_semop(int semid, unsigned long sops, unsigned long nsops)
{
	return actvxactcall_hmcall_ipc_semop(false, false, semid, sops, nsops);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ipc_semop(rref_t __rref, int semid, unsigned long sops, unsigned long nsops)
{
	return actvxactcapcall_hmcall_ipc_semop(false, false, __rref, semid, sops, nsops);
}

extern int __actvcall_hmcall_ipc_semctl(unsigned long long __rpc_info, void *__buf, int semid, int semnum, int cmd, unsigned long arg);


extern int __actvcapcall_hmcall_ipc_semctl(rref_t __rref, unsigned long long __rpc_info, void *__buf, int semid, int semnum, int cmd, unsigned long arg);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_ipc_semctl(bool is_xact_fwd, bool is_xact_allow_refwd, int semid, int semnum, int cmd, unsigned long arg)
{
	const unsigned long __callno = __sysmgr_method_ipc_semctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_ipc_semctl(rpc_info, NULL, semid, semnum, cmd, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_ipc_semctl(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int semid, int semnum, int cmd, unsigned long arg)
{
	const unsigned long __callno = __sysmgr_method_ipc_semctl;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long), __arch_actv_rpc_stksz_alignment(unsigned long));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_ipc_semctl(__rref, rpc_info, NULL, semid, semnum, cmd, arg);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_ipc_semctl(int semid, int semnum, int cmd, unsigned long arg)
{
	return actvxactcall_hmcall_ipc_semctl(false, false, semid, semnum, cmd, arg);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_ipc_semctl(rref_t __rref, int semid, int semnum, int cmd, unsigned long arg)
{
	return actvxactcapcall_hmcall_ipc_semctl(false, false, __rref, semid, semnum, cmd, arg);
}

extern int __actvcall_hmcall_hack_procfs_status(unsigned long long __rpc_info, void *__buf, pid_t pid);


extern int __actvcapcall_hmcall_hack_procfs_status(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_hack_procfs_status(bool is_xact_fwd, bool is_xact_allow_refwd, pid_t pid)
{
	const unsigned long __callno = __sysmgr_method_hack_procfs_status;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_hack_procfs_status(rpc_info, NULL, pid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_hack_procfs_status(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, pid_t pid)
{
	const unsigned long __callno = __sysmgr_method_hack_procfs_status;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(pid_t), __arch_actv_rpc_stksz_alignment(pid_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_hack_procfs_status(__rref, rpc_info, NULL, pid);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_hack_procfs_status(pid_t pid)
{
	return actvxactcall_hmcall_hack_procfs_status(false, false, pid);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_hack_procfs_status(rref_t __rref, pid_t pid)
{
	return actvxactcapcall_hmcall_hack_procfs_status(false, false, __rref, pid);
}

extern int __actvcall_hmcall_audit_notify_rule_update(unsigned long long __rpc_info, void *__buf, unsigned long long ruleid, unsigned int list_num, enum RULE_APPEND_TYPE type, enum RULE_NOTIFY_OPERATION operat);


extern int __actvcapcall_hmcall_audit_notify_rule_update(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long ruleid, unsigned int list_num, enum RULE_APPEND_TYPE type, enum RULE_NOTIFY_OPERATION operat);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_audit_notify_rule_update(bool is_xact_fwd, bool is_xact_allow_refwd, unsigned long long ruleid, unsigned int list_num, enum RULE_APPEND_TYPE type, enum RULE_NOTIFY_OPERATION operat)
{
	const unsigned long __callno = __sysmgr_method_audit_notify_rule_update;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum RULE_APPEND_TYPE), __arch_actv_rpc_stksz_alignment(enum RULE_APPEND_TYPE));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum RULE_NOTIFY_OPERATION), __arch_actv_rpc_stksz_alignment(enum RULE_NOTIFY_OPERATION));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_audit_notify_rule_update(rpc_info, NULL, ruleid, list_num, type, operat);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_audit_notify_rule_update(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, unsigned long long ruleid, unsigned int list_num, enum RULE_APPEND_TYPE type, enum RULE_NOTIFY_OPERATION operat)
{
	const unsigned long __callno = __sysmgr_method_audit_notify_rule_update;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned long long), __arch_actv_rpc_stksz_alignment(unsigned long long));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(unsigned int), __arch_actv_rpc_stksz_alignment(unsigned int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum RULE_APPEND_TYPE), __arch_actv_rpc_stksz_alignment(enum RULE_APPEND_TYPE));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(enum RULE_NOTIFY_OPERATION), __arch_actv_rpc_stksz_alignment(enum RULE_NOTIFY_OPERATION));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_audit_notify_rule_update(__rref, rpc_info, NULL, ruleid, list_num, type, operat);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_audit_notify_rule_update(unsigned long long ruleid, unsigned int list_num, enum RULE_APPEND_TYPE type, enum RULE_NOTIFY_OPERATION operat)
{
	return actvxactcall_hmcall_audit_notify_rule_update(false, false, ruleid, list_num, type, operat);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_audit_notify_rule_update(rref_t __rref, unsigned long long ruleid, unsigned int list_num, enum RULE_APPEND_TYPE type, enum RULE_NOTIFY_OPERATION operat)
{
	return actvxactcapcall_hmcall_audit_notify_rule_update(false, false, __rref, ruleid, list_num, type, operat);
}

extern int __actvcall_hmcall_key_install_keyring(unsigned long long __rpc_info, void *__buf, int short_key_id, void *key_addr);


extern int __actvcapcall_hmcall_key_install_keyring(rref_t __rref, unsigned long long __rpc_info, void *__buf, int short_key_id, void *key_addr);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_key_install_keyring(bool is_xact_fwd, bool is_xact_allow_refwd, int short_key_id, void *key_addr)
{
	const unsigned long __callno = __sysmgr_method_key_install_keyring;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_key_install_keyring(rpc_info, NULL, short_key_id, key_addr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_key_install_keyring(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int short_key_id, void *key_addr)
{
	const unsigned long __callno = __sysmgr_method_key_install_keyring;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(void*), __arch_actv_rpc_stksz_alignment(void*));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_key_install_keyring(__rref, rpc_info, NULL, short_key_id, key_addr);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_key_install_keyring(int short_key_id, void *key_addr)
{
	return actvxactcall_hmcall_key_install_keyring(false, false, short_key_id, key_addr);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_key_install_keyring(rref_t __rref, int short_key_id, void *key_addr)
{
	return actvxactcapcall_hmcall_key_install_keyring(false, false, __rref, short_key_id, key_addr);
}

extern int __actvcall_hmcall_key_lookup_keyring(unsigned long long __rpc_info, void *__buf, int short_key_id);


extern int __actvcapcall_hmcall_key_lookup_keyring(rref_t __rref, unsigned long long __rpc_info, void *__buf, int short_key_id);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_key_lookup_keyring(bool is_xact_fwd, bool is_xact_allow_refwd, int short_key_id, struct __actvret_hmcall_key_lookup_keyring *__ret)
{
	const unsigned long __callno = __sysmgr_method_key_lookup_keyring;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_key_lookup_keyring(rpc_info, __ret, short_key_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_key_lookup_keyring(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, int short_key_id, struct __actvret_hmcall_key_lookup_keyring *__ret)
{
	const unsigned long __callno = __sysmgr_method_key_lookup_keyring;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(int), __arch_actv_rpc_stksz_alignment(int));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, sizeof*__ret, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_key_lookup_keyring(__rref, rpc_info, __ret, short_key_id);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_key_lookup_keyring(int short_key_id, struct __actvret_hmcall_key_lookup_keyring *__ret)
{
	return actvxactcall_hmcall_key_lookup_keyring(false, false, short_key_id, __ret);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_key_lookup_keyring(rref_t __rref, int short_key_id, struct __actvret_hmcall_key_lookup_keyring *__ret)
{
	return actvxactcapcall_hmcall_key_lookup_keyring(false, false, __rref, short_key_id, __ret);
}

extern int __actvcall_hmcall_cert_verify_path_and_chksum(unsigned long long __rpc_info, void *__buf, const char *path_and_chksum, size_t size);


extern int __actvcapcall_hmcall_cert_verify_path_and_chksum(rref_t __rref, unsigned long long __rpc_info, void *__buf, const char *path_and_chksum, size_t size);


static inline int __attribute__((always_inline)) actvxactcall_hmcall_cert_verify_path_and_chksum(bool is_xact_fwd, bool is_xact_allow_refwd, const char *path_and_chksum, size_t size)
{
	const unsigned long __callno = __sysmgr_method_cert_verify_path_and_chksum;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(0, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcall_hmcall_cert_verify_path_and_chksum(rpc_info, NULL, path_and_chksum, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvxactcapcall_hmcall_cert_verify_path_and_chksum(bool is_xact_fwd, bool is_xact_allow_refwd, rref_t __rref, const char *path_and_chksum, size_t size)
{
	const unsigned long __callno = __sysmgr_method_cert_verify_path_and_chksum;
	int __res;
	unsigned long __stacksz = 0UL;
	struct __arch_actv_stksz_state __stksz_state;
	__stksz_state = __arch_actv_rpc_stksz_init(1, 0);
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(const char*), __arch_actv_rpc_stksz_alignment(const char*));
	__stksz_state = __arch_actv_rpc_stksz_append(__stksz_state, sizeof(size_t), __arch_actv_rpc_stksz_alignment(size_t));
	__stacksz = __arch_actv_rpc_stksz_done(__stksz_state);
	do {
		unsigned long long rpc_info = __arch_actv_xact_rpc_info_gen(is_xact_fwd, is_xact_allow_refwd, __callno, 0UL, __stacksz / sizeof(unsigned long));
		__res = __actvcapcall_hmcall_cert_verify_path_and_chksum(__rref, rpc_info, NULL, path_and_chksum, size);
	} while (__res == (int)E_HM_ACTIVATION_RPC_RETRY);
	return __res;
}

static inline int __attribute__((always_inline)) actvcall_hmcall_cert_verify_path_and_chksum(const char *path_and_chksum, size_t size)
{
	return actvxactcall_hmcall_cert_verify_path_and_chksum(false, false, path_and_chksum, size);
}

static inline int __attribute__((always_inline)) actvcapcall_hmcall_cert_verify_path_and_chksum(rref_t __rref, const char *path_and_chksum, size_t size)
{
	return actvxactcapcall_hmcall_cert_verify_path_and_chksum(false, false, __rref, path_and_chksum, size);
}

#endif
#ifdef SYSIF_GEN_IFACE
#include <hmkernel/compiler.h>
#include <asm/actv_rpc.h>
#include <hongmeng/errno.h>
#include <hongmeng/syscall.h>
#include <hongmeng/panic.h>
#include <libstrict/strict.h>
static int __used __noinline __opt_noframe __internal_rpccall_nobuf(void)
{
	__RPC_DEF_RETVAR(int, ret);
	__RPC_FAST_SYSCALL(1, NOBUF, ret);
	return ret;
}

static int __used __noinline __opt_noframe __internal_rpccall_buf(void)
{
	__RPC_DEF_RETVAR(int, ret);
	__RPC_FAST_SYSCALL(1, SENDBUF, ret);
	return ret;
}

static int __used __noinline __opt_noframe __internal_rpccall_retbuf(void)
{
	__RPC_DEF_RETVAR(int, ret);
	__RPC_FAST_SYSCALL(1, RETBUF, ret);
	return ret;
}

static int __used __noinline __opt_noframe __internal_rpccall_fallback(void)
{
	__RPC_DEF_RETVAR(int, ret);
	__RPC_FAST_SYSCALL(1, FALLBACK, ret);
	return ret;
}

static int __used __noinline __opt_noframe __internal_rpccapcall_nobuf(void)
{
	__RPC_DEF_RETVAR(int, ret);
	__RPC_CAP_SYSCALL(NoBuf, ret);
	return ret;
}

static int __used __noinline __opt_noframe __internal_rpccapcall_buf(void)
{
	__RPC_DEF_RETVAR(int, ret);
	__RPC_CAP_SYSCALL(SendBuf, ret);
	return ret;
}

static int __used __noinline __opt_noframe __internal_rpccapcall_retbuf(void)
{
	__RPC_DEF_RETVAR(int, ret);
	__RPC_CAP_SYSCALL(RetBuf, ret);
	return ret;
}

static int __used __noinline __opt_noframe __internal_rpccapcall_fallback(void)
{
	__RPC_DEF_RETVAR(int, ret);
	__RPC_CAP_SYSCALL(, ret);
	return ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_test_m1(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_test_m1(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m1(unsigned long long __rpc_info, void *__buf, const void *a, int b, unsigned long c, unsigned long long x)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_a = a;
	int __maybe_unused __actv_local_var_b = b;
	unsigned long __maybe_unused __actv_local_var_c = c;
	unsigned long long __maybe_unused __actv_local_var_x = x;
	__ret = ____actvcall_hmcall_test_m1(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(a, __actv_local_var_a), __ARCH_ACTV_RPC_PASS_ARG(b, __actv_local_var_b), __ARCH_ACTV_RPC_PASS_ARG(c, __actv_local_var_c), __ARCH_ACTV_RPC_PASS_ARG(x, __actv_local_var_x));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m1(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *a, int b, unsigned long c, unsigned long long x)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_a = a;
	int __maybe_unused __actv_local_var_b = b;
	unsigned long __maybe_unused __actv_local_var_c = c;
	unsigned long long __maybe_unused __actv_local_var_x = x;
	__ret = ____actvcapcall_hmcall_test_m1(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(a, __actv_local_var_a), __ARCH_ACTV_RPC_PASS_ARG(b, __actv_local_var_b), __ARCH_ACTV_RPC_PASS_ARG(c, __actv_local_var_c), __ARCH_ACTV_RPC_PASS_ARG(x, __actv_local_var_x));
	return __ret;
}

static unsigned long __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_test_m2(unsigned long long rpc_info, void *__buf, ...);


static unsigned long __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_test_m2(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


unsigned long __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m2(unsigned long long __rpc_info, void *__buf, int z)
{
	unsigned long __ret;
	int __maybe_unused __actv_local_var_z = z;
	__ret = ____actvcall_hmcall_test_m2(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(z, __actv_local_var_z));
	return __ret;
}

unsigned long __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m2(rref_t __rref, unsigned long long __rpc_info, void *__buf, int z)
{
	unsigned long __ret;
	int __maybe_unused __actv_local_var_z = z;
	__ret = ____actvcapcall_hmcall_test_m2(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(z, __actv_local_var_z));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m3(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m3(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m3(unsigned long long __rpc_info, void *__buf, int v1, const void *send_buf, unsigned long buf_len)
{
	int __ret;
	int __maybe_unused __actv_local_var_v1 = v1;
	__maybe_unused const void *__actv_local_var_send_buf = send_buf;
	unsigned long __maybe_unused __actv_local_var_buf_len = buf_len;
	__ret = ____actvcall_hmcall_test_m3(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(v1, __actv_local_var_v1), __ARCH_ACTV_RPC_PASS_ARG(send_buf, __actv_local_var_send_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_len, __actv_local_var_buf_len));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m3(rref_t __rref, unsigned long long __rpc_info, void *__buf, int v1, const void *send_buf, unsigned long buf_len)
{
	int __ret;
	int __maybe_unused __actv_local_var_v1 = v1;
	__maybe_unused const void *__actv_local_var_send_buf = send_buf;
	unsigned long __maybe_unused __actv_local_var_buf_len = buf_len;
	__ret = ____actvcapcall_hmcall_test_m3(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(v1, __actv_local_var_v1), __ARCH_ACTV_RPC_PASS_ARG(send_buf, __actv_local_var_send_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_len, __actv_local_var_buf_len));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m4(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m4(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m4(unsigned long long __rpc_info, void *__buf, int v1, struct sysif_data v2)
{
	int __ret;
	int __maybe_unused __actv_local_var_v1 = v1;
	struct sysif_data __maybe_unused __actv_local_var_v2 = v2;
	__ret = ____actvcall_hmcall_test_m4(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(v1, __actv_local_var_v1), __ARCH_ACTV_RPC_PASS_ARG(v2, __actv_local_var_v2));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m4(rref_t __rref, unsigned long long __rpc_info, void *__buf, int v1, struct sysif_data v2)
{
	int __ret;
	int __maybe_unused __actv_local_var_v1 = v1;
	struct sysif_data __maybe_unused __actv_local_var_v2 = v2;
	__ret = ____actvcapcall_hmcall_test_m4(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(v1, __actv_local_var_v1), __ARCH_ACTV_RPC_PASS_ARG(v2, __actv_local_var_v2));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_test_m5(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_test_m5(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m5(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_test_m5(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m5(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_test_m5(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_test_m6(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_test_m6(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m6(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_test_m6(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m6(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_test_m6(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m7(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m7(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m7(unsigned long long __rpc_info, void *__buf, const void *send_buf, unsigned long buf_len)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_send_buf = send_buf;
	unsigned long __maybe_unused __actv_local_var_buf_len = buf_len;
	__ret = ____actvcall_hmcall_test_m7(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(send_buf, __actv_local_var_send_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_len, __actv_local_var_buf_len));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m7(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *send_buf, unsigned long buf_len)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_send_buf = send_buf;
	unsigned long __maybe_unused __actv_local_var_buf_len = buf_len;
	__ret = ____actvcapcall_hmcall_test_m7(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(send_buf, __actv_local_var_send_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_len, __actv_local_var_buf_len));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m8(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m8(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m8(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_test_m8(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m8(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_test_m8(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m9(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m9(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m9(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_test_m9(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m9(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_test_m9(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m10(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m10(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m10(unsigned long long __rpc_info, void *__buf, int a, unsigned long b)
{
	int __ret;
	int __maybe_unused __actv_local_var_a = a;
	unsigned long __maybe_unused __actv_local_var_b = b;
	__ret = ____actvcall_hmcall_test_m10(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(a, __actv_local_var_a), __ARCH_ACTV_RPC_PASS_ARG(b, __actv_local_var_b));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m10(rref_t __rref, unsigned long long __rpc_info, void *__buf, int a, unsigned long b)
{
	int __ret;
	int __maybe_unused __actv_local_var_a = a;
	unsigned long __maybe_unused __actv_local_var_b = b;
	__ret = ____actvcapcall_hmcall_test_m10(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(a, __actv_local_var_a), __ARCH_ACTV_RPC_PASS_ARG(b, __actv_local_var_b));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m11(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m11(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m11(unsigned long long __rpc_info, void *__buf, struct sysif_data data)
{
	int __ret;
	struct sysif_data __maybe_unused __actv_local_var_data = data;
	__ret = ____actvcall_hmcall_test_m11(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(data, __actv_local_var_data));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m11(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct sysif_data data)
{
	int __ret;
	struct sysif_data __maybe_unused __actv_local_var_data = data;
	__ret = ____actvcapcall_hmcall_test_m11(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(data, __actv_local_var_data));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m12(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m12(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m12(unsigned long long __rpc_info, void *__buf, int a1, unsigned long long a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, struct sysif_data data)
{
	int __ret;
	int __maybe_unused __actv_local_var_a1 = a1;
	unsigned long long __maybe_unused __actv_local_var_a2 = a2;
	int __maybe_unused __actv_local_var_a3 = a3;
	int __maybe_unused __actv_local_var_a4 = a4;
	int __maybe_unused __actv_local_var_a5 = a5;
	int __maybe_unused __actv_local_var_a6 = a6;
	int __maybe_unused __actv_local_var_a7 = a7;
	int __maybe_unused __actv_local_var_a8 = a8;
	int __maybe_unused __actv_local_var_a9 = a9;
	struct sysif_data __maybe_unused __actv_local_var_data = data;
	__ret = ____actvcall_hmcall_test_m12(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(a1, __actv_local_var_a1), __ARCH_ACTV_RPC_PASS_ARG(a2, __actv_local_var_a2), __ARCH_ACTV_RPC_PASS_ARG(a3, __actv_local_var_a3), __ARCH_ACTV_RPC_PASS_ARG(a4, __actv_local_var_a4), __ARCH_ACTV_RPC_PASS_ARG(a5, __actv_local_var_a5), __ARCH_ACTV_RPC_PASS_ARG(a6, __actv_local_var_a6), __ARCH_ACTV_RPC_PASS_ARG(a7, __actv_local_var_a7), __ARCH_ACTV_RPC_PASS_ARG(a8, __actv_local_var_a8), __ARCH_ACTV_RPC_PASS_ARG(a9, __actv_local_var_a9), __ARCH_ACTV_RPC_PASS_ARG(data, __actv_local_var_data));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m12(rref_t __rref, unsigned long long __rpc_info, void *__buf, int a1, unsigned long long a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, struct sysif_data data)
{
	int __ret;
	int __maybe_unused __actv_local_var_a1 = a1;
	unsigned long long __maybe_unused __actv_local_var_a2 = a2;
	int __maybe_unused __actv_local_var_a3 = a3;
	int __maybe_unused __actv_local_var_a4 = a4;
	int __maybe_unused __actv_local_var_a5 = a5;
	int __maybe_unused __actv_local_var_a6 = a6;
	int __maybe_unused __actv_local_var_a7 = a7;
	int __maybe_unused __actv_local_var_a8 = a8;
	int __maybe_unused __actv_local_var_a9 = a9;
	struct sysif_data __maybe_unused __actv_local_var_data = data;
	__ret = ____actvcapcall_hmcall_test_m12(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(a1, __actv_local_var_a1), __ARCH_ACTV_RPC_PASS_ARG(a2, __actv_local_var_a2), __ARCH_ACTV_RPC_PASS_ARG(a3, __actv_local_var_a3), __ARCH_ACTV_RPC_PASS_ARG(a4, __actv_local_var_a4), __ARCH_ACTV_RPC_PASS_ARG(a5, __actv_local_var_a5), __ARCH_ACTV_RPC_PASS_ARG(a6, __actv_local_var_a6), __ARCH_ACTV_RPC_PASS_ARG(a7, __actv_local_var_a7), __ARCH_ACTV_RPC_PASS_ARG(a8, __actv_local_var_a8), __ARCH_ACTV_RPC_PASS_ARG(a9, __actv_local_var_a9), __ARCH_ACTV_RPC_PASS_ARG(data, __actv_local_var_data));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m13(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m13(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m13(unsigned long long __rpc_info, void *__buf, void *addr, unsigned long size)
{
	int __ret;
	__maybe_unused void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_test_m13(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m13(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *addr, unsigned long size)
{
	int __ret;
	__maybe_unused void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_test_m13(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m14(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m14(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m14(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_test_m14(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m14(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_test_m14(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_test_m15(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_test_m15(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m15(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_test_m15(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m15(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_test_m15(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m16(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m16(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m16(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_test_m16(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m16(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_test_m16(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m17(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m17(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m17(unsigned long long __rpc_info, void *__buf, int a1, struct sysif_data data, unsigned long long a2, int a3)
{
	int __ret;
	int __maybe_unused __actv_local_var_a1 = a1;
	struct sysif_data __maybe_unused __actv_local_var_data = data;
	unsigned long long __maybe_unused __actv_local_var_a2 = a2;
	int __maybe_unused __actv_local_var_a3 = a3;
	__ret = ____actvcall_hmcall_test_m17(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(a1, __actv_local_var_a1), __ARCH_ACTV_RPC_PASS_ARG(data, __actv_local_var_data), __ARCH_ACTV_RPC_PASS_ARG(a2, __actv_local_var_a2), __ARCH_ACTV_RPC_PASS_ARG(a3, __actv_local_var_a3));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m17(rref_t __rref, unsigned long long __rpc_info, void *__buf, int a1, struct sysif_data data, unsigned long long a2, int a3)
{
	int __ret;
	int __maybe_unused __actv_local_var_a1 = a1;
	struct sysif_data __maybe_unused __actv_local_var_data = data;
	unsigned long long __maybe_unused __actv_local_var_a2 = a2;
	int __maybe_unused __actv_local_var_a3 = a3;
	__ret = ____actvcapcall_hmcall_test_m17(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(a1, __actv_local_var_a1), __ARCH_ACTV_RPC_PASS_ARG(data, __actv_local_var_data), __ARCH_ACTV_RPC_PASS_ARG(a2, __actv_local_var_a2), __ARCH_ACTV_RPC_PASS_ARG(a3, __actv_local_var_a3));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m18(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m18(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m18(unsigned long long __rpc_info, void *__buf, void *addr1, unsigned long size1, void *addr2, unsigned long size2)
{
	int __ret;
	__maybe_unused void *__actv_local_var_addr1 = addr1;
	unsigned long __maybe_unused __actv_local_var_size1 = size1;
	__maybe_unused void *__actv_local_var_addr2 = addr2;
	unsigned long __maybe_unused __actv_local_var_size2 = size2;
	__ret = ____actvcall_hmcall_test_m18(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr1, __actv_local_var_addr1), __ARCH_ACTV_RPC_PASS_ARG(size1, __actv_local_var_size1), __ARCH_ACTV_RPC_PASS_ARG(addr2, __actv_local_var_addr2), __ARCH_ACTV_RPC_PASS_ARG(size2, __actv_local_var_size2));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m18(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *addr1, unsigned long size1, void *addr2, unsigned long size2)
{
	int __ret;
	__maybe_unused void *__actv_local_var_addr1 = addr1;
	unsigned long __maybe_unused __actv_local_var_size1 = size1;
	__maybe_unused void *__actv_local_var_addr2 = addr2;
	unsigned long __maybe_unused __actv_local_var_size2 = size2;
	__ret = ____actvcapcall_hmcall_test_m18(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr1, __actv_local_var_addr1), __ARCH_ACTV_RPC_PASS_ARG(size1, __actv_local_var_size1), __ARCH_ACTV_RPC_PASS_ARG(addr2, __actv_local_var_addr2), __ARCH_ACTV_RPC_PASS_ARG(size2, __actv_local_var_size2));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_test_m19(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_test_m19(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m19(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_test_m19(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m19(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_test_m19(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m20(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m20(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m20(unsigned long long __rpc_info, void *__buf, const void *send_buf, unsigned long buf_len)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_send_buf = send_buf;
	unsigned long __maybe_unused __actv_local_var_buf_len = buf_len;
	__ret = ____actvcall_hmcall_test_m20(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(send_buf, __actv_local_var_send_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_len, __actv_local_var_buf_len));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m20(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *send_buf, unsigned long buf_len)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_send_buf = send_buf;
	unsigned long __maybe_unused __actv_local_var_buf_len = buf_len;
	__ret = ____actvcapcall_hmcall_test_m20(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(send_buf, __actv_local_var_send_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_len, __actv_local_var_buf_len));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_test_m21(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_test_m21(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m21(unsigned long long __rpc_info, void *__buf, const void *send_buf, unsigned long buf_len)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_send_buf = send_buf;
	unsigned long __maybe_unused __actv_local_var_buf_len = buf_len;
	__ret = ____actvcall_hmcall_test_m21(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(send_buf, __actv_local_var_send_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_len, __actv_local_var_buf_len));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m21(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *send_buf, unsigned long buf_len)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_send_buf = send_buf;
	unsigned long __maybe_unused __actv_local_var_buf_len = buf_len;
	__ret = ____actvcapcall_hmcall_test_m21(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(send_buf, __actv_local_var_send_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_len, __actv_local_var_buf_len));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m22(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m22(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m22(unsigned long long __rpc_info, void *__buf, const void *caller_send_buf, unsigned long len)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_caller_send_buf = caller_send_buf;
	unsigned long __maybe_unused __actv_local_var_len = len;
	__ret = ____actvcall_hmcall_test_m22(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(caller_send_buf, __actv_local_var_caller_send_buf), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m22(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *caller_send_buf, unsigned long len)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_caller_send_buf = caller_send_buf;
	unsigned long __maybe_unused __actv_local_var_len = len;
	__ret = ____actvcapcall_hmcall_test_m22(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(caller_send_buf, __actv_local_var_caller_send_buf), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m23(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m23(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m23(unsigned long long __rpc_info, void *__buf, void *caller_recv_buf, unsigned long len)
{
	int __ret;
	__maybe_unused void *__actv_local_var_caller_recv_buf = caller_recv_buf;
	unsigned long __maybe_unused __actv_local_var_len = len;
	__ret = ____actvcall_hmcall_test_m23(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(caller_recv_buf, __actv_local_var_caller_recv_buf), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m23(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *caller_recv_buf, unsigned long len)
{
	int __ret;
	__maybe_unused void *__actv_local_var_caller_recv_buf = caller_recv_buf;
	unsigned long __maybe_unused __actv_local_var_len = len;
	__ret = ____actvcapcall_hmcall_test_m23(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(caller_recv_buf, __actv_local_var_caller_recv_buf), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m24(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m24(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m24(unsigned long long __rpc_info, void *__buf, const void *caller_send_buf, void *caller_recv_buf, unsigned long len)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_caller_send_buf = caller_send_buf;
	__maybe_unused void *__actv_local_var_caller_recv_buf = caller_recv_buf;
	unsigned long __maybe_unused __actv_local_var_len = len;
	__ret = ____actvcall_hmcall_test_m24(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(caller_send_buf, __actv_local_var_caller_send_buf), __ARCH_ACTV_RPC_PASS_ARG(caller_recv_buf, __actv_local_var_caller_recv_buf), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m24(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *caller_send_buf, void *caller_recv_buf, unsigned long len)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_caller_send_buf = caller_send_buf;
	__maybe_unused void *__actv_local_var_caller_recv_buf = caller_recv_buf;
	unsigned long __maybe_unused __actv_local_var_len = len;
	__ret = ____actvcapcall_hmcall_test_m24(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(caller_send_buf, __actv_local_var_caller_send_buf), __ARCH_ACTV_RPC_PASS_ARG(caller_recv_buf, __actv_local_var_caller_recv_buf), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m25(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m25(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m25(unsigned long long __rpc_info, void *__buf, void *addr1, unsigned long size1)
{
	int __ret;
	__maybe_unused void *__actv_local_var_addr1 = addr1;
	unsigned long __maybe_unused __actv_local_var_size1 = size1;
	__ret = ____actvcall_hmcall_test_m25(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr1, __actv_local_var_addr1), __ARCH_ACTV_RPC_PASS_ARG(size1, __actv_local_var_size1));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m25(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *addr1, unsigned long size1)
{
	int __ret;
	__maybe_unused void *__actv_local_var_addr1 = addr1;
	unsigned long __maybe_unused __actv_local_var_size1 = size1;
	__ret = ____actvcapcall_hmcall_test_m25(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr1, __actv_local_var_addr1), __ARCH_ACTV_RPC_PASS_ARG(size1, __actv_local_var_size1));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m26(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m26(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m26(unsigned long long __rpc_info, void *__buf, const int *data)
{
	int __ret;
	__maybe_unused const int *__actv_local_var_data = data;
	__ret = ____actvcall_hmcall_test_m26(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(data, __actv_local_var_data));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m26(rref_t __rref, unsigned long long __rpc_info, void *__buf, const int *data)
{
	int __ret;
	__maybe_unused const int *__actv_local_var_data = data;
	__ret = ____actvcapcall_hmcall_test_m26(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(data, __actv_local_var_data));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m27(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m27(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m27(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_test_m27(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m27(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_test_m27(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m28(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m28(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m28(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_test_m28(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m28(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_test_m28(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m29(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m29(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m29(unsigned long long __rpc_info, void *__buf, unsigned long pc, unsigned long sp)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_pc = pc;
	unsigned long __maybe_unused __actv_local_var_sp = sp;
	__ret = ____actvcall_hmcall_test_m29(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pc, __actv_local_var_pc), __ARCH_ACTV_RPC_PASS_ARG(sp, __actv_local_var_sp));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m29(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long pc, unsigned long sp)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_pc = pc;
	unsigned long __maybe_unused __actv_local_var_sp = sp;
	__ret = ____actvcapcall_hmcall_test_m29(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pc, __actv_local_var_pc), __ARCH_ACTV_RPC_PASS_ARG(sp, __actv_local_var_sp));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m30(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m30(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m30(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_test_m30(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m30(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_test_m30(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m31(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m31(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m31(unsigned long long __rpc_info, void *__buf, struct sysif_data data)
{
	int __ret;
	struct sysif_data __maybe_unused __actv_local_var_data = data;
	__ret = ____actvcall_hmcall_test_m31(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(data, __actv_local_var_data));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m31(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct sysif_data data)
{
	int __ret;
	struct sysif_data __maybe_unused __actv_local_var_data = data;
	__ret = ____actvcapcall_hmcall_test_m31(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(data, __actv_local_var_data));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m32(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m32(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m32(unsigned long long __rpc_info, void *__buf, void *addr, unsigned long size)
{
	int __ret;
	__maybe_unused void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_test_m32(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m32(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *addr, unsigned long size)
{
	int __ret;
	__maybe_unused void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_test_m32(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m33(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m33(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m33(unsigned long long __rpc_info, void *__buf, void *addr1, unsigned long size1)
{
	int __ret;
	__maybe_unused void *__actv_local_var_addr1 = addr1;
	unsigned long __maybe_unused __actv_local_var_size1 = size1;
	__ret = ____actvcall_hmcall_test_m33(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr1, __actv_local_var_addr1), __ARCH_ACTV_RPC_PASS_ARG(size1, __actv_local_var_size1));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m33(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *addr1, unsigned long size1)
{
	int __ret;
	__maybe_unused void *__actv_local_var_addr1 = addr1;
	unsigned long __maybe_unused __actv_local_var_size1 = size1;
	__ret = ____actvcapcall_hmcall_test_m33(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr1, __actv_local_var_addr1), __ARCH_ACTV_RPC_PASS_ARG(size1, __actv_local_var_size1));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m34(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m34(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m34(unsigned long long __rpc_info, void *__buf, void *addr1, void *addr2, unsigned long size)
{
	int __ret;
	__maybe_unused void *__actv_local_var_addr1 = addr1;
	__maybe_unused void *__actv_local_var_addr2 = addr2;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_test_m34(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr1, __actv_local_var_addr1), __ARCH_ACTV_RPC_PASS_ARG(addr2, __actv_local_var_addr2), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m34(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *addr1, void *addr2, unsigned long size)
{
	int __ret;
	__maybe_unused void *__actv_local_var_addr1 = addr1;
	__maybe_unused void *__actv_local_var_addr2 = addr2;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_test_m34(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr1, __actv_local_var_addr1), __ARCH_ACTV_RPC_PASS_ARG(addr2, __actv_local_var_addr2), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_test_m35(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_test_m35(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_test_m35(unsigned long long __rpc_info, void *__buf, unsigned long cmd, void *args, unsigned long args_size, void *result, unsigned long result_size)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_cmd = cmd;
	__maybe_unused void *__actv_local_var_args = args;
	unsigned long __maybe_unused __actv_local_var_args_size = args_size;
	__maybe_unused void *__actv_local_var_result = result;
	unsigned long __maybe_unused __actv_local_var_result_size = result_size;
	__ret = ____actvcall_hmcall_test_m35(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args), __ARCH_ACTV_RPC_PASS_ARG(args_size, __actv_local_var_args_size), __ARCH_ACTV_RPC_PASS_ARG(result, __actv_local_var_result), __ARCH_ACTV_RPC_PASS_ARG(result_size, __actv_local_var_result_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_test_m35(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long cmd, void *args, unsigned long args_size, void *result, unsigned long result_size)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_cmd = cmd;
	__maybe_unused void *__actv_local_var_args = args;
	unsigned long __maybe_unused __actv_local_var_args_size = args_size;
	__maybe_unused void *__actv_local_var_result = result;
	unsigned long __maybe_unused __actv_local_var_result_size = result_size;
	__ret = ____actvcapcall_hmcall_test_m35(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args), __ARCH_ACTV_RPC_PASS_ARG(args_size, __actv_local_var_args_size), __ARCH_ACTV_RPC_PASS_ARG(result, __actv_local_var_result), __ARCH_ACTV_RPC_PASS_ARG(result_size, __actv_local_var_result_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_path_add_path(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_path_add_path(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_path_add_path(unsigned long long __rpc_info, void *__buf, cref_t cref, unsigned long grant_info, struct pathmgr_name name, mode_t mode)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_cref = cref;
	unsigned long __maybe_unused __actv_local_var_grant_info = grant_info;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	mode_t __maybe_unused __actv_local_var_mode = mode;
	__ret = ____actvcall_hmcall_path_add_path(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cref, __actv_local_var_cref), __ARCH_ACTV_RPC_PASS_ARG(grant_info, __actv_local_var_grant_info), __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_path_add_path(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t cref, unsigned long grant_info, struct pathmgr_name name, mode_t mode)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_cref = cref;
	unsigned long __maybe_unused __actv_local_var_grant_info = grant_info;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	mode_t __maybe_unused __actv_local_var_mode = mode;
	__ret = ____actvcapcall_hmcall_path_add_path(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cref, __actv_local_var_cref), __ARCH_ACTV_RPC_PASS_ARG(grant_info, __actv_local_var_grant_info), __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_path_grant_path(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_path_grant_path(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_path_grant_path(unsigned long long __rpc_info, void *__buf, struct pathmgr_name name)
{
	int __ret;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcall_hmcall_path_grant_path(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_path_grant_path(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct pathmgr_name name)
{
	int __ret;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcapcall_hmcall_path_grant_path(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_path_del_path(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_path_del_path(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_path_del_path(unsigned long long __rpc_info, void *__buf, struct pathmgr_name name)
{
	int __ret;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcall_hmcall_path_del_path(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_path_del_path(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct pathmgr_name name)
{
	int __ret;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcapcall_hmcall_path_del_path(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_path_acquire_path(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_path_acquire_path(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_path_acquire_path(unsigned long long __rpc_info, void *__buf, struct pathmgr_name name)
{
	int __ret;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcall_hmcall_path_acquire_path(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_path_acquire_path(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct pathmgr_name name)
{
	int __ret;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcapcall_hmcall_path_acquire_path(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_path_release_path(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_path_release_path(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_path_release_path(unsigned long long __rpc_info, void *__buf, struct pathmgr_name name, rref_t rref)
{
	int __ret;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	rref_t __maybe_unused __actv_local_var_rref = rref;
	__ret = ____actvcall_hmcall_path_release_path(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(rref, __actv_local_var_rref));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_path_release_path(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct pathmgr_name name, rref_t rref)
{
	int __ret;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	rref_t __maybe_unused __actv_local_var_rref = rref;
	__ret = ____actvcapcall_hmcall_path_release_path(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(rref, __actv_local_var_rref));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_path_stat(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_path_stat(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_path_stat(unsigned long long __rpc_info, void *__buf, struct pathmgr_name name, struct bunch_ipc_attr attr)
{
	int __ret;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	struct bunch_ipc_attr __maybe_unused __actv_local_var_attr = attr;
	__ret = ____actvcall_hmcall_path_stat(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_path_stat(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct pathmgr_name name, struct bunch_ipc_attr attr)
{
	int __ret;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	struct bunch_ipc_attr __maybe_unused __actv_local_var_attr = attr;
	__ret = ____actvcapcall_hmcall_path_stat(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_path_chmod(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_path_chmod(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_path_chmod(unsigned long long __rpc_info, void *__buf, struct pathmgr_name name, mode_t mode)
{
	int __ret;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	mode_t __maybe_unused __actv_local_var_mode = mode;
	__ret = ____actvcall_hmcall_path_chmod(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_path_chmod(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct pathmgr_name name, mode_t mode)
{
	int __ret;
	struct pathmgr_name __maybe_unused __actv_local_var_name = name;
	mode_t __maybe_unused __actv_local_var_mode = mode;
	__ret = ____actvcapcall_hmcall_path_chmod(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_shutdown(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_shutdown(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_shutdown(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_sysctrl_shutdown(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_shutdown(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_sysctrl_shutdown(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_reboot(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_reboot(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_reboot(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_sysctrl_reboot(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_reboot(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_sysctrl_reboot(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_sysctrl_sysconf_ulong(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_sysctrl_sysconf_ulong(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_sysconf_ulong(unsigned long long __rpc_info, void *__buf, unsigned int type)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_type = type;
	__ret = ____actvcall_hmcall_sysctrl_sysconf_ulong(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_sysconf_ulong(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int type)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_type = type;
	__ret = ____actvcapcall_hmcall_sysctrl_sysconf_ulong(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_sysconf_string(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_sysconf_string(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_sysconf_string(unsigned long long __rpc_info, void *__buf, unsigned int type, char *buf, unsigned int buflen)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_type = type;
	__maybe_unused char *__actv_local_var_buf = buf;
	unsigned int __maybe_unused __actv_local_var_buflen = buflen;
	__ret = ____actvcall_hmcall_sysctrl_sysconf_string(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type), __ARCH_ACTV_RPC_PASS_ARG(buf, __actv_local_var_buf), __ARCH_ACTV_RPC_PASS_ARG(buflen, __actv_local_var_buflen));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_sysconf_string(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int type, char *buf, unsigned int buflen)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_type = type;
	__maybe_unused char *__actv_local_var_buf = buf;
	unsigned int __maybe_unused __actv_local_var_buflen = buflen;
	__ret = ____actvcapcall_hmcall_sysctrl_sysconf_string(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type), __ARCH_ACTV_RPC_PASS_ARG(buf, __actv_local_var_buf), __ARCH_ACTV_RPC_PASS_ARG(buflen, __actv_local_var_buflen));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_sysctrl_uname(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_sysctrl_uname(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_uname(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_sysctrl_uname(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_uname(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_sysctrl_uname(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_require(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_require(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_require(unsigned long long __rpc_info, void *__buf, rref_t rref, unsigned int _mandatory_permission, unsigned int _avail_permission)
{
	int __ret;
	rref_t __maybe_unused __actv_local_var_rref = rref;
	unsigned int __maybe_unused __actv_local_var__mandatory_permission = _mandatory_permission;
	unsigned int __maybe_unused __actv_local_var__avail_permission = _avail_permission;
	__ret = ____actvcall_hmcall_sysctrl_require(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(rref, __actv_local_var_rref), __ARCH_ACTV_RPC_PASS_ARG(_mandatory_permission, __actv_local_var__mandatory_permission), __ARCH_ACTV_RPC_PASS_ARG(_avail_permission, __actv_local_var__avail_permission));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_require(rref_t __rref, unsigned long long __rpc_info, void *__buf, rref_t rref, unsigned int _mandatory_permission, unsigned int _avail_permission)
{
	int __ret;
	rref_t __maybe_unused __actv_local_var_rref = rref;
	unsigned int __maybe_unused __actv_local_var__mandatory_permission = _mandatory_permission;
	unsigned int __maybe_unused __actv_local_var__avail_permission = _avail_permission;
	__ret = ____actvcapcall_hmcall_sysctrl_require(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(rref, __actv_local_var_rref), __ARCH_ACTV_RPC_PASS_ARG(_mandatory_permission, __actv_local_var__mandatory_permission), __ARCH_ACTV_RPC_PASS_ARG(_avail_permission, __actv_local_var__avail_permission));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_sysctrl_sysinfo(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_sysctrl_sysinfo(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_sysinfo(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_sysctrl_sysinfo(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_sysinfo(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_sysctrl_sysinfo(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_cpustat(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_cpustat(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_cpustat(unsigned long long __rpc_info, void *__buf, unsigned int flags, struct bunch_ipc_attr attr)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	struct bunch_ipc_attr __maybe_unused __actv_local_var_attr = attr;
	__ret = ____actvcall_hmcall_sysctrl_cpustat(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_cpustat(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int flags, struct bunch_ipc_attr attr)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	struct bunch_ipc_attr __maybe_unused __actv_local_var_attr = attr;
	__ret = ____actvcapcall_hmcall_sysctrl_cpustat(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_attach_cpuctx(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_attach_cpuctx(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_attach_cpuctx(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_sysctrl_attach_cpuctx(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_attach_cpuctx(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_sysctrl_attach_cpuctx(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_detach_cpuctx(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_detach_cpuctx(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_detach_cpuctx(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_sysctrl_detach_cpuctx(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_detach_cpuctx(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_sysctrl_detach_cpuctx(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_sysctrl_check_cpuctx(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_sysctrl_check_cpuctx(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_check_cpuctx(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_sysctrl_check_cpuctx(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_check_cpuctx(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_sysctrl_check_cpuctx(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_set_hostname(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_set_hostname(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_set_hostname(unsigned long long __rpc_info, void *__buf, struct nodename name)
{
	int __ret;
	struct nodename __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcall_hmcall_sysctrl_set_hostname(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_set_hostname(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct nodename name)
{
	int __ret;
	struct nodename __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcapcall_hmcall_sysctrl_set_hostname(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_set_klogport_level(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_set_klogport_level(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_set_klogport_level(unsigned long long __rpc_info, void *__buf, unsigned long type_flag, unsigned int level)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_type_flag = type_flag;
	unsigned int __maybe_unused __actv_local_var_level = level;
	__ret = ____actvcall_hmcall_sysctrl_set_klogport_level(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type_flag, __actv_local_var_type_flag), __ARCH_ACTV_RPC_PASS_ARG(level, __actv_local_var_level));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_set_klogport_level(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long type_flag, unsigned int level)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_type_flag = type_flag;
	unsigned int __maybe_unused __actv_local_var_level = level;
	__ret = ____actvcapcall_hmcall_sysctrl_set_klogport_level(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type_flag, __actv_local_var_type_flag), __ARCH_ACTV_RPC_PASS_ARG(level, __actv_local_var_level));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_enable_klogport(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_enable_klogport(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_enable_klogport(unsigned long long __rpc_info, void *__buf, unsigned long type_flag)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_type_flag = type_flag;
	__ret = ____actvcall_hmcall_sysctrl_enable_klogport(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type_flag, __actv_local_var_type_flag));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_enable_klogport(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long type_flag)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_type_flag = type_flag;
	__ret = ____actvcapcall_hmcall_sysctrl_enable_klogport(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type_flag, __actv_local_var_type_flag));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_disable_klogport(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_disable_klogport(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_disable_klogport(unsigned long long __rpc_info, void *__buf, unsigned long type_flag)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_type_flag = type_flag;
	__ret = ____actvcall_hmcall_sysctrl_disable_klogport(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type_flag, __actv_local_var_type_flag));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_disable_klogport(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long type_flag)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_type_flag = type_flag;
	__ret = ____actvcapcall_hmcall_sysctrl_disable_klogport(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type_flag, __actv_local_var_type_flag));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_sysctrl_kev_read_event_number(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_sysctrl_kev_read_event_number(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_kev_read_event_number(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_sysctrl_kev_read_event_number(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_kev_read_event_number(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_sysctrl_kev_read_event_number(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_sysctrl_kev_read_event_config(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_sysctrl_kev_read_event_config(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_kev_read_event_config(unsigned long long __rpc_info, void *__buf, unsigned int event_type)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_event_type = event_type;
	__ret = ____actvcall_hmcall_sysctrl_kev_read_event_config(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(event_type, __actv_local_var_event_type));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_kev_read_event_config(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int event_type)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_event_type = event_type;
	__ret = ____actvcapcall_hmcall_sysctrl_kev_read_event_config(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(event_type, __actv_local_var_event_type));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_kev_set_enable(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_kev_set_enable(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_kev_set_enable(unsigned long long __rpc_info, void *__buf, struct trace_event event)
{
	int __ret;
	struct trace_event __maybe_unused __actv_local_var_event = event;
	__ret = ____actvcall_hmcall_sysctrl_kev_set_enable(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(event, __actv_local_var_event));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_kev_set_enable(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct trace_event event)
{
	int __ret;
	struct trace_event __maybe_unused __actv_local_var_event = event;
	__ret = ____actvcapcall_hmcall_sysctrl_kev_set_enable(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(event, __actv_local_var_event));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_kev_set_filter(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_kev_set_filter(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_kev_set_filter(unsigned long long __rpc_info, void *__buf, struct trace_event event)
{
	int __ret;
	struct trace_event __maybe_unused __actv_local_var_event = event;
	__ret = ____actvcall_hmcall_sysctrl_kev_set_filter(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(event, __actv_local_var_event));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_kev_set_filter(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct trace_event event)
{
	int __ret;
	struct trace_event __maybe_unused __actv_local_var_event = event;
	__ret = ____actvcapcall_hmcall_sysctrl_kev_set_filter(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(event, __actv_local_var_event));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_kev_print(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_kev_print(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_kev_print(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_sysctrl_kev_print(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_kev_print(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_sysctrl_kev_print(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysctrl_kev_klog(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysctrl_kev_klog(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysctrl_kev_klog(unsigned long long __rpc_info, void *__buf, unsigned long level, const char *str, unsigned long size)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_level = level;
	__maybe_unused const char *__actv_local_var_str = str;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_sysctrl_kev_klog(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(level, __actv_local_var_level), __ARCH_ACTV_RPC_PASS_ARG(str, __actv_local_var_str), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysctrl_kev_klog(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long level, const char *str, unsigned long size)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_level = level;
	__maybe_unused const char *__actv_local_var_str = str;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_sysctrl_kev_klog(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(level, __actv_local_var_level), __ARCH_ACTV_RPC_PASS_ARG(str, __actv_local_var_str), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_mmap(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_mmap(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_mmap(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	unsigned int __maybe_unused __actv_local_var_file_type = file_type;
	struct fs_service_name __maybe_unused __actv_local_var_service_name = service_name;
	long long __maybe_unused __actv_local_var_offset = offset;
	int __maybe_unused __actv_local_var_fd = fd;
	__ret = ____actvcall_hmcall_mem_mmap(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(file_type, __actv_local_var_file_type), __ARCH_ACTV_RPC_PASS_ARG(service_name, __actv_local_var_service_name), __ARCH_ACTV_RPC_PASS_ARG(offset, __actv_local_var_offset), __ARCH_ACTV_RPC_PASS_ARG(fd, __actv_local_var_fd));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_mmap(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	unsigned int __maybe_unused __actv_local_var_file_type = file_type;
	struct fs_service_name __maybe_unused __actv_local_var_service_name = service_name;
	long long __maybe_unused __actv_local_var_offset = offset;
	int __maybe_unused __actv_local_var_fd = fd;
	__ret = ____actvcapcall_hmcall_mem_mmap(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(file_type, __actv_local_var_file_type), __ARCH_ACTV_RPC_PASS_ARG(service_name, __actv_local_var_service_name), __ARCH_ACTV_RPC_PASS_ARG(offset, __actv_local_var_offset), __ARCH_ACTV_RPC_PASS_ARG(fd, __actv_local_var_fd));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_munmap(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_munmap(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_munmap(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	__ret = ____actvcall_hmcall_mem_munmap(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_munmap(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	__ret = ____actvcapcall_hmcall_mem_munmap(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_mremap(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_mremap(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_mremap(unsigned long long __rpc_info, void *__buf, void *old_addr, unsigned long old_len, unsigned long new_len, unsigned int flags, void *new_addr)
{
	int __ret;
	__maybe_unused void *__actv_local_var_old_addr = old_addr;
	unsigned long __maybe_unused __actv_local_var_old_len = old_len;
	unsigned long __maybe_unused __actv_local_var_new_len = new_len;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__maybe_unused void *__actv_local_var_new_addr = new_addr;
	__ret = ____actvcall_hmcall_mem_mremap(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(old_addr, __actv_local_var_old_addr), __ARCH_ACTV_RPC_PASS_ARG(old_len, __actv_local_var_old_len), __ARCH_ACTV_RPC_PASS_ARG(new_len, __actv_local_var_new_len), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(new_addr, __actv_local_var_new_addr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_mremap(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *old_addr, unsigned long old_len, unsigned long new_len, unsigned int flags, void *new_addr)
{
	int __ret;
	__maybe_unused void *__actv_local_var_old_addr = old_addr;
	unsigned long __maybe_unused __actv_local_var_old_len = old_len;
	unsigned long __maybe_unused __actv_local_var_new_len = new_len;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__maybe_unused void *__actv_local_var_new_addr = new_addr;
	__ret = ____actvcapcall_hmcall_mem_mremap(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(old_addr, __actv_local_var_old_addr), __ARCH_ACTV_RPC_PASS_ARG(old_len, __actv_local_var_old_len), __ARCH_ACTV_RPC_PASS_ARG(new_len, __actv_local_var_new_len), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(new_addr, __actv_local_var_new_addr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_alloc_kmem(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_alloc_kmem(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_alloc_kmem(unsigned long long __rpc_info, void *__buf, unsigned long size)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_mem_alloc_kmem(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_alloc_kmem(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long size)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_mem_alloc_kmem(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_free_kmem(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_free_kmem(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_free_kmem(unsigned long long __rpc_info, void *__buf, unsigned long vstart)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_vstart = vstart;
	__ret = ____actvcall_hmcall_mem_free_kmem(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vstart, __actv_local_var_vstart));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_free_kmem(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long vstart)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_vstart = vstart;
	__ret = ____actvcapcall_hmcall_mem_free_kmem(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vstart, __actv_local_var_vstart));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_alloc_pmem(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_alloc_pmem(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_alloc_pmem(unsigned long long __rpc_info, void *__buf, unsigned long size)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_mem_alloc_pmem(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_alloc_pmem(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long size)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_mem_alloc_pmem(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_free_pmem(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_free_pmem(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_free_pmem(unsigned long long __rpc_info, void *__buf, unsigned long long pmem_cref)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_pmem_cref = pmem_cref;
	__ret = ____actvcall_hmcall_mem_free_pmem(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pmem_cref, __actv_local_var_pmem_cref));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_free_pmem(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long pmem_cref)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_pmem_cref = pmem_cref;
	__ret = ____actvcapcall_hmcall_mem_free_pmem(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pmem_cref, __actv_local_var_pmem_cref));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_brk(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_brk(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_brk(unsigned long long __rpc_info, void *__buf, const void *brk)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_brk = brk;
	__ret = ____actvcall_hmcall_mem_brk(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(brk, __actv_local_var_brk));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_brk(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *brk)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_brk = brk;
	__ret = ____actvcapcall_hmcall_mem_brk(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(brk, __actv_local_var_brk));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_madvise(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_madvise(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_madvise(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int flags)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcall_hmcall_mem_madvise(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_madvise(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int flags)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcapcall_hmcall_mem_madvise(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_mprotect(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_mprotect(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_mprotect(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int prot)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	__ret = ____actvcall_hmcall_mem_mprotect(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_mprotect(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int prot)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	__ret = ____actvcapcall_hmcall_mem_mprotect(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_msync(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_msync(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_msync(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int flags)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcall_hmcall_mem_msync(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_msync(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int flags)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcapcall_hmcall_mem_msync(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_mlock(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_mlock(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_mlock(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	__ret = ____actvcall_hmcall_mem_mlock(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_mlock(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	__ret = ____actvcapcall_hmcall_mem_mlock(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_munlock(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_munlock(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_munlock(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	__ret = ____actvcall_hmcall_mem_munlock(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_munlock(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	__ret = ____actvcapcall_hmcall_mem_munlock(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_mlockall(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_mlockall(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_mlockall(unsigned long long __rpc_info, void *__buf, unsigned int flags)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcall_hmcall_mem_mlockall(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_mlockall(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int flags)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcapcall_hmcall_mem_mlockall(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_munlockall(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_munlockall(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_munlockall(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_mem_munlockall(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_munlockall(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_mem_munlockall(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_drop_file_cache(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_drop_file_cache(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_drop_file_cache(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_mem_drop_file_cache(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_drop_file_cache(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_mem_drop_file_cache(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_ioremap_prepare(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_ioremap_prepare(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_ioremap_prepare(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int prot, unsigned int flags)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcall_hmcall_mem_ioremap_prepare(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_ioremap_prepare(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, unsigned int prot, unsigned int flags)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcapcall_hmcall_mem_ioremap_prepare(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_iomem_mmap_page(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_iomem_mmap_page(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_iomem_mmap_page(unsigned long long __rpc_info, void *__buf, unsigned long long vspace_rref, unsigned long long paddr, void *vaddr, unsigned long len, unsigned long long hint)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_vspace_rref = vspace_rref;
	unsigned long long __maybe_unused __actv_local_var_paddr = paddr;
	__maybe_unused void *__actv_local_var_vaddr = vaddr;
	unsigned long __maybe_unused __actv_local_var_len = len;
	unsigned long long __maybe_unused __actv_local_var_hint = hint;
	__ret = ____actvcall_hmcall_mem_iomem_mmap_page(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vspace_rref, __actv_local_var_vspace_rref), __ARCH_ACTV_RPC_PASS_ARG(paddr, __actv_local_var_paddr), __ARCH_ACTV_RPC_PASS_ARG(vaddr, __actv_local_var_vaddr), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len), __ARCH_ACTV_RPC_PASS_ARG(hint, __actv_local_var_hint));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_iomem_mmap_page(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long vspace_rref, unsigned long long paddr, void *vaddr, unsigned long len, unsigned long long hint)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_vspace_rref = vspace_rref;
	unsigned long long __maybe_unused __actv_local_var_paddr = paddr;
	__maybe_unused void *__actv_local_var_vaddr = vaddr;
	unsigned long __maybe_unused __actv_local_var_len = len;
	unsigned long long __maybe_unused __actv_local_var_hint = hint;
	__ret = ____actvcapcall_hmcall_mem_iomem_mmap_page(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vspace_rref, __actv_local_var_vspace_rref), __ARCH_ACTV_RPC_PASS_ARG(paddr, __actv_local_var_paddr), __ARCH_ACTV_RPC_PASS_ARG(vaddr, __actv_local_var_vaddr), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len), __ARCH_ACTV_RPC_PASS_ARG(hint, __actv_local_var_hint));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_file_mapping_stat(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_file_mapping_stat(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_file_mapping_stat(unsigned long long __rpc_info, void *__buf, unsigned int index, unsigned long long dev_id)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_index = index;
	unsigned long long __maybe_unused __actv_local_var_dev_id = dev_id;
	__ret = ____actvcall_hmcall_mem_file_mapping_stat(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(index, __actv_local_var_index), __ARCH_ACTV_RPC_PASS_ARG(dev_id, __actv_local_var_dev_id));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_file_mapping_stat(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int index, unsigned long long dev_id)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_index = index;
	unsigned long long __maybe_unused __actv_local_var_dev_id = dev_id;
	__ret = ____actvcapcall_hmcall_mem_file_mapping_stat(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(index, __actv_local_var_index), __ARCH_ACTV_RPC_PASS_ARG(dev_id, __actv_local_var_dev_id));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_shm_open(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_shm_open(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_shm_open(unsigned long long __rpc_info, void *__buf, struct memmgr_shm_name name, unsigned long len, unsigned long long oflag, mode_t mode)
{
	int __ret;
	struct memmgr_shm_name __maybe_unused __actv_local_var_name = name;
	unsigned long __maybe_unused __actv_local_var_len = len;
	unsigned long long __maybe_unused __actv_local_var_oflag = oflag;
	mode_t __maybe_unused __actv_local_var_mode = mode;
	__ret = ____actvcall_hmcall_mem_shm_open(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len), __ARCH_ACTV_RPC_PASS_ARG(oflag, __actv_local_var_oflag), __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_shm_open(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct memmgr_shm_name name, unsigned long len, unsigned long long oflag, mode_t mode)
{
	int __ret;
	struct memmgr_shm_name __maybe_unused __actv_local_var_name = name;
	unsigned long __maybe_unused __actv_local_var_len = len;
	unsigned long long __maybe_unused __actv_local_var_oflag = oflag;
	mode_t __maybe_unused __actv_local_var_mode = mode;
	__ret = ____actvcapcall_hmcall_mem_shm_open(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len), __ARCH_ACTV_RPC_PASS_ARG(oflag, __actv_local_var_oflag), __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_shm_open_anon(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_shm_open_anon(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_shm_open_anon(unsigned long long __rpc_info, void *__buf, unsigned long long key, unsigned long long oflag, unsigned long len)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_key = key;
	unsigned long long __maybe_unused __actv_local_var_oflag = oflag;
	unsigned long __maybe_unused __actv_local_var_len = len;
	__ret = ____actvcall_hmcall_mem_shm_open_anon(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(oflag, __actv_local_var_oflag), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_shm_open_anon(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long key, unsigned long long oflag, unsigned long len)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_key = key;
	unsigned long long __maybe_unused __actv_local_var_oflag = oflag;
	unsigned long __maybe_unused __actv_local_var_len = len;
	__ret = ____actvcapcall_hmcall_mem_shm_open_anon(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(oflag, __actv_local_var_oflag), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_shm_unlink(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_shm_unlink(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_shm_unlink(unsigned long long __rpc_info, void *__buf, struct memmgr_shm_name name)
{
	int __ret;
	struct memmgr_shm_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcall_hmcall_mem_shm_unlink(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_shm_unlink(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct memmgr_shm_name name)
{
	int __ret;
	struct memmgr_shm_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcapcall_hmcall_mem_shm_unlink(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_shm_unlink_anon(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_shm_unlink_anon(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_shm_unlink_anon(unsigned long long __rpc_info, void *__buf, int shm_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__ret = ____actvcall_hmcall_mem_shm_unlink_anon(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_shm_unlink_anon(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__ret = ____actvcapcall_hmcall_mem_shm_unlink_anon(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_shm_close(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_shm_close(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_shm_close(unsigned long long __rpc_info, void *__buf, int shm_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__ret = ____actvcall_hmcall_mem_shm_close(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_shm_close(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__ret = ____actvcapcall_hmcall_mem_shm_close(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_shm_check_owner(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_shm_check_owner(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_shm_check_owner(unsigned long long __rpc_info, void *__buf, unsigned long long key, unsigned int cnode_idx)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_key = key;
	unsigned int __maybe_unused __actv_local_var_cnode_idx = cnode_idx;
	__ret = ____actvcall_hmcall_mem_shm_check_owner(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(cnode_idx, __actv_local_var_cnode_idx));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_shm_check_owner(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long key, unsigned int cnode_idx)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_key = key;
	unsigned int __maybe_unused __actv_local_var_cnode_idx = cnode_idx;
	__ret = ____actvcapcall_hmcall_mem_shm_check_owner(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(cnode_idx, __actv_local_var_cnode_idx));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_shm_reclaim_pages(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_shm_reclaim_pages(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_shm_reclaim_pages(unsigned long long __rpc_info, void *__buf, int shm_id, const void *start_addr, unsigned long nr_pages)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__maybe_unused const void *__actv_local_var_start_addr = start_addr;
	unsigned long __maybe_unused __actv_local_var_nr_pages = nr_pages;
	__ret = ____actvcall_hmcall_mem_shm_reclaim_pages(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(start_addr, __actv_local_var_start_addr), __ARCH_ACTV_RPC_PASS_ARG(nr_pages, __actv_local_var_nr_pages));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_shm_reclaim_pages(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, const void *start_addr, unsigned long nr_pages)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__maybe_unused const void *__actv_local_var_start_addr = start_addr;
	unsigned long __maybe_unused __actv_local_var_nr_pages = nr_pages;
	__ret = ____actvcapcall_hmcall_mem_shm_reclaim_pages(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(start_addr, __actv_local_var_start_addr), __ARCH_ACTV_RPC_PASS_ARG(nr_pages, __actv_local_var_nr_pages));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_grant_shm_to_caller(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_grant_shm_to_caller(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_grant_shm_to_caller(unsigned long long __rpc_info, void *__buf, int shm_id, unsigned int prot)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	__ret = ____actvcall_hmcall_mem_grant_shm_to_caller(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_grant_shm_to_caller(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, unsigned int prot)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	__ret = ____actvcapcall_hmcall_mem_grant_shm_to_caller(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_grant_shm_by_xref(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_grant_shm_by_xref(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_grant_shm_by_xref(unsigned long long __rpc_info, void *__buf, int shm_id, unsigned int prot, xref_t xref)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	xref_t __maybe_unused __actv_local_var_xref = xref;
	__ret = ____actvcall_hmcall_mem_grant_shm_by_xref(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(xref, __actv_local_var_xref));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_grant_shm_by_xref(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, unsigned int prot, xref_t xref)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	xref_t __maybe_unused __actv_local_var_xref = xref;
	__ret = ____actvcapcall_hmcall_mem_grant_shm_by_xref(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(xref, __actv_local_var_xref));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_ashm_grant_trans(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_ashm_grant_trans(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_ashm_grant_trans(unsigned long long __rpc_info, void *__buf, unsigned long long key, xref_t xref)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_key = key;
	xref_t __maybe_unused __actv_local_var_xref = xref;
	__ret = ____actvcall_hmcall_mem_ashm_grant_trans(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(xref, __actv_local_var_xref));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_ashm_grant_trans(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long key, xref_t xref)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_key = key;
	xref_t __maybe_unused __actv_local_var_xref = xref;
	__ret = ____actvcapcall_hmcall_mem_ashm_grant_trans(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(xref, __actv_local_var_xref));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_query_shm_info(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_query_shm_info(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_query_shm_info(unsigned long long __rpc_info, void *__buf, int shm_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__ret = ____actvcall_hmcall_mem_query_shm_info(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_query_shm_info(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__ret = ____actvcapcall_hmcall_mem_query_shm_info(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_query_shm_paddr(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_query_shm_paddr(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_query_shm_paddr(unsigned long long __rpc_info, void *__buf, int shm_id, unsigned long long *dst, unsigned long size)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__maybe_unused unsigned long long *__actv_local_var_dst = dst;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_mem_query_shm_paddr(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(dst, __actv_local_var_dst), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_query_shm_paddr(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, unsigned long long *dst, unsigned long size)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__maybe_unused unsigned long long *__actv_local_var_dst = dst;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_mem_query_shm_paddr(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(dst, __actv_local_var_dst), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_shm_dump_info(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_shm_dump_info(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_shm_dump_info(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_mem_shm_dump_info(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_shm_dump_info(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_mem_shm_dump_info(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_shm_chmod(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_shm_chmod(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_shm_chmod(unsigned long long __rpc_info, void *__buf, struct memmgr_shm_name name, mode_t mode)
{
	int __ret;
	struct memmgr_shm_name __maybe_unused __actv_local_var_name = name;
	mode_t __maybe_unused __actv_local_var_mode = mode;
	__ret = ____actvcall_hmcall_mem_shm_chmod(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_shm_chmod(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct memmgr_shm_name name, mode_t mode)
{
	int __ret;
	struct memmgr_shm_name __maybe_unused __actv_local_var_name = name;
	mode_t __maybe_unused __actv_local_var_mode = mode;
	__ret = ____actvcapcall_hmcall_mem_shm_chmod(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_extend_ctable(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_extend_ctable(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_extend_ctable(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_mem_extend_ctable(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_extend_ctable(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_mem_extend_ctable(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_extend_utable(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_extend_utable(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_extend_utable(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_mem_extend_utable(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_extend_utable(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_mem_extend_utable(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_extend_rtable(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_extend_rtable(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_extend_rtable(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_mem_extend_rtable(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_extend_rtable(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_mem_extend_rtable(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_stat(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_stat(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_stat(unsigned long long __rpc_info, void *__buf, unsigned int flags, struct bunch_ipc_attr attr)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	struct bunch_ipc_attr __maybe_unused __actv_local_var_attr = attr;
	__ret = ____actvcall_hmcall_mem_stat(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_stat(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int flags, struct bunch_ipc_attr attr)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	struct bunch_ipc_attr __maybe_unused __actv_local_var_attr = attr;
	__ret = ____actvcapcall_hmcall_mem_stat(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_set_anon_name(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_set_anon_name(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_set_anon_name(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, struct vr_anon_name anon_name)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	struct vr_anon_name __maybe_unused __actv_local_var_anon_name = anon_name;
	__ret = ____actvcall_hmcall_mem_set_anon_name(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(anon_name, __actv_local_var_anon_name));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_set_anon_name(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long length, struct vr_anon_name anon_name)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_length = length;
	struct vr_anon_name __maybe_unused __actv_local_var_anon_name = anon_name;
	__ret = ____actvcapcall_hmcall_mem_set_anon_name(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(anon_name, __actv_local_var_anon_name));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_process_vm_access(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_process_vm_access(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_process_vm_access(unsigned long long __rpc_info, void *__buf, int pid, int direction, const void *local_addr, unsigned long llen, const void *remote_addr, unsigned long rlen, unsigned int flags)
{
	int __ret;
	int __maybe_unused __actv_local_var_pid = pid;
	int __maybe_unused __actv_local_var_direction = direction;
	__maybe_unused const void *__actv_local_var_local_addr = local_addr;
	unsigned long __maybe_unused __actv_local_var_llen = llen;
	__maybe_unused const void *__actv_local_var_remote_addr = remote_addr;
	unsigned long __maybe_unused __actv_local_var_rlen = rlen;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcall_hmcall_mem_process_vm_access(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(direction, __actv_local_var_direction), __ARCH_ACTV_RPC_PASS_ARG(local_addr, __actv_local_var_local_addr), __ARCH_ACTV_RPC_PASS_ARG(llen, __actv_local_var_llen), __ARCH_ACTV_RPC_PASS_ARG(remote_addr, __actv_local_var_remote_addr), __ARCH_ACTV_RPC_PASS_ARG(rlen, __actv_local_var_rlen), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_process_vm_access(rref_t __rref, unsigned long long __rpc_info, void *__buf, int pid, int direction, const void *local_addr, unsigned long llen, const void *remote_addr, unsigned long rlen, unsigned int flags)
{
	int __ret;
	int __maybe_unused __actv_local_var_pid = pid;
	int __maybe_unused __actv_local_var_direction = direction;
	__maybe_unused const void *__actv_local_var_local_addr = local_addr;
	unsigned long __maybe_unused __actv_local_var_llen = llen;
	__maybe_unused const void *__actv_local_var_remote_addr = remote_addr;
	unsigned long __maybe_unused __actv_local_var_rlen = rlen;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcapcall_hmcall_mem_process_vm_access(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(direction, __actv_local_var_direction), __ARCH_ACTV_RPC_PASS_ARG(local_addr, __actv_local_var_local_addr), __ARCH_ACTV_RPC_PASS_ARG(llen, __actv_local_var_llen), __ARCH_ACTV_RPC_PASS_ARG(remote_addr, __actv_local_var_remote_addr), __ARCH_ACTV_RPC_PASS_ARG(rlen, __actv_local_var_rlen), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_mincore(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_mincore(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_mincore(unsigned long long __rpc_info, void *__buf, const void *addr, size_t length, const unsigned char *vec)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	size_t __maybe_unused __actv_local_var_length = length;
	__maybe_unused const unsigned char *__actv_local_var_vec = vec;
	__ret = ____actvcall_hmcall_mem_mincore(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(vec, __actv_local_var_vec));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_mincore(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, size_t length, const unsigned char *vec)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	size_t __maybe_unused __actv_local_var_length = length;
	__maybe_unused const unsigned char *__actv_local_var_vec = vec;
	__ret = ____actvcapcall_hmcall_mem_mincore(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(vec, __actv_local_var_vec));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_calculate(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_calculate(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_calculate(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_mem_calculate(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_calculate(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_mem_calculate(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_rmap_unmap_page(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_rmap_unmap_page(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_rmap_unmap_page(unsigned long long __rpc_info, void *__buf, const void *addr)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	__ret = ____actvcall_hmcall_mem_rmap_unmap_page(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_rmap_unmap_page(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	__ret = ____actvcapcall_hmcall_mem_rmap_unmap_page(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_fs_stat_register(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_fs_stat_register(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_fs_stat_register(unsigned long long __rpc_info, void *__buf, const void *stat_addr)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_stat_addr = stat_addr;
	__ret = ____actvcall_hmcall_mem_fs_stat_register(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(stat_addr, __actv_local_var_stat_addr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_fs_stat_register(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *stat_addr)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_stat_addr = stat_addr;
	__ret = ____actvcapcall_hmcall_mem_fs_stat_register(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(stat_addr, __actv_local_var_stat_addr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_hugetlbfs_mount(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_hugetlbfs_mount(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_hugetlbfs_mount(unsigned long long __rpc_info, void *__buf, struct hgtlb_mount_args_s args)
{
	int __ret;
	struct hgtlb_mount_args_s __maybe_unused __actv_local_var_args = args;
	__ret = ____actvcall_hmcall_mem_hugetlbfs_mount(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_hugetlbfs_mount(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hgtlb_mount_args_s args)
{
	int __ret;
	struct hgtlb_mount_args_s __maybe_unused __actv_local_var_args = args;
	__ret = ____actvcapcall_hmcall_mem_hugetlbfs_mount(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_register_devhost(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_register_devhost(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_register_devhost(unsigned long long __rpc_info, void *__buf, unsigned long long devhost_uref)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_devhost_uref = devhost_uref;
	__ret = ____actvcall_hmcall_mem_register_devhost(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(devhost_uref, __actv_local_var_devhost_uref));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_register_devhost(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long devhost_uref)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_devhost_uref = devhost_uref;
	__ret = ____actvcapcall_hmcall_mem_register_devhost(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(devhost_uref, __actv_local_var_devhost_uref));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_iomap_prepare(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_iomap_prepare(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_iomap_prepare(unsigned long long __rpc_info, void *__buf, const void *va, unsigned long len, unsigned int iomem_id, unsigned int prot, unsigned int flags)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_va = va;
	unsigned long __maybe_unused __actv_local_var_len = len;
	unsigned int __maybe_unused __actv_local_var_iomem_id = iomem_id;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcall_hmcall_mem_iomap_prepare(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(va, __actv_local_var_va), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len), __ARCH_ACTV_RPC_PASS_ARG(iomem_id, __actv_local_var_iomem_id), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_iomap_prepare(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *va, unsigned long len, unsigned int iomem_id, unsigned int prot, unsigned int flags)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_va = va;
	unsigned long __maybe_unused __actv_local_var_len = len;
	unsigned int __maybe_unused __actv_local_var_iomem_id = iomem_id;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcapcall_hmcall_mem_iomap_prepare(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(va, __actv_local_var_va), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len), __ARCH_ACTV_RPC_PASS_ARG(iomem_id, __actv_local_var_iomem_id), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_iomap_populate(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_iomap_populate(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_iomap_populate(unsigned long long __rpc_info, void *__buf, const void *va, unsigned long len, unsigned long long pa, unsigned long long hint)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_va = va;
	unsigned long __maybe_unused __actv_local_var_len = len;
	unsigned long long __maybe_unused __actv_local_var_pa = pa;
	unsigned long long __maybe_unused __actv_local_var_hint = hint;
	__ret = ____actvcall_hmcall_mem_iomap_populate(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(va, __actv_local_var_va), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len), __ARCH_ACTV_RPC_PASS_ARG(pa, __actv_local_var_pa), __ARCH_ACTV_RPC_PASS_ARG(hint, __actv_local_var_hint));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_iomap_populate(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *va, unsigned long len, unsigned long long pa, unsigned long long hint)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_va = va;
	unsigned long __maybe_unused __actv_local_var_len = len;
	unsigned long long __maybe_unused __actv_local_var_pa = pa;
	unsigned long long __maybe_unused __actv_local_var_hint = hint;
	__ret = ____actvcapcall_hmcall_mem_iomap_populate(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(va, __actv_local_var_va), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len), __ARCH_ACTV_RPC_PASS_ARG(pa, __actv_local_var_pa), __ARCH_ACTV_RPC_PASS_ARG(hint, __actv_local_var_hint));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_iomap_finish(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_iomap_finish(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_iomap_finish(unsigned long long __rpc_info, void *__buf, const void *va, unsigned int flag)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_va = va;
	unsigned int __maybe_unused __actv_local_var_flag = flag;
	__ret = ____actvcall_hmcall_mem_iomap_finish(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(va, __actv_local_var_va), __ARCH_ACTV_RPC_PASS_ARG(flag, __actv_local_var_flag));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_iomap_finish(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *va, unsigned int flag)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_va = va;
	unsigned int __maybe_unused __actv_local_var_flag = flag;
	__ret = ____actvcapcall_hmcall_mem_iomap_finish(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(va, __actv_local_var_va), __ARCH_ACTV_RPC_PASS_ARG(flag, __actv_local_var_flag));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_iomap_statpage(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_iomap_statpage(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_iomap_statpage(unsigned long long __rpc_info, void *__buf, const void *va)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_va = va;
	__ret = ____actvcall_hmcall_mem_iomap_statpage(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(va, __actv_local_var_va));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_iomap_statpage(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *va)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_va = va;
	__ret = ____actvcapcall_hmcall_mem_iomap_statpage(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(va, __actv_local_var_va));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_cma_dyn_init(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_cma_dyn_init(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_cma_dyn_init(unsigned long long __rpc_info, void *__buf, unsigned long size)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_mem_cma_dyn_init(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_cma_dyn_init(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long size)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_mem_cma_dyn_init(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mem_cma_alloc(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mem_cma_alloc(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_cma_alloc(unsigned long long __rpc_info, void *__buf, unsigned int cma_id, unsigned long size)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_cma_id = cma_id;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_mem_cma_alloc(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cma_id, __actv_local_var_cma_id), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_cma_alloc(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int cma_id, unsigned long size)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_cma_id = cma_id;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_mem_cma_alloc(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cma_id, __actv_local_var_cma_id), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mem_cma_free(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mem_cma_free(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mem_cma_free(unsigned long long __rpc_info, void *__buf, unsigned int cma_id, unsigned long long paddr, unsigned long size)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_cma_id = cma_id;
	unsigned long long __maybe_unused __actv_local_var_paddr = paddr;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_mem_cma_free(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cma_id, __actv_local_var_cma_id), __ARCH_ACTV_RPC_PASS_ARG(paddr, __actv_local_var_paddr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mem_cma_free(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int cma_id, unsigned long long paddr, unsigned long size)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_cma_id = cma_id;
	unsigned long long __maybe_unused __actv_local_var_paddr = paddr;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_mem_cma_free(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cma_id, __actv_local_var_cma_id), __ARCH_ACTV_RPC_PASS_ARG(paddr, __actv_local_var_paddr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_spawn(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_spawn(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_spawn(unsigned long long __rpc_info, void *__buf, struct hm_spawn_req req)
{
	int __ret;
	struct hm_spawn_req __maybe_unused __actv_local_var_req = req;
	__ret = ____actvcall_hmcall_proc_spawn(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(req, __actv_local_var_req));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_spawn(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_spawn_req req)
{
	int __ret;
	struct hm_spawn_req __maybe_unused __actv_local_var_req = req;
	__ret = ____actvcapcall_hmcall_proc_spawn(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(req, __actv_local_var_req));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_waitid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_waitid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_waitid(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int options, void *infop)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_options = options;
	__maybe_unused void *__actv_local_var_infop = infop;
	__ret = ____actvcall_hmcall_proc_waitid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(options, __actv_local_var_options), __ARCH_ACTV_RPC_PASS_ARG(infop, __actv_local_var_infop));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_waitid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int options, void *infop)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_options = options;
	__maybe_unused void *__actv_local_var_infop = infop;
	__ret = ____actvcapcall_hmcall_proc_waitid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(options, __actv_local_var_options), __ARCH_ACTV_RPC_PASS_ARG(infop, __actv_local_var_infop));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_wait4(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_wait4(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_wait4(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int options, void *ru)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_options = options;
	__maybe_unused void *__actv_local_var_ru = ru;
	__ret = ____actvcall_hmcall_proc_wait4(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(options, __actv_local_var_options), __ARCH_ACTV_RPC_PASS_ARG(ru, __actv_local_var_ru));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_wait4(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int options, void *ru)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_options = options;
	__maybe_unused void *__actv_local_var_ru = ru;
	__ret = ____actvcapcall_hmcall_proc_wait4(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(options, __actv_local_var_options), __ARCH_ACTV_RPC_PASS_ARG(ru, __actv_local_var_ru));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_exit(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_exit(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_exit(unsigned long long __rpc_info, void *__buf, unsigned int exit_status)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_exit_status = exit_status;
	__ret = ____actvcall_hmcall_proc_exit(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(exit_status, __actv_local_var_exit_status));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_exit(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int exit_status)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_exit_status = exit_status;
	__ret = ____actvcapcall_hmcall_proc_exit(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(exit_status, __actv_local_var_exit_status));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_getpid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_getpid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getpid(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_getpid(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getpid(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_getpid(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_pid_of(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_pid_of(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_pid_of(unsigned long long __rpc_info, void *__buf, unsigned int cnode_idx)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_cnode_idx = cnode_idx;
	__ret = ____actvcall_hmcall_proc_pid_of(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cnode_idx, __actv_local_var_cnode_idx));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_pid_of(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int cnode_idx)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_cnode_idx = cnode_idx;
	__ret = ____actvcapcall_hmcall_proc_pid_of(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cnode_idx, __actv_local_var_cnode_idx));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_getppid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_getppid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getppid(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_getppid(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getppid(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_getppid(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_cnode_idx_of(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_cnode_idx_of(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_cnode_idx_of(unsigned long long __rpc_info, void *__buf, pid_t pid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__ret = ____actvcall_hmcall_proc_cnode_idx_of(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_cnode_idx_of(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__ret = ____actvcapcall_hmcall_proc_cnode_idx_of(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_getpgid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_getpgid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getpgid(unsigned long long __rpc_info, void *__buf, pid_t pid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__ret = ____actvcall_hmcall_proc_getpgid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getpgid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__ret = ____actvcapcall_hmcall_proc_getpgid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setpgid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setpgid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setpgid(unsigned long long __rpc_info, void *__buf, pid_t pid, pid_t dst_pgrp)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	pid_t __maybe_unused __actv_local_var_dst_pgrp = dst_pgrp;
	__ret = ____actvcall_hmcall_proc_setpgid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(dst_pgrp, __actv_local_var_dst_pgrp));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setpgid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, pid_t dst_pgrp)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	pid_t __maybe_unused __actv_local_var_dst_pgrp = dst_pgrp;
	__ret = ____actvcapcall_hmcall_proc_setpgid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(dst_pgrp, __actv_local_var_dst_pgrp));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_getsid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_getsid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getsid(unsigned long long __rpc_info, void *__buf, pid_t pid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__ret = ____actvcall_hmcall_proc_getsid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getsid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__ret = ____actvcapcall_hmcall_proc_getsid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setsid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setsid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setsid(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_setsid(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setsid(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_setsid(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setfgpgrp(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setfgpgrp(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setfgpgrp(unsigned long long __rpc_info, void *__buf, pid_t sid, pid_t pgid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_sid = sid;
	pid_t __maybe_unused __actv_local_var_pgid = pgid;
	__ret = ____actvcall_hmcall_proc_setfgpgrp(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sid, __actv_local_var_sid), __ARCH_ACTV_RPC_PASS_ARG(pgid, __actv_local_var_pgid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setfgpgrp(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t sid, pid_t pgid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_sid = sid;
	pid_t __maybe_unused __actv_local_var_pgid = pgid;
	__ret = ____actvcapcall_hmcall_proc_setfgpgrp(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sid, __actv_local_var_sid), __ARCH_ACTV_RPC_PASS_ARG(pgid, __actv_local_var_pgid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_getfgpgrp(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_getfgpgrp(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getfgpgrp(unsigned long long __rpc_info, void *__buf, pid_t sid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_sid = sid;
	__ret = ____actvcall_hmcall_proc_getfgpgrp(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sid, __actv_local_var_sid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getfgpgrp(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t sid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_sid = sid;
	__ret = ____actvcapcall_hmcall_proc_getfgpgrp(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sid, __actv_local_var_sid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_mysid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_mysid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_mysid(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_mysid(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_mysid(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_mysid(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_signal_fgpgrp(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_signal_fgpgrp(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_signal_fgpgrp(unsigned long long __rpc_info, void *__buf, pid_t sid, int signum)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_sid = sid;
	int __maybe_unused __actv_local_var_signum = signum;
	__ret = ____actvcall_hmcall_proc_signal_fgpgrp(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sid, __actv_local_var_sid), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_signal_fgpgrp(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t sid, int signum)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_sid = sid;
	int __maybe_unused __actv_local_var_signum = signum;
	__ret = ____actvcapcall_hmcall_proc_signal_fgpgrp(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sid, __actv_local_var_sid), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setuid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setuid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setuid(unsigned long long __rpc_info, void *__buf, uid_t uid)
{
	int __ret;
	uid_t __maybe_unused __actv_local_var_uid = uid;
	__ret = ____actvcall_hmcall_proc_setuid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(uid, __actv_local_var_uid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setuid(rref_t __rref, unsigned long long __rpc_info, void *__buf, uid_t uid)
{
	int __ret;
	uid_t __maybe_unused __actv_local_var_uid = uid;
	__ret = ____actvcapcall_hmcall_proc_setuid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(uid, __actv_local_var_uid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_getuid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_getuid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getuid(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_getuid(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getuid(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_getuid(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_geteuid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_geteuid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_geteuid(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_geteuid(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_geteuid(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_geteuid(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_getresuid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_getresuid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getresuid(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_getresuid(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getresuid(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_getresuid(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setreuid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setreuid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setreuid(unsigned long long __rpc_info, void *__buf, uid_t ruid, uid_t euid)
{
	int __ret;
	uid_t __maybe_unused __actv_local_var_ruid = ruid;
	uid_t __maybe_unused __actv_local_var_euid = euid;
	__ret = ____actvcall_hmcall_proc_setreuid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(ruid, __actv_local_var_ruid), __ARCH_ACTV_RPC_PASS_ARG(euid, __actv_local_var_euid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setreuid(rref_t __rref, unsigned long long __rpc_info, void *__buf, uid_t ruid, uid_t euid)
{
	int __ret;
	uid_t __maybe_unused __actv_local_var_ruid = ruid;
	uid_t __maybe_unused __actv_local_var_euid = euid;
	__ret = ____actvcapcall_hmcall_proc_setreuid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(ruid, __actv_local_var_ruid), __ARCH_ACTV_RPC_PASS_ARG(euid, __actv_local_var_euid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setresuid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setresuid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setresuid(unsigned long long __rpc_info, void *__buf, uid_t ruid, uid_t euid, uid_t suid)
{
	int __ret;
	uid_t __maybe_unused __actv_local_var_ruid = ruid;
	uid_t __maybe_unused __actv_local_var_euid = euid;
	uid_t __maybe_unused __actv_local_var_suid = suid;
	__ret = ____actvcall_hmcall_proc_setresuid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(ruid, __actv_local_var_ruid), __ARCH_ACTV_RPC_PASS_ARG(euid, __actv_local_var_euid), __ARCH_ACTV_RPC_PASS_ARG(suid, __actv_local_var_suid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setresuid(rref_t __rref, unsigned long long __rpc_info, void *__buf, uid_t ruid, uid_t euid, uid_t suid)
{
	int __ret;
	uid_t __maybe_unused __actv_local_var_ruid = ruid;
	uid_t __maybe_unused __actv_local_var_euid = euid;
	uid_t __maybe_unused __actv_local_var_suid = suid;
	__ret = ____actvcapcall_hmcall_proc_setresuid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(ruid, __actv_local_var_ruid), __ARCH_ACTV_RPC_PASS_ARG(euid, __actv_local_var_euid), __ARCH_ACTV_RPC_PASS_ARG(suid, __actv_local_var_suid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_getgid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_getgid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getgid(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_getgid(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getgid(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_getgid(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_getegid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_getegid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getegid(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_getegid(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getegid(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_getegid(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_getresgid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_getresgid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getresgid(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_getresgid(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getresgid(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_getresgid(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setregid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setregid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setregid(unsigned long long __rpc_info, void *__buf, gid_t rgid, gid_t egid)
{
	int __ret;
	gid_t __maybe_unused __actv_local_var_rgid = rgid;
	gid_t __maybe_unused __actv_local_var_egid = egid;
	__ret = ____actvcall_hmcall_proc_setregid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(rgid, __actv_local_var_rgid), __ARCH_ACTV_RPC_PASS_ARG(egid, __actv_local_var_egid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setregid(rref_t __rref, unsigned long long __rpc_info, void *__buf, gid_t rgid, gid_t egid)
{
	int __ret;
	gid_t __maybe_unused __actv_local_var_rgid = rgid;
	gid_t __maybe_unused __actv_local_var_egid = egid;
	__ret = ____actvcapcall_hmcall_proc_setregid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(rgid, __actv_local_var_rgid), __ARCH_ACTV_RPC_PASS_ARG(egid, __actv_local_var_egid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setgid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setgid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setgid(unsigned long long __rpc_info, void *__buf, gid_t gid)
{
	int __ret;
	gid_t __maybe_unused __actv_local_var_gid = gid;
	__ret = ____actvcall_hmcall_proc_setgid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(gid, __actv_local_var_gid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setgid(rref_t __rref, unsigned long long __rpc_info, void *__buf, gid_t gid)
{
	int __ret;
	gid_t __maybe_unused __actv_local_var_gid = gid;
	__ret = ____actvcapcall_hmcall_proc_setgid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(gid, __actv_local_var_gid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setresgid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setresgid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setresgid(unsigned long long __rpc_info, void *__buf, gid_t rgid, gid_t egid, gid_t sgid)
{
	int __ret;
	gid_t __maybe_unused __actv_local_var_rgid = rgid;
	gid_t __maybe_unused __actv_local_var_egid = egid;
	gid_t __maybe_unused __actv_local_var_sgid = sgid;
	__ret = ____actvcall_hmcall_proc_setresgid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(rgid, __actv_local_var_rgid), __ARCH_ACTV_RPC_PASS_ARG(egid, __actv_local_var_egid), __ARCH_ACTV_RPC_PASS_ARG(sgid, __actv_local_var_sgid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setresgid(rref_t __rref, unsigned long long __rpc_info, void *__buf, gid_t rgid, gid_t egid, gid_t sgid)
{
	int __ret;
	gid_t __maybe_unused __actv_local_var_rgid = rgid;
	gid_t __maybe_unused __actv_local_var_egid = egid;
	gid_t __maybe_unused __actv_local_var_sgid = sgid;
	__ret = ____actvcapcall_hmcall_proc_setresgid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(rgid, __actv_local_var_rgid), __ARCH_ACTV_RPC_PASS_ARG(egid, __actv_local_var_egid), __ARCH_ACTV_RPC_PASS_ARG(sgid, __actv_local_var_sgid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setgroups(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setgroups(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setgroups(unsigned long long __rpc_info, void *__buf, unsigned int data_size, gid_t *group_list)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_data_size = data_size;
	__maybe_unused gid_t *__actv_local_var_group_list = group_list;
	__ret = ____actvcall_hmcall_proc_setgroups(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(data_size, __actv_local_var_data_size), __ARCH_ACTV_RPC_PASS_ARG(group_list, __actv_local_var_group_list));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setgroups(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int data_size, gid_t *group_list)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_data_size = data_size;
	__maybe_unused gid_t *__actv_local_var_group_list = group_list;
	__ret = ____actvcapcall_hmcall_proc_setgroups(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(data_size, __actv_local_var_data_size), __ARCH_ACTV_RPC_PASS_ARG(group_list, __actv_local_var_group_list));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_getgroups(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_getgroups(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getgroups(unsigned long long __rpc_info, void *__buf, unsigned int data_size, gid_t *group_list)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_data_size = data_size;
	__maybe_unused gid_t *__actv_local_var_group_list = group_list;
	__ret = ____actvcall_hmcall_proc_getgroups(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(data_size, __actv_local_var_data_size), __ARCH_ACTV_RPC_PASS_ARG(group_list, __actv_local_var_group_list));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getgroups(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int data_size, gid_t *group_list)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_data_size = data_size;
	__maybe_unused gid_t *__actv_local_var_group_list = group_list;
	__ret = ____actvcapcall_hmcall_proc_getgroups(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(data_size, __actv_local_var_data_size), __ARCH_ACTV_RPC_PASS_ARG(group_list, __actv_local_var_group_list));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setfsuid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setfsuid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setfsuid(unsigned long long __rpc_info, void *__buf, uid_t uid)
{
	int __ret;
	uid_t __maybe_unused __actv_local_var_uid = uid;
	__ret = ____actvcall_hmcall_proc_setfsuid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(uid, __actv_local_var_uid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setfsuid(rref_t __rref, unsigned long long __rpc_info, void *__buf, uid_t uid)
{
	int __ret;
	uid_t __maybe_unused __actv_local_var_uid = uid;
	__ret = ____actvcapcall_hmcall_proc_setfsuid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(uid, __actv_local_var_uid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setfsgid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setfsgid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setfsgid(unsigned long long __rpc_info, void *__buf, gid_t gid)
{
	int __ret;
	gid_t __maybe_unused __actv_local_var_gid = gid;
	__ret = ____actvcall_hmcall_proc_setfsgid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(gid, __actv_local_var_gid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setfsgid(rref_t __rref, unsigned long long __rpc_info, void *__buf, gid_t gid)
{
	int __ret;
	gid_t __maybe_unused __actv_local_var_gid = gid;
	__ret = ____actvcapcall_hmcall_proc_setfsgid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(gid, __actv_local_var_gid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_stat(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_stat(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_stat(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int flags, struct bunch_ipc_attr attr)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	struct bunch_ipc_attr __maybe_unused __actv_local_var_attr = attr;
	__ret = ____actvcall_hmcall_proc_stat(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_stat(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int flags, struct bunch_ipc_attr attr)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	struct bunch_ipc_attr __maybe_unused __actv_local_var_attr = attr;
	__ret = ____actvcapcall_hmcall_proc_stat(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_getrlimit(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_getrlimit(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getrlimit(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int cnode_idx, unsigned int type)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_cnode_idx = cnode_idx;
	unsigned int __maybe_unused __actv_local_var_type = type;
	__ret = ____actvcall_hmcall_proc_getrlimit(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(cnode_idx, __actv_local_var_cnode_idx), __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getrlimit(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int cnode_idx, unsigned int type)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_cnode_idx = cnode_idx;
	unsigned int __maybe_unused __actv_local_var_type = type;
	__ret = ____actvcapcall_hmcall_proc_getrlimit(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(cnode_idx, __actv_local_var_cnode_idx), __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_setrlimit(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_setrlimit(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_setrlimit(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int cnode_idx, unsigned int type, unsigned long long rlim_cur, unsigned long long rlim_max)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_cnode_idx = cnode_idx;
	unsigned int __maybe_unused __actv_local_var_type = type;
	unsigned long long __maybe_unused __actv_local_var_rlim_cur = rlim_cur;
	unsigned long long __maybe_unused __actv_local_var_rlim_max = rlim_max;
	__ret = ____actvcall_hmcall_proc_setrlimit(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(cnode_idx, __actv_local_var_cnode_idx), __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type), __ARCH_ACTV_RPC_PASS_ARG(rlim_cur, __actv_local_var_rlim_cur), __ARCH_ACTV_RPC_PASS_ARG(rlim_max, __actv_local_var_rlim_max));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_setrlimit(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int cnode_idx, unsigned int type, unsigned long long rlim_cur, unsigned long long rlim_max)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_cnode_idx = cnode_idx;
	unsigned int __maybe_unused __actv_local_var_type = type;
	unsigned long long __maybe_unused __actv_local_var_rlim_cur = rlim_cur;
	unsigned long long __maybe_unused __actv_local_var_rlim_max = rlim_max;
	__ret = ____actvcapcall_hmcall_proc_setrlimit(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(cnode_idx, __actv_local_var_cnode_idx), __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type), __ARCH_ACTV_RPC_PASS_ARG(rlim_cur, __actv_local_var_rlim_cur), __ARCH_ACTV_RPC_PASS_ARG(rlim_max, __actv_local_var_rlim_max));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_prlimit(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_prlimit(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_prlimit(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned long long rlim_cur, unsigned long long rlim_max, unsigned int type)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned long long __maybe_unused __actv_local_var_rlim_cur = rlim_cur;
	unsigned long long __maybe_unused __actv_local_var_rlim_max = rlim_max;
	unsigned int __maybe_unused __actv_local_var_type = type;
	__ret = ____actvcall_hmcall_proc_prlimit(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(rlim_cur, __actv_local_var_rlim_cur), __ARCH_ACTV_RPC_PASS_ARG(rlim_max, __actv_local_var_rlim_max), __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_prlimit(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned long long rlim_cur, unsigned long long rlim_max, unsigned int type)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned long long __maybe_unused __actv_local_var_rlim_cur = rlim_cur;
	unsigned long long __maybe_unused __actv_local_var_rlim_max = rlim_max;
	unsigned int __maybe_unused __actv_local_var_type = type;
	__ret = ____actvcapcall_hmcall_proc_prlimit(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(rlim_cur, __actv_local_var_rlim_cur), __ARCH_ACTV_RPC_PASS_ARG(rlim_max, __actv_local_var_rlim_max), __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_debug_thread(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_debug_thread(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_debug_thread(unsigned long long __rpc_info, void *__buf, enum pdebug_thread_req req, pid_t tid, void *arg)
{
	int __ret;
	enum pdebug_thread_req __maybe_unused __actv_local_var_req = req;
	pid_t __maybe_unused __actv_local_var_tid = tid;
	__maybe_unused void *__actv_local_var_arg = arg;
	__ret = ____actvcall_hmcall_proc_debug_thread(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(req, __actv_local_var_req), __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_debug_thread(rref_t __rref, unsigned long long __rpc_info, void *__buf, enum pdebug_thread_req req, pid_t tid, void *arg)
{
	int __ret;
	enum pdebug_thread_req __maybe_unused __actv_local_var_req = req;
	pid_t __maybe_unused __actv_local_var_tid = tid;
	__maybe_unused void *__actv_local_var_arg = arg;
	__ret = ____actvcapcall_hmcall_proc_debug_thread(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(req, __actv_local_var_req), __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_debug_wait_status(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_debug_wait_status(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_debug_wait_status(unsigned long long __rpc_info, void *__buf, pid_t tid, void *event, int option)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_tid = tid;
	__maybe_unused void *__actv_local_var_event = event;
	int __maybe_unused __actv_local_var_option = option;
	__ret = ____actvcall_hmcall_proc_debug_wait_status(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(event, __actv_local_var_event), __ARCH_ACTV_RPC_PASS_ARG(option, __actv_local_var_option));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_debug_wait_status(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t tid, void *event, int option)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_tid = tid;
	__maybe_unused void *__actv_local_var_event = event;
	int __maybe_unused __actv_local_var_option = option;
	__ret = ____actvcapcall_hmcall_proc_debug_wait_status(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(event, __actv_local_var_event), __ARCH_ACTV_RPC_PASS_ARG(option, __actv_local_var_option));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_debug_vspace(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_debug_vspace(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_debug_vspace(unsigned long long __rpc_info, void *__buf, enum pdebug_vspace_req req, pid_t pid, uintptr_t addr, unsigned long data)
{
	int __ret;
	enum pdebug_vspace_req __maybe_unused __actv_local_var_req = req;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	uintptr_t __maybe_unused __actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_data = data;
	__ret = ____actvcall_hmcall_proc_debug_vspace(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(req, __actv_local_var_req), __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(data, __actv_local_var_data));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_debug_vspace(rref_t __rref, unsigned long long __rpc_info, void *__buf, enum pdebug_vspace_req req, pid_t pid, uintptr_t addr, unsigned long data)
{
	int __ret;
	enum pdebug_vspace_req __maybe_unused __actv_local_var_req = req;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	uintptr_t __maybe_unused __actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_data = data;
	__ret = ____actvcapcall_hmcall_proc_debug_vspace(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(req, __actv_local_var_req), __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(data, __actv_local_var_data));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_get_coredump(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_get_coredump(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_get_coredump(unsigned long long __rpc_info, void *__buf, pid_t pid, enum coredump_request request)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	enum coredump_request __maybe_unused __actv_local_var_request = request;
	__ret = ____actvcall_hmcall_proc_get_coredump(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(request, __actv_local_var_request));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_get_coredump(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, enum coredump_request request)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	enum coredump_request __maybe_unused __actv_local_var_request = request;
	__ret = ____actvcapcall_hmcall_proc_get_coredump(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(request, __actv_local_var_request));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_set_coredump(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_set_coredump(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_set_coredump(unsigned long long __rpc_info, void *__buf, pid_t pid, union coredump_attr value, enum coredump_request request)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	union coredump_attr __maybe_unused __actv_local_var_value = value;
	enum coredump_request __maybe_unused __actv_local_var_request = request;
	__ret = ____actvcall_hmcall_proc_set_coredump(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(value, __actv_local_var_value), __ARCH_ACTV_RPC_PASS_ARG(request, __actv_local_var_request));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_set_coredump(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, union coredump_attr value, enum coredump_request request)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	union coredump_attr __maybe_unused __actv_local_var_value = value;
	enum coredump_request __maybe_unused __actv_local_var_request = request;
	__ret = ____actvcapcall_hmcall_proc_set_coredump(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(value, __actv_local_var_value), __ARCH_ACTV_RPC_PASS_ARG(request, __actv_local_var_request));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_nsid_of_cnode_idx(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_nsid_of_cnode_idx(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_nsid_of_cnode_idx(unsigned long long __rpc_info, void *__buf, unsigned int cnode_idx, int flag)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_cnode_idx = cnode_idx;
	int __maybe_unused __actv_local_var_flag = flag;
	__ret = ____actvcall_hmcall_proc_nsid_of_cnode_idx(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cnode_idx, __actv_local_var_cnode_idx), __ARCH_ACTV_RPC_PASS_ARG(flag, __actv_local_var_flag));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_nsid_of_cnode_idx(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int cnode_idx, int flag)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_cnode_idx = cnode_idx;
	int __maybe_unused __actv_local_var_flag = flag;
	__ret = ____actvcapcall_hmcall_proc_nsid_of_cnode_idx(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cnode_idx, __actv_local_var_cnode_idx), __ARCH_ACTV_RPC_PASS_ARG(flag, __actv_local_var_flag));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_timer_create(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_timer_create(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_timer_create(unsigned long long __rpc_info, void *__buf, int timer_id, cref_t timer_cref, struct __siginfo siginfo, int target_tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_timer_id = timer_id;
	cref_t __maybe_unused __actv_local_var_timer_cref = timer_cref;
	struct __siginfo __maybe_unused __actv_local_var_siginfo = siginfo;
	int __maybe_unused __actv_local_var_target_tid = target_tid;
	__ret = ____actvcall_hmcall_proc_timer_create(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(timer_id, __actv_local_var_timer_id), __ARCH_ACTV_RPC_PASS_ARG(timer_cref, __actv_local_var_timer_cref), __ARCH_ACTV_RPC_PASS_ARG(siginfo, __actv_local_var_siginfo), __ARCH_ACTV_RPC_PASS_ARG(target_tid, __actv_local_var_target_tid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_timer_create(rref_t __rref, unsigned long long __rpc_info, void *__buf, int timer_id, cref_t timer_cref, struct __siginfo siginfo, int target_tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_timer_id = timer_id;
	cref_t __maybe_unused __actv_local_var_timer_cref = timer_cref;
	struct __siginfo __maybe_unused __actv_local_var_siginfo = siginfo;
	int __maybe_unused __actv_local_var_target_tid = target_tid;
	__ret = ____actvcapcall_hmcall_proc_timer_create(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(timer_id, __actv_local_var_timer_id), __ARCH_ACTV_RPC_PASS_ARG(timer_cref, __actv_local_var_timer_cref), __ARCH_ACTV_RPC_PASS_ARG(siginfo, __actv_local_var_siginfo), __ARCH_ACTV_RPC_PASS_ARG(target_tid, __actv_local_var_target_tid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_timer_settime(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_timer_settime(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_timer_settime(unsigned long long __rpc_info, void *__buf, int timer_id, unsigned long long value, unsigned long long interval, int flags)
{
	int __ret;
	int __maybe_unused __actv_local_var_timer_id = timer_id;
	unsigned long long __maybe_unused __actv_local_var_value = value;
	unsigned long long __maybe_unused __actv_local_var_interval = interval;
	int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcall_hmcall_proc_timer_settime(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(timer_id, __actv_local_var_timer_id), __ARCH_ACTV_RPC_PASS_ARG(value, __actv_local_var_value), __ARCH_ACTV_RPC_PASS_ARG(interval, __actv_local_var_interval), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_timer_settime(rref_t __rref, unsigned long long __rpc_info, void *__buf, int timer_id, unsigned long long value, unsigned long long interval, int flags)
{
	int __ret;
	int __maybe_unused __actv_local_var_timer_id = timer_id;
	unsigned long long __maybe_unused __actv_local_var_value = value;
	unsigned long long __maybe_unused __actv_local_var_interval = interval;
	int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcapcall_hmcall_proc_timer_settime(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(timer_id, __actv_local_var_timer_id), __ARCH_ACTV_RPC_PASS_ARG(value, __actv_local_var_value), __ARCH_ACTV_RPC_PASS_ARG(interval, __actv_local_var_interval), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_timer_gettime(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_timer_gettime(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_timer_gettime(unsigned long long __rpc_info, void *__buf, int timer_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_timer_id = timer_id;
	__ret = ____actvcall_hmcall_proc_timer_gettime(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(timer_id, __actv_local_var_timer_id));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_timer_gettime(rref_t __rref, unsigned long long __rpc_info, void *__buf, int timer_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_timer_id = timer_id;
	__ret = ____actvcapcall_hmcall_proc_timer_gettime(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(timer_id, __actv_local_var_timer_id));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_timer_delete(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_timer_delete(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_timer_delete(unsigned long long __rpc_info, void *__buf, int timer_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_timer_id = timer_id;
	__ret = ____actvcall_hmcall_proc_timer_delete(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(timer_id, __actv_local_var_timer_id));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_timer_delete(rref_t __rref, unsigned long long __rpc_info, void *__buf, int timer_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_timer_id = timer_id;
	__ret = ____actvcapcall_hmcall_proc_timer_delete(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(timer_id, __actv_local_var_timer_id));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_timer_getoverrun(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_timer_getoverrun(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_timer_getoverrun(unsigned long long __rpc_info, void *__buf, int timer_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_timer_id = timer_id;
	__ret = ____actvcall_hmcall_proc_timer_getoverrun(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(timer_id, __actv_local_var_timer_id));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_timer_getoverrun(rref_t __rref, unsigned long long __rpc_info, void *__buf, int timer_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_timer_id = timer_id;
	__ret = ____actvcapcall_hmcall_proc_timer_getoverrun(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(timer_id, __actv_local_var_timer_id));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_get_cputime(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_get_cputime(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_get_cputime(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_get_cputime(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_get_cputime(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_get_cputime(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_getrusage(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_getrusage(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_getrusage(unsigned long long __rpc_info, void *__buf, int who)
{
	int __ret;
	int __maybe_unused __actv_local_var_who = who;
	__ret = ____actvcall_hmcall_proc_getrusage(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(who, __actv_local_var_who));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_getrusage(rref_t __rref, unsigned long long __rpc_info, void *__buf, int who)
{
	int __ret;
	int __maybe_unused __actv_local_var_who = who;
	__ret = ____actvcapcall_hmcall_proc_getrusage(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(who, __actv_local_var_who));
	return __ret;
}

static unsigned long __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_execve(unsigned long long rpc_info, void *__buf, ...);


static unsigned long __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_execve(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


unsigned long __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_execve(unsigned long long __rpc_info, void *__buf, struct hm_execve_req req)
{
	unsigned long __ret;
	struct hm_execve_req __maybe_unused __actv_local_var_req = req;
	__ret = ____actvcall_hmcall_proc_execve(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(req, __actv_local_var_req));
	return __ret;
}

unsigned long __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_execve(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_execve_req req)
{
	unsigned long __ret;
	struct hm_execve_req __maybe_unused __actv_local_var_req = req;
	__ret = ____actvcapcall_hmcall_proc_execve(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(req, __actv_local_var_req));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_new_permission(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_new_permission(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_new_permission(unsigned long long __rpc_info, void *__buf, unsigned long long permission)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_permission = permission;
	__ret = ____actvcall_hmcall_proc_new_permission(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(permission, __actv_local_var_permission));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_new_permission(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long permission)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_permission = permission;
	__ret = ____actvcapcall_hmcall_proc_new_permission(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(permission, __actv_local_var_permission));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_new_vspace_mmscd(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_new_vspace_mmscd(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_new_vspace_mmscd(unsigned long long __rpc_info, void *__buf, unsigned long vstart)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_vstart = vstart;
	__ret = ____actvcall_hmcall_proc_new_vspace_mmscd(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vstart, __actv_local_var_vstart));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_new_vspace_mmscd(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long vstart)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_vstart = vstart;
	__ret = ____actvcapcall_hmcall_proc_new_vspace_mmscd(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vstart, __actv_local_var_vstart));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_new_vspace(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_new_vspace(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_new_vspace(unsigned long long __rpc_info, void *__buf, cref_t base_pmem)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_base_pmem = base_pmem;
	__ret = ____actvcall_hmcall_proc_new_vspace(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(base_pmem, __actv_local_var_base_pmem));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_new_vspace(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t base_pmem)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_base_pmem = base_pmem;
	__ret = ____actvcapcall_hmcall_proc_new_vspace(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(base_pmem, __actv_local_var_base_pmem));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_new_vm_mmscd(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_new_vm_mmscd(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_new_vm_mmscd(unsigned long long __rpc_info, void *__buf, unsigned long vstart, struct sysarg_vm_config vm_conf)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_vstart = vstart;
	struct sysarg_vm_config __maybe_unused __actv_local_var_vm_conf = vm_conf;
	__ret = ____actvcall_hmcall_proc_new_vm_mmscd(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vstart, __actv_local_var_vstart), __ARCH_ACTV_RPC_PASS_ARG(vm_conf, __actv_local_var_vm_conf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_new_vm_mmscd(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long vstart, struct sysarg_vm_config vm_conf)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_vstart = vstart;
	struct sysarg_vm_config __maybe_unused __actv_local_var_vm_conf = vm_conf;
	__ret = ____actvcapcall_hmcall_proc_new_vm_mmscd(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vstart, __actv_local_var_vstart), __ARCH_ACTV_RPC_PASS_ARG(vm_conf, __actv_local_var_vm_conf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_new_vm(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_new_vm(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_new_vm(unsigned long long __rpc_info, void *__buf, cref_t base_pmem, struct sysarg_vm_config vm_conf)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_base_pmem = base_pmem;
	struct sysarg_vm_config __maybe_unused __actv_local_var_vm_conf = vm_conf;
	__ret = ____actvcall_hmcall_proc_new_vm(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(base_pmem, __actv_local_var_base_pmem), __ARCH_ACTV_RPC_PASS_ARG(vm_conf, __actv_local_var_vm_conf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_new_vm(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t base_pmem, struct sysarg_vm_config vm_conf)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_base_pmem = base_pmem;
	struct sysarg_vm_config __maybe_unused __actv_local_var_vm_conf = vm_conf;
	__ret = ____actvcapcall_hmcall_proc_new_vm(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(base_pmem, __actv_local_var_base_pmem), __ARCH_ACTV_RPC_PASS_ARG(vm_conf, __actv_local_var_vm_conf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_new_cpucontext_mmscd(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_new_cpucontext_mmscd(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_new_cpucontext_mmscd(unsigned long long __rpc_info, void *__buf, unsigned long vstart, unsigned long long size, unsigned long long offset, struct cpucontext_name name)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_vstart = vstart;
	unsigned long long __maybe_unused __actv_local_var_size = size;
	unsigned long long __maybe_unused __actv_local_var_offset = offset;
	struct cpucontext_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcall_hmcall_proc_new_cpucontext_mmscd(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vstart, __actv_local_var_vstart), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size), __ARCH_ACTV_RPC_PASS_ARG(offset, __actv_local_var_offset), __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_new_cpucontext_mmscd(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long vstart, unsigned long long size, unsigned long long offset, struct cpucontext_name name)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_vstart = vstart;
	unsigned long long __maybe_unused __actv_local_var_size = size;
	unsigned long long __maybe_unused __actv_local_var_offset = offset;
	struct cpucontext_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcapcall_hmcall_proc_new_cpucontext_mmscd(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vstart, __actv_local_var_vstart), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size), __ARCH_ACTV_RPC_PASS_ARG(offset, __actv_local_var_offset), __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_new_cpucontext(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_new_cpucontext(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_new_cpucontext(unsigned long long __rpc_info, void *__buf, cref_t base_pmem, struct cpucontext_name name)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_base_pmem = base_pmem;
	struct cpucontext_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcall_hmcall_proc_new_cpucontext(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(base_pmem, __actv_local_var_base_pmem), __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_new_cpucontext(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t base_pmem, struct cpucontext_name name)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_base_pmem = base_pmem;
	struct cpucontext_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcapcall_hmcall_proc_new_cpucontext(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(base_pmem, __actv_local_var_base_pmem), __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_elf_load_info(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_elf_load_info(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_elf_load_info(unsigned long long __rpc_info, void *__buf, pid_t pid, struct bunch_ipc_attr attr)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct bunch_ipc_attr __maybe_unused __actv_local_var_attr = attr;
	__ret = ____actvcall_hmcall_proc_elf_load_info(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_elf_load_info(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct bunch_ipc_attr attr)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct bunch_ipc_attr __maybe_unused __actv_local_var_attr = attr;
	__ret = ____actvcapcall_hmcall_proc_elf_load_info(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_pm_config_add(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_pm_config_add(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_pm_config_add(unsigned long long __rpc_info, void *__buf, struct proc_pm_config config)
{
	int __ret;
	struct proc_pm_config __maybe_unused __actv_local_var_config = config;
	__ret = ____actvcall_hmcall_proc_pm_config_add(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(config, __actv_local_var_config));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_pm_config_add(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct proc_pm_config config)
{
	int __ret;
	struct proc_pm_config __maybe_unused __actv_local_var_config = config;
	__ret = ____actvcapcall_hmcall_proc_pm_config_add(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(config, __actv_local_var_config));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_pm_config_cleanup(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_pm_config_cleanup(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_pm_config_cleanup(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_pm_config_cleanup(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_pm_config_cleanup(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_pm_config_cleanup(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_pm_dormancy_enter(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_pm_dormancy_enter(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_pm_dormancy_enter(unsigned long long __rpc_info, void *__buf, cref_t src_tcb_cref, enum proc_pm_attr attr, int enter)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_src_tcb_cref = src_tcb_cref;
	enum proc_pm_attr __maybe_unused __actv_local_var_attr = attr;
	int __maybe_unused __actv_local_var_enter = enter;
	__ret = ____actvcall_hmcall_proc_pm_dormancy_enter(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(src_tcb_cref, __actv_local_var_src_tcb_cref), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr), __ARCH_ACTV_RPC_PASS_ARG(enter, __actv_local_var_enter));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_pm_dormancy_enter(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t src_tcb_cref, enum proc_pm_attr attr, int enter)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_src_tcb_cref = src_tcb_cref;
	enum proc_pm_attr __maybe_unused __actv_local_var_attr = attr;
	int __maybe_unused __actv_local_var_enter = enter;
	__ret = ____actvcapcall_hmcall_proc_pm_dormancy_enter(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(src_tcb_cref, __actv_local_var_src_tcb_cref), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr), __ARCH_ACTV_RPC_PASS_ARG(enter, __actv_local_var_enter));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_show_pte(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_show_pte(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_show_pte(unsigned long long __rpc_info, void *__buf, const void *vaddr)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_vaddr = vaddr;
	__ret = ____actvcall_hmcall_proc_show_pte(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vaddr, __actv_local_var_vaddr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_show_pte(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *vaddr)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_vaddr = vaddr;
	__ret = ____actvcapcall_hmcall_proc_show_pte(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vaddr, __actv_local_var_vaddr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_check_regs(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_check_regs(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_check_regs(unsigned long long __rpc_info, void *__buf, unsigned int which, unsigned long addr, size_t size)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_which = which;
	unsigned long __maybe_unused __actv_local_var_addr = addr;
	size_t __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_proc_check_regs(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(which, __actv_local_var_which), __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_check_regs(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int which, unsigned long addr, size_t size)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_which = which;
	unsigned long __maybe_unused __actv_local_var_addr = addr;
	size_t __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_proc_check_regs(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(which, __actv_local_var_which), __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_get_dumpable(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_get_dumpable(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_get_dumpable(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_get_dumpable(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_get_dumpable(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_get_dumpable(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_set_dumpable(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_set_dumpable(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_set_dumpable(unsigned long long __rpc_info, void *__buf, unsigned long dumpable)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_dumpable = dumpable;
	__ret = ____actvcall_hmcall_proc_set_dumpable(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(dumpable, __actv_local_var_dumpable));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_set_dumpable(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long dumpable)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_dumpable = dumpable;
	__ret = ____actvcapcall_hmcall_proc_set_dumpable(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(dumpable, __actv_local_var_dumpable));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_set_subreaper(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_set_subreaper(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_set_subreaper(unsigned long long __rpc_info, void *__buf, unsigned long child_subreaper)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_child_subreaper = child_subreaper;
	__ret = ____actvcall_hmcall_proc_set_subreaper(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(child_subreaper, __actv_local_var_child_subreaper));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_set_subreaper(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long child_subreaper)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_child_subreaper = child_subreaper;
	__ret = ____actvcapcall_hmcall_proc_set_subreaper(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(child_subreaper, __actv_local_var_child_subreaper));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_get_subreaper(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_get_subreaper(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_get_subreaper(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_get_subreaper(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_get_subreaper(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_get_subreaper(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_set_privs(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_set_privs(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_set_privs(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_set_privs(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_set_privs(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_set_privs(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_get_privs(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_get_privs(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_get_privs(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_get_privs(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_get_privs(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_get_privs(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_clone(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_clone(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_clone(unsigned long long __rpc_info, void *__buf, struct hm_clone_req req)
{
	int __ret;
	struct hm_clone_req __maybe_unused __actv_local_var_req = req;
	__ret = ____actvcall_hmcall_proc_clone(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(req, __actv_local_var_req));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_clone(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_clone_req req)
{
	int __ret;
	struct hm_clone_req __maybe_unused __actv_local_var_req = req;
	__ret = ____actvcapcall_hmcall_proc_clone(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(req, __actv_local_var_req));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_dyn_libs_data(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_dyn_libs_data(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_dyn_libs_data(unsigned long long __rpc_info, void *__buf, unsigned int libs_cnt, struct hm_actv_buf dyn_buf)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_libs_cnt = libs_cnt;
	struct hm_actv_buf __maybe_unused __actv_local_var_dyn_buf = dyn_buf;
	__ret = ____actvcall_hmcall_proc_dyn_libs_data(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(libs_cnt, __actv_local_var_libs_cnt), __ARCH_ACTV_RPC_PASS_ARG(dyn_buf, __actv_local_var_dyn_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_dyn_libs_data(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int libs_cnt, struct hm_actv_buf dyn_buf)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_libs_cnt = libs_cnt;
	struct hm_actv_buf __maybe_unused __actv_local_var_dyn_buf = dyn_buf;
	__ret = ____actvcapcall_hmcall_proc_dyn_libs_data(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(libs_cnt, __actv_local_var_libs_cnt), __ARCH_ACTV_RPC_PASS_ARG(dyn_buf, __actv_local_var_dyn_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_register_event(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_register_event(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_register_event(unsigned long long __rpc_info, void *__buf, unsigned int type, struct event_args_s args)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_type = type;
	struct event_args_s __maybe_unused __actv_local_var_args = args;
	__ret = ____actvcall_hmcall_proc_register_event(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type), __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_register_event(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int type, struct event_args_s args)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_type = type;
	struct event_args_s __maybe_unused __actv_local_var_args = args;
	__ret = ____actvcapcall_hmcall_proc_register_event(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type), __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_affinity_get(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_affinity_get(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_affinity_get(unsigned long long __rpc_info, void *__buf, pid_t pid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__ret = ____actvcall_hmcall_proc_affinity_get(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_affinity_get(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__ret = ____actvcapcall_hmcall_proc_affinity_get(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mqueue_open(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mqueue_open(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mqueue_open(unsigned long long __rpc_info, void *__buf, int oflag, unsigned int mode, long mq_flags, long mq_maxmsg, long mq_msgsize, long mq_curmsgs, struct mqueuemgr_name mqueue)
{
	int __ret;
	int __maybe_unused __actv_local_var_oflag = oflag;
	unsigned int __maybe_unused __actv_local_var_mode = mode;
	long __maybe_unused __actv_local_var_mq_flags = mq_flags;
	long __maybe_unused __actv_local_var_mq_maxmsg = mq_maxmsg;
	long __maybe_unused __actv_local_var_mq_msgsize = mq_msgsize;
	long __maybe_unused __actv_local_var_mq_curmsgs = mq_curmsgs;
	struct mqueuemgr_name __maybe_unused __actv_local_var_mqueue = mqueue;
	__ret = ____actvcall_hmcall_mqueue_open(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(oflag, __actv_local_var_oflag), __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode), __ARCH_ACTV_RPC_PASS_ARG(mq_flags, __actv_local_var_mq_flags), __ARCH_ACTV_RPC_PASS_ARG(mq_maxmsg, __actv_local_var_mq_maxmsg), __ARCH_ACTV_RPC_PASS_ARG(mq_msgsize, __actv_local_var_mq_msgsize), __ARCH_ACTV_RPC_PASS_ARG(mq_curmsgs, __actv_local_var_mq_curmsgs), __ARCH_ACTV_RPC_PASS_ARG(mqueue, __actv_local_var_mqueue));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mqueue_open(rref_t __rref, unsigned long long __rpc_info, void *__buf, int oflag, unsigned int mode, long mq_flags, long mq_maxmsg, long mq_msgsize, long mq_curmsgs, struct mqueuemgr_name mqueue)
{
	int __ret;
	int __maybe_unused __actv_local_var_oflag = oflag;
	unsigned int __maybe_unused __actv_local_var_mode = mode;
	long __maybe_unused __actv_local_var_mq_flags = mq_flags;
	long __maybe_unused __actv_local_var_mq_maxmsg = mq_maxmsg;
	long __maybe_unused __actv_local_var_mq_msgsize = mq_msgsize;
	long __maybe_unused __actv_local_var_mq_curmsgs = mq_curmsgs;
	struct mqueuemgr_name __maybe_unused __actv_local_var_mqueue = mqueue;
	__ret = ____actvcapcall_hmcall_mqueue_open(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(oflag, __actv_local_var_oflag), __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode), __ARCH_ACTV_RPC_PASS_ARG(mq_flags, __actv_local_var_mq_flags), __ARCH_ACTV_RPC_PASS_ARG(mq_maxmsg, __actv_local_var_mq_maxmsg), __ARCH_ACTV_RPC_PASS_ARG(mq_msgsize, __actv_local_var_mq_msgsize), __ARCH_ACTV_RPC_PASS_ARG(mq_curmsgs, __actv_local_var_mq_curmsgs), __ARCH_ACTV_RPC_PASS_ARG(mqueue, __actv_local_var_mqueue));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mqueue_send(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mqueue_send(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mqueue_send(unsigned long long __rpc_info, void *__buf, int mqd, unsigned int msg_prio, unsigned long msg_ptr, size_t msg_len, bool set_timeout, time_t tv_sec, long tv_nsec)
{
	int __ret;
	int __maybe_unused __actv_local_var_mqd = mqd;
	unsigned int __maybe_unused __actv_local_var_msg_prio = msg_prio;
	unsigned long __maybe_unused __actv_local_var_msg_ptr = msg_ptr;
	size_t __maybe_unused __actv_local_var_msg_len = msg_len;
	bool __maybe_unused __actv_local_var_set_timeout = set_timeout;
	time_t __maybe_unused __actv_local_var_tv_sec = tv_sec;
	long __maybe_unused __actv_local_var_tv_nsec = tv_nsec;
	__ret = ____actvcall_hmcall_mqueue_send(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mqd, __actv_local_var_mqd), __ARCH_ACTV_RPC_PASS_ARG(msg_prio, __actv_local_var_msg_prio), __ARCH_ACTV_RPC_PASS_ARG(msg_ptr, __actv_local_var_msg_ptr), __ARCH_ACTV_RPC_PASS_ARG(msg_len, __actv_local_var_msg_len), __ARCH_ACTV_RPC_PASS_ARG(set_timeout, __actv_local_var_set_timeout), __ARCH_ACTV_RPC_PASS_ARG(tv_sec, __actv_local_var_tv_sec), __ARCH_ACTV_RPC_PASS_ARG(tv_nsec, __actv_local_var_tv_nsec));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mqueue_send(rref_t __rref, unsigned long long __rpc_info, void *__buf, int mqd, unsigned int msg_prio, unsigned long msg_ptr, size_t msg_len, bool set_timeout, time_t tv_sec, long tv_nsec)
{
	int __ret;
	int __maybe_unused __actv_local_var_mqd = mqd;
	unsigned int __maybe_unused __actv_local_var_msg_prio = msg_prio;
	unsigned long __maybe_unused __actv_local_var_msg_ptr = msg_ptr;
	size_t __maybe_unused __actv_local_var_msg_len = msg_len;
	bool __maybe_unused __actv_local_var_set_timeout = set_timeout;
	time_t __maybe_unused __actv_local_var_tv_sec = tv_sec;
	long __maybe_unused __actv_local_var_tv_nsec = tv_nsec;
	__ret = ____actvcapcall_hmcall_mqueue_send(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mqd, __actv_local_var_mqd), __ARCH_ACTV_RPC_PASS_ARG(msg_prio, __actv_local_var_msg_prio), __ARCH_ACTV_RPC_PASS_ARG(msg_ptr, __actv_local_var_msg_ptr), __ARCH_ACTV_RPC_PASS_ARG(msg_len, __actv_local_var_msg_len), __ARCH_ACTV_RPC_PASS_ARG(set_timeout, __actv_local_var_set_timeout), __ARCH_ACTV_RPC_PASS_ARG(tv_sec, __actv_local_var_tv_sec), __ARCH_ACTV_RPC_PASS_ARG(tv_nsec, __actv_local_var_tv_nsec));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mqueue_recv(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mqueue_recv(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mqueue_recv(unsigned long long __rpc_info, void *__buf, int mqd, unsigned long recv_addr, unsigned long recv_size, bool set_timeout, time_t tv_sec, long tv_nsec)
{
	int __ret;
	int __maybe_unused __actv_local_var_mqd = mqd;
	unsigned long __maybe_unused __actv_local_var_recv_addr = recv_addr;
	unsigned long __maybe_unused __actv_local_var_recv_size = recv_size;
	bool __maybe_unused __actv_local_var_set_timeout = set_timeout;
	time_t __maybe_unused __actv_local_var_tv_sec = tv_sec;
	long __maybe_unused __actv_local_var_tv_nsec = tv_nsec;
	__ret = ____actvcall_hmcall_mqueue_recv(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mqd, __actv_local_var_mqd), __ARCH_ACTV_RPC_PASS_ARG(recv_addr, __actv_local_var_recv_addr), __ARCH_ACTV_RPC_PASS_ARG(recv_size, __actv_local_var_recv_size), __ARCH_ACTV_RPC_PASS_ARG(set_timeout, __actv_local_var_set_timeout), __ARCH_ACTV_RPC_PASS_ARG(tv_sec, __actv_local_var_tv_sec), __ARCH_ACTV_RPC_PASS_ARG(tv_nsec, __actv_local_var_tv_nsec));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mqueue_recv(rref_t __rref, unsigned long long __rpc_info, void *__buf, int mqd, unsigned long recv_addr, unsigned long recv_size, bool set_timeout, time_t tv_sec, long tv_nsec)
{
	int __ret;
	int __maybe_unused __actv_local_var_mqd = mqd;
	unsigned long __maybe_unused __actv_local_var_recv_addr = recv_addr;
	unsigned long __maybe_unused __actv_local_var_recv_size = recv_size;
	bool __maybe_unused __actv_local_var_set_timeout = set_timeout;
	time_t __maybe_unused __actv_local_var_tv_sec = tv_sec;
	long __maybe_unused __actv_local_var_tv_nsec = tv_nsec;
	__ret = ____actvcapcall_hmcall_mqueue_recv(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mqd, __actv_local_var_mqd), __ARCH_ACTV_RPC_PASS_ARG(recv_addr, __actv_local_var_recv_addr), __ARCH_ACTV_RPC_PASS_ARG(recv_size, __actv_local_var_recv_size), __ARCH_ACTV_RPC_PASS_ARG(set_timeout, __actv_local_var_set_timeout), __ARCH_ACTV_RPC_PASS_ARG(tv_sec, __actv_local_var_tv_sec), __ARCH_ACTV_RPC_PASS_ARG(tv_nsec, __actv_local_var_tv_nsec));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_mqueue_getsetattr(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_mqueue_getsetattr(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mqueue_getsetattr(unsigned long long __rpc_info, void *__buf, int mqd, long mq_flags)
{
	int __ret;
	int __maybe_unused __actv_local_var_mqd = mqd;
	long __maybe_unused __actv_local_var_mq_flags = mq_flags;
	__ret = ____actvcall_hmcall_mqueue_getsetattr(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mqd, __actv_local_var_mqd), __ARCH_ACTV_RPC_PASS_ARG(mq_flags, __actv_local_var_mq_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mqueue_getsetattr(rref_t __rref, unsigned long long __rpc_info, void *__buf, int mqd, long mq_flags)
{
	int __ret;
	int __maybe_unused __actv_local_var_mqd = mqd;
	long __maybe_unused __actv_local_var_mq_flags = mq_flags;
	__ret = ____actvcapcall_hmcall_mqueue_getsetattr(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mqd, __actv_local_var_mqd), __ARCH_ACTV_RPC_PASS_ARG(mq_flags, __actv_local_var_mq_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mqueue_close(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mqueue_close(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mqueue_close(unsigned long long __rpc_info, void *__buf, int mqd)
{
	int __ret;
	int __maybe_unused __actv_local_var_mqd = mqd;
	__ret = ____actvcall_hmcall_mqueue_close(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mqd, __actv_local_var_mqd));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mqueue_close(rref_t __rref, unsigned long long __rpc_info, void *__buf, int mqd)
{
	int __ret;
	int __maybe_unused __actv_local_var_mqd = mqd;
	__ret = ____actvcapcall_hmcall_mqueue_close(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mqd, __actv_local_var_mqd));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mqueue_unlink(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mqueue_unlink(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mqueue_unlink(unsigned long long __rpc_info, void *__buf, struct mqueuemgr_name mqueue)
{
	int __ret;
	struct mqueuemgr_name __maybe_unused __actv_local_var_mqueue = mqueue;
	__ret = ____actvcall_hmcall_mqueue_unlink(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mqueue, __actv_local_var_mqueue));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mqueue_unlink(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct mqueuemgr_name mqueue)
{
	int __ret;
	struct mqueuemgr_name __maybe_unused __actv_local_var_mqueue = mqueue;
	__ret = ____actvcapcall_hmcall_mqueue_unlink(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mqueue, __actv_local_var_mqueue));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_mqueue_chmod(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_mqueue_chmod(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_mqueue_chmod(unsigned long long __rpc_info, void *__buf, struct mqueuemgr_name mqueue, mode_t mode)
{
	int __ret;
	struct mqueuemgr_name __maybe_unused __actv_local_var_mqueue = mqueue;
	mode_t __maybe_unused __actv_local_var_mode = mode;
	__ret = ____actvcall_hmcall_mqueue_chmod(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mqueue, __actv_local_var_mqueue), __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_mqueue_chmod(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct mqueuemgr_name mqueue, mode_t mode)
{
	int __ret;
	struct mqueuemgr_name __maybe_unused __actv_local_var_mqueue = mqueue;
	mode_t __maybe_unused __actv_local_var_mode = mode;
	__ret = ____actvcapcall_hmcall_mqueue_chmod(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mqueue, __actv_local_var_mqueue), __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_exit(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_exit(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_exit(unsigned long long __rpc_info, void *__buf, int exitval)
{
	int __ret;
	int __maybe_unused __actv_local_var_exitval = exitval;
	__ret = ____actvcall_hmcall_thread_exit(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(exitval, __actv_local_var_exitval));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_exit(rref_t __rref, unsigned long long __rpc_info, void *__buf, int exitval)
{
	int __ret;
	int __maybe_unused __actv_local_var_exitval = exitval;
	__ret = ____actvcapcall_hmcall_thread_exit(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(exitval, __actv_local_var_exitval));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_kill(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_kill(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_kill(unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcall_hmcall_thread_kill(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_kill(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcapcall_hmcall_thread_kill(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_gettid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_gettid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_gettid(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_thread_gettid(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_gettid(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_thread_gettid(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_thread_tid2cref(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_thread_tid2cref(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_tid2cref(unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcall_hmcall_thread_tid2cref(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_tid2cref(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcapcall_hmcall_thread_tid2cref(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_set_tid_address(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_set_tid_address(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_set_tid_address(unsigned long long __rpc_info, void *__buf, cref_t tcb_cref, int *tid_addr)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_tcb_cref = tcb_cref;
	__maybe_unused int *__actv_local_var_tid_addr = tid_addr;
	__ret = ____actvcall_hmcall_thread_set_tid_address(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tcb_cref, __actv_local_var_tcb_cref), __ARCH_ACTV_RPC_PASS_ARG(tid_addr, __actv_local_var_tid_addr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_set_tid_address(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t tcb_cref, int *tid_addr)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_tcb_cref = tcb_cref;
	__maybe_unused int *__actv_local_var_tid_addr = tid_addr;
	__ret = ____actvcapcall_hmcall_thread_set_tid_address(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tcb_cref, __actv_local_var_tcb_cref), __ARCH_ACTV_RPC_PASS_ARG(tid_addr, __actv_local_var_tid_addr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_setname(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_setname(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_setname(unsigned long long __rpc_info, void *__buf, cref_t tcb_cref, struct threadmgr_thread_name th_name)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_tcb_cref = tcb_cref;
	struct threadmgr_thread_name __maybe_unused __actv_local_var_th_name = th_name;
	__ret = ____actvcall_hmcall_thread_setname(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tcb_cref, __actv_local_var_tcb_cref), __ARCH_ACTV_RPC_PASS_ARG(th_name, __actv_local_var_th_name));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_setname(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t tcb_cref, struct threadmgr_thread_name th_name)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_tcb_cref = tcb_cref;
	struct threadmgr_thread_name __maybe_unused __actv_local_var_th_name = th_name;
	__ret = ____actvcapcall_hmcall_thread_setname(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tcb_cref, __actv_local_var_tcb_cref), __ARCH_ACTV_RPC_PASS_ARG(th_name, __actv_local_var_th_name));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_set_pdeath_signal(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_set_pdeath_signal(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_set_pdeath_signal(unsigned long long __rpc_info, void *__buf, int signum)
{
	int __ret;
	int __maybe_unused __actv_local_var_signum = signum;
	__ret = ____actvcall_hmcall_thread_set_pdeath_signal(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_set_pdeath_signal(rref_t __rref, unsigned long long __rpc_info, void *__buf, int signum)
{
	int __ret;
	int __maybe_unused __actv_local_var_signum = signum;
	__ret = ____actvcapcall_hmcall_thread_set_pdeath_signal(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_thread_get_pdeath_signal(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_thread_get_pdeath_signal(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_get_pdeath_signal(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_thread_get_pdeath_signal(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_get_pdeath_signal(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_thread_get_pdeath_signal(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_set_robust_list(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_set_robust_list(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_set_robust_list(unsigned long long __rpc_info, void *__buf, unsigned long list_head, unsigned long len)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_list_head = list_head;
	unsigned long __maybe_unused __actv_local_var_len = len;
	__ret = ____actvcall_hmcall_thread_set_robust_list(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(list_head, __actv_local_var_list_head), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_set_robust_list(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long list_head, unsigned long len)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_list_head = list_head;
	unsigned long __maybe_unused __actv_local_var_len = len;
	__ret = ____actvcapcall_hmcall_thread_set_robust_list(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(list_head, __actv_local_var_list_head), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_thread_get_robust_list(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_thread_get_robust_list(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_get_robust_list(unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcall_hmcall_thread_get_robust_list(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_get_robust_list(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcapcall_hmcall_thread_get_robust_list(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_freeze(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_freeze(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_freeze(unsigned long long __rpc_info, void *__buf, int tid, int flag)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_flag = flag;
	__ret = ____actvcall_hmcall_thread_freeze(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(flag, __actv_local_var_flag));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_freeze(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, int flag)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_flag = flag;
	__ret = ____actvcapcall_hmcall_thread_freeze(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(flag, __actv_local_var_flag));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_thaw(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_thaw(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_thaw(unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcall_hmcall_thread_thaw(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_thaw(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcapcall_hmcall_thread_thaw(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_setpersonality(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_setpersonality(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_setpersonality(unsigned long long __rpc_info, void *__buf, unsigned long personality)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_personality = personality;
	__ret = ____actvcall_hmcall_thread_setpersonality(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(personality, __actv_local_var_personality));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_setpersonality(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long personality)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_personality = personality;
	__ret = ____actvcapcall_hmcall_thread_setpersonality(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(personality, __actv_local_var_personality));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_thread_getpersonality(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_thread_getpersonality(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_getpersonality(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_thread_getpersonality(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_getpersonality(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_thread_getpersonality(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_thread_bind_info(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_thread_bind_info(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_bind_info(unsigned long long __rpc_info, void *__buf, struct path_name name)
{
	int __ret;
	struct path_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcall_hmcall_thread_bind_info(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_bind_info(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct path_name name)
{
	int __ret;
	struct path_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcapcall_hmcall_thread_bind_info(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_set_tickless(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_set_tickless(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_set_tickless(unsigned long long __rpc_info, void *__buf, int tid, bool tickless)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	bool __maybe_unused __actv_local_var_tickless = tickless;
	__ret = ____actvcall_hmcall_thread_set_tickless(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(tickless, __actv_local_var_tickless));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_set_tickless(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, bool tickless)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	bool __maybe_unused __actv_local_var_tickless = tickless;
	__ret = ____actvcapcall_hmcall_thread_set_tickless(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(tickless, __actv_local_var_tickless));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_set_runqueue(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_set_runqueue(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_set_runqueue(unsigned long long __rpc_info, void *__buf, int tid, unsigned int newrq)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	unsigned int __maybe_unused __actv_local_var_newrq = newrq;
	__ret = ____actvcall_hmcall_thread_set_runqueue(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(newrq, __actv_local_var_newrq));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_set_runqueue(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, unsigned int newrq)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	unsigned int __maybe_unused __actv_local_var_newrq = newrq;
	__ret = ____actvcapcall_hmcall_thread_set_runqueue(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(newrq, __actv_local_var_newrq));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_sched_setparam(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_sched_setparam(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_sched_setparam(unsigned long long __rpc_info, void *__buf, int tid, int prio)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_prio = prio;
	__ret = ____actvcall_hmcall_thread_sched_setparam(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(prio, __actv_local_var_prio));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_sched_setparam(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, int prio)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_prio = prio;
	__ret = ____actvcapcall_hmcall_thread_sched_setparam(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(prio, __actv_local_var_prio));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_sched_getparam(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_sched_getparam(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_sched_getparam(unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcall_hmcall_thread_sched_getparam(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_sched_getparam(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcapcall_hmcall_thread_sched_getparam(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_sched_setscheduler(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_sched_setscheduler(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_sched_setscheduler(unsigned long long __rpc_info, void *__buf, int tid, int prio, int policy)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_prio = prio;
	int __maybe_unused __actv_local_var_policy = policy;
	__ret = ____actvcall_hmcall_thread_sched_setscheduler(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(prio, __actv_local_var_prio), __ARCH_ACTV_RPC_PASS_ARG(policy, __actv_local_var_policy));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_sched_setscheduler(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, int prio, int policy)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_prio = prio;
	int __maybe_unused __actv_local_var_policy = policy;
	__ret = ____actvcapcall_hmcall_thread_sched_setscheduler(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(prio, __actv_local_var_prio), __ARCH_ACTV_RPC_PASS_ARG(policy, __actv_local_var_policy));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_sched_getscheduler(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_sched_getscheduler(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_sched_getscheduler(unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcall_hmcall_thread_sched_getscheduler(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_sched_getscheduler(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcapcall_hmcall_thread_sched_getscheduler(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_thread_getseq(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_thread_getseq(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_getseq(unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcall_hmcall_thread_getseq(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_getseq(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcapcall_hmcall_thread_getseq(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_setpriority(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_setpriority(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_setpriority(unsigned long long __rpc_info, void *__buf, int tid, int nice)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_nice = nice;
	__ret = ____actvcall_hmcall_thread_setpriority(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(nice, __actv_local_var_nice));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_setpriority(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, int nice)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_nice = nice;
	__ret = ____actvcapcall_hmcall_thread_setpriority(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(nice, __actv_local_var_nice));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_getpriority(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_getpriority(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_getpriority(unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcall_hmcall_thread_getpriority(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_getpriority(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcapcall_hmcall_thread_getpriority(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_sched_getattr(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_sched_getattr(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_sched_getattr(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_thread_sched_getattr(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_sched_getattr(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_thread_sched_getattr(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_sched_get_interval_rr(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_sched_get_interval_rr(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_sched_get_interval_rr(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_thread_sched_get_interval_rr(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_sched_get_interval_rr(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_thread_sched_get_interval_rr(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_sched_setaffinity(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_sched_setaffinity(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_sched_setaffinity(unsigned long long __rpc_info, void *__buf, int tid, __cpuset_t cpuset)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__cpuset_t __maybe_unused __actv_local_var_cpuset = cpuset;
	__ret = ____actvcall_hmcall_thread_sched_setaffinity(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(cpuset, __actv_local_var_cpuset));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_sched_setaffinity(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, __cpuset_t cpuset)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__cpuset_t __maybe_unused __actv_local_var_cpuset = cpuset;
	__ret = ____actvcapcall_hmcall_thread_sched_setaffinity(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(cpuset, __actv_local_var_cpuset));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_thread_sched_getaffinity(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_thread_sched_getaffinity(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_sched_getaffinity(unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcall_hmcall_thread_sched_getaffinity(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_sched_getaffinity(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcapcall_hmcall_thread_sched_getaffinity(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_update_vnotify_futex(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_update_vnotify_futex(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_update_vnotify_futex(unsigned long long __rpc_info, void *__buf, unsigned int chn, const int *futex)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_chn = chn;
	__maybe_unused const int *__actv_local_var_futex = futex;
	__ret = ____actvcall_hmcall_thread_update_vnotify_futex(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(chn, __actv_local_var_chn), __ARCH_ACTV_RPC_PASS_ARG(futex, __actv_local_var_futex));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_update_vnotify_futex(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int chn, const int *futex)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_chn = chn;
	__maybe_unused const int *__actv_local_var_futex = futex;
	__ret = ____actvcapcall_hmcall_thread_update_vnotify_futex(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(chn, __actv_local_var_chn), __ARCH_ACTV_RPC_PASS_ARG(futex, __actv_local_var_futex));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_futex_wait(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_futex_wait(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_futex_wait(unsigned long long __rpc_info, void *__buf, struct thread_futex_wait_args args)
{
	int __ret;
	struct thread_futex_wait_args __maybe_unused __actv_local_var_args = args;
	__ret = ____actvcall_hmcall_thread_futex_wait(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_futex_wait(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct thread_futex_wait_args args)
{
	int __ret;
	struct thread_futex_wait_args __maybe_unused __actv_local_var_args = args;
	__ret = ____actvcapcall_hmcall_thread_futex_wait(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_futex_wake(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_futex_wake(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_futex_wake(unsigned long long __rpc_info, void *__buf, struct thread_futex_wake_args args)
{
	int __ret;
	struct thread_futex_wake_args __maybe_unused __actv_local_var_args = args;
	__ret = ____actvcall_hmcall_thread_futex_wake(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_futex_wake(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct thread_futex_wake_args args)
{
	int __ret;
	struct thread_futex_wake_args __maybe_unused __actv_local_var_args = args;
	__ret = ____actvcapcall_hmcall_thread_futex_wake(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_thread_futex_requeue(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_thread_futex_requeue(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_thread_futex_requeue(unsigned long long __rpc_info, void *__buf, struct thread_futex_requeue_args args)
{
	int __ret;
	struct thread_futex_requeue_args __maybe_unused __actv_local_var_args = args;
	__ret = ____actvcall_hmcall_thread_futex_requeue(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_thread_futex_requeue(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct thread_futex_requeue_args args)
{
	int __ret;
	struct thread_futex_requeue_args __maybe_unused __actv_local_var_args = args;
	__ret = ____actvcapcall_hmcall_thread_futex_requeue(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_time_set_clock(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_time_set_clock(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_time_set_clock(unsigned long long __rpc_info, void *__buf, unsigned long long value)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_value = value;
	__ret = ____actvcall_hmcall_time_set_clock(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(value, __actv_local_var_value));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_time_set_clock(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long value)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_value = value;
	__ret = ____actvcapcall_hmcall_time_set_clock(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(value, __actv_local_var_value));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_time_set_tock_policy(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_time_set_tock_policy(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_time_set_tock_policy(unsigned long long __rpc_info, void *__buf, struct vtimekeep_tock_policy policy)
{
	int __ret;
	struct vtimekeep_tock_policy __maybe_unused __actv_local_var_policy = policy;
	__ret = ____actvcall_hmcall_time_set_tock_policy(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(policy, __actv_local_var_policy));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_time_set_tock_policy(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct vtimekeep_tock_policy policy)
{
	int __ret;
	struct vtimekeep_tock_policy __maybe_unused __actv_local_var_policy = policy;
	__ret = ____actvcapcall_hmcall_time_set_tock_policy(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(policy, __actv_local_var_policy));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_signal_kill(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_signal_kill(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_kill(unsigned long long __rpc_info, void *__buf, int pid, int signum, struct siginfo_set sig_set)
{
	int __ret;
	int __maybe_unused __actv_local_var_pid = pid;
	int __maybe_unused __actv_local_var_signum = signum;
	struct siginfo_set __maybe_unused __actv_local_var_sig_set = sig_set;
	__ret = ____actvcall_hmcall_signal_kill(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum), __ARCH_ACTV_RPC_PASS_ARG(sig_set, __actv_local_var_sig_set));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_kill(rref_t __rref, unsigned long long __rpc_info, void *__buf, int pid, int signum, struct siginfo_set sig_set)
{
	int __ret;
	int __maybe_unused __actv_local_var_pid = pid;
	int __maybe_unused __actv_local_var_signum = signum;
	struct siginfo_set __maybe_unused __actv_local_var_sig_set = sig_set;
	__ret = ____actvcapcall_hmcall_signal_kill(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum), __ARCH_ACTV_RPC_PASS_ARG(sig_set, __actv_local_var_sig_set));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_signal_tkill(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_signal_tkill(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_tkill(unsigned long long __rpc_info, void *__buf, int tid, int signum, struct siginfo_set sig_set)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_signum = signum;
	struct siginfo_set __maybe_unused __actv_local_var_sig_set = sig_set;
	__ret = ____actvcall_hmcall_signal_tkill(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum), __ARCH_ACTV_RPC_PASS_ARG(sig_set, __actv_local_var_sig_set));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_tkill(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, int signum, struct siginfo_set sig_set)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_signum = signum;
	struct siginfo_set __maybe_unused __actv_local_var_sig_set = sig_set;
	__ret = ____actvcapcall_hmcall_signal_tkill(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum), __ARCH_ACTV_RPC_PASS_ARG(sig_set, __actv_local_var_sig_set));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_signal_tgkill(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_signal_tgkill(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_tgkill(unsigned long long __rpc_info, void *__buf, int tgid, int tid, int signum)
{
	int __ret;
	int __maybe_unused __actv_local_var_tgid = tgid;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_signum = signum;
	__ret = ____actvcall_hmcall_signal_tgkill(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tgid, __actv_local_var_tgid), __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_tgkill(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tgid, int tid, int signum)
{
	int __ret;
	int __maybe_unused __actv_local_var_tgid = tgid;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_signum = signum;
	__ret = ____actvcapcall_hmcall_signal_tgkill(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tgid, __actv_local_var_tgid), __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_signal_sigqueue(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_signal_sigqueue(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_sigqueue(unsigned long long __rpc_info, void *__buf, int tgid, struct __siginfo siginfo, int signum)
{
	int __ret;
	int __maybe_unused __actv_local_var_tgid = tgid;
	struct __siginfo __maybe_unused __actv_local_var_siginfo = siginfo;
	int __maybe_unused __actv_local_var_signum = signum;
	__ret = ____actvcall_hmcall_signal_sigqueue(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tgid, __actv_local_var_tgid), __ARCH_ACTV_RPC_PASS_ARG(siginfo, __actv_local_var_siginfo), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_sigqueue(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tgid, struct __siginfo siginfo, int signum)
{
	int __ret;
	int __maybe_unused __actv_local_var_tgid = tgid;
	struct __siginfo __maybe_unused __actv_local_var_siginfo = siginfo;
	int __maybe_unused __actv_local_var_signum = signum;
	__ret = ____actvcapcall_hmcall_signal_sigqueue(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tgid, __actv_local_var_tgid), __ARCH_ACTV_RPC_PASS_ARG(siginfo, __actv_local_var_siginfo), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_signal_pthread_sigqueue(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_signal_pthread_sigqueue(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_pthread_sigqueue(unsigned long long __rpc_info, void *__buf, int tgid, int tid, int signum, struct __siginfo siginfo)
{
	int __ret;
	int __maybe_unused __actv_local_var_tgid = tgid;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_signum = signum;
	struct __siginfo __maybe_unused __actv_local_var_siginfo = siginfo;
	__ret = ____actvcall_hmcall_signal_pthread_sigqueue(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tgid, __actv_local_var_tgid), __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum), __ARCH_ACTV_RPC_PASS_ARG(siginfo, __actv_local_var_siginfo));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_pthread_sigqueue(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tgid, int tid, int signum, struct __siginfo siginfo)
{
	int __ret;
	int __maybe_unused __actv_local_var_tgid = tgid;
	int __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_signum = signum;
	struct __siginfo __maybe_unused __actv_local_var_siginfo = siginfo;
	__ret = ____actvcapcall_hmcall_signal_pthread_sigqueue(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tgid, __actv_local_var_tgid), __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum), __ARCH_ACTV_RPC_PASS_ARG(siginfo, __actv_local_var_siginfo));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_signal_set_signal_handler(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_signal_set_signal_handler(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_set_signal_handler(unsigned long long __rpc_info, void *__buf, enum hm_sigaction_flag flag, int signum)
{
	int __ret;
	enum hm_sigaction_flag __maybe_unused __actv_local_var_flag = flag;
	int __maybe_unused __actv_local_var_signum = signum;
	__ret = ____actvcall_hmcall_signal_set_signal_handler(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(flag, __actv_local_var_flag), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_set_signal_handler(rref_t __rref, unsigned long long __rpc_info, void *__buf, enum hm_sigaction_flag flag, int signum)
{
	int __ret;
	enum hm_sigaction_flag __maybe_unused __actv_local_var_flag = flag;
	int __maybe_unused __actv_local_var_signum = signum;
	__ret = ____actvcapcall_hmcall_signal_set_signal_handler(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(flag, __actv_local_var_flag), __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_signal_read_signalfd(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_signal_read_signalfd(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_read_signalfd(unsigned long long __rpc_info, void *__buf, unsigned long long sigmask, unsigned int flags, void *buf, size_t buf_size)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_sigmask = sigmask;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__maybe_unused void *__actv_local_var_buf = buf;
	size_t __maybe_unused __actv_local_var_buf_size = buf_size;
	__ret = ____actvcall_hmcall_signal_read_signalfd(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigmask, __actv_local_var_sigmask), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(buf, __actv_local_var_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_size, __actv_local_var_buf_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_read_signalfd(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long sigmask, unsigned int flags, void *buf, size_t buf_size)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_sigmask = sigmask;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__maybe_unused void *__actv_local_var_buf = buf;
	size_t __maybe_unused __actv_local_var_buf_size = buf_size;
	__ret = ____actvcapcall_hmcall_signal_read_signalfd(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigmask, __actv_local_var_sigmask), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(buf, __actv_local_var_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_size, __actv_local_var_buf_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_signal_read_signalevents(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_signal_read_signalevents(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_read_signalevents(unsigned long long __rpc_info, void *__buf, unsigned long long sigmask)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_sigmask = sigmask;
	__ret = ____actvcall_hmcall_signal_read_signalevents(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigmask, __actv_local_var_sigmask));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_read_signalevents(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long sigmask)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_sigmask = sigmask;
	__ret = ____actvcapcall_hmcall_signal_read_signalevents(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigmask, __actv_local_var_sigmask));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_signal_epoll_ctrl(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_signal_epoll_ctrl(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_epoll_ctrl(unsigned long long __rpc_info, void *__buf, int sigfd, unsigned long long sigmask, int op)
{
	int __ret;
	int __maybe_unused __actv_local_var_sigfd = sigfd;
	unsigned long long __maybe_unused __actv_local_var_sigmask = sigmask;
	int __maybe_unused __actv_local_var_op = op;
	__ret = ____actvcall_hmcall_signal_epoll_ctrl(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigfd, __actv_local_var_sigfd), __ARCH_ACTV_RPC_PASS_ARG(sigmask, __actv_local_var_sigmask), __ARCH_ACTV_RPC_PASS_ARG(op, __actv_local_var_op));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_epoll_ctrl(rref_t __rref, unsigned long long __rpc_info, void *__buf, int sigfd, unsigned long long sigmask, int op)
{
	int __ret;
	int __maybe_unused __actv_local_var_sigfd = sigfd;
	unsigned long long __maybe_unused __actv_local_var_sigmask = sigmask;
	int __maybe_unused __actv_local_var_op = op;
	__ret = ____actvcapcall_hmcall_signal_epoll_ctrl(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigfd, __actv_local_var_sigfd), __ARCH_ACTV_RPC_PASS_ARG(sigmask, __actv_local_var_sigmask), __ARCH_ACTV_RPC_PASS_ARG(op, __actv_local_var_op));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_signal_init(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_signal_init(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_init(unsigned long long __rpc_info, void *__buf, unsigned long sigentry)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_sigentry = sigentry;
	__ret = ____actvcall_hmcall_signal_init(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigentry, __actv_local_var_sigentry));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_init(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long sigentry)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_sigentry = sigentry;
	__ret = ____actvcapcall_hmcall_signal_init(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigentry, __actv_local_var_sigentry));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_signal_set_sigmask(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_signal_set_sigmask(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_set_sigmask(unsigned long long __rpc_info, void *__buf, unsigned long ops, unsigned long long new_mask)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_ops = ops;
	unsigned long long __maybe_unused __actv_local_var_new_mask = new_mask;
	__ret = ____actvcall_hmcall_signal_set_sigmask(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(ops, __actv_local_var_ops), __ARCH_ACTV_RPC_PASS_ARG(new_mask, __actv_local_var_new_mask));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_set_sigmask(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long ops, unsigned long long new_mask)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_ops = ops;
	unsigned long long __maybe_unused __actv_local_var_new_mask = new_mask;
	__ret = ____actvcapcall_hmcall_signal_set_sigmask(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(ops, __actv_local_var_ops), __ARCH_ACTV_RPC_PASS_ARG(new_mask, __actv_local_var_new_mask));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_signal_get_pending_signal(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_signal_get_pending_signal(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_get_pending_signal(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_signal_get_pending_signal(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_get_pending_signal(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_signal_get_pending_signal(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_signal_drop_pending_signal(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_signal_drop_pending_signal(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_drop_pending_signal(unsigned long long __rpc_info, void *__buf, unsigned long long sigmask)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_sigmask = sigmask;
	__ret = ____actvcall_hmcall_signal_drop_pending_signal(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigmask, __actv_local_var_sigmask));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_drop_pending_signal(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long sigmask)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_sigmask = sigmask;
	__ret = ____actvcapcall_hmcall_signal_drop_pending_signal(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigmask, __actv_local_var_sigmask));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_signal_set_sigstack(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_signal_set_sigstack(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_set_sigstack(unsigned long long __rpc_info, void *__buf, struct sigstack new_stack)
{
	int __ret;
	struct sigstack __maybe_unused __actv_local_var_new_stack = new_stack;
	__ret = ____actvcall_hmcall_signal_set_sigstack(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(new_stack, __actv_local_var_new_stack));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_set_sigstack(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct sigstack new_stack)
{
	int __ret;
	struct sigstack __maybe_unused __actv_local_var_new_stack = new_stack;
	__ret = ____actvcapcall_hmcall_signal_set_sigstack(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(new_stack, __actv_local_var_new_stack));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_signal_set_sigaction_mask(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_signal_set_sigaction_mask(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_set_sigaction_mask(unsigned long long __rpc_info, void *__buf, unsigned int signum, unsigned long long sigactionmask, int altstack_flag)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_signum = signum;
	unsigned long long __maybe_unused __actv_local_var_sigactionmask = sigactionmask;
	int __maybe_unused __actv_local_var_altstack_flag = altstack_flag;
	__ret = ____actvcall_hmcall_signal_set_sigaction_mask(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum), __ARCH_ACTV_RPC_PASS_ARG(sigactionmask, __actv_local_var_sigactionmask), __ARCH_ACTV_RPC_PASS_ARG(altstack_flag, __actv_local_var_altstack_flag));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_set_sigaction_mask(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int signum, unsigned long long sigactionmask, int altstack_flag)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_signum = signum;
	unsigned long long __maybe_unused __actv_local_var_sigactionmask = sigactionmask;
	int __maybe_unused __actv_local_var_altstack_flag = altstack_flag;
	__ret = ____actvcapcall_hmcall_signal_set_sigaction_mask(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(signum, __actv_local_var_signum), __ARCH_ACTV_RPC_PASS_ARG(sigactionmask, __actv_local_var_sigactionmask), __ARCH_ACTV_RPC_PASS_ARG(altstack_flag, __actv_local_var_altstack_flag));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_signal_timedwait(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_signal_timedwait(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_timedwait(unsigned long long __rpc_info, void *__buf, unsigned long long sigset, bool set_timeout, time_t tv_sec, long tv_nsec)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_sigset = sigset;
	bool __maybe_unused __actv_local_var_set_timeout = set_timeout;
	time_t __maybe_unused __actv_local_var_tv_sec = tv_sec;
	long __maybe_unused __actv_local_var_tv_nsec = tv_nsec;
	__ret = ____actvcall_hmcall_signal_timedwait(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigset, __actv_local_var_sigset), __ARCH_ACTV_RPC_PASS_ARG(set_timeout, __actv_local_var_set_timeout), __ARCH_ACTV_RPC_PASS_ARG(tv_sec, __actv_local_var_tv_sec), __ARCH_ACTV_RPC_PASS_ARG(tv_nsec, __actv_local_var_tv_nsec));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_timedwait(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long sigset, bool set_timeout, time_t tv_sec, long tv_nsec)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_sigset = sigset;
	bool __maybe_unused __actv_local_var_set_timeout = set_timeout;
	time_t __maybe_unused __actv_local_var_tv_sec = tv_sec;
	long __maybe_unused __actv_local_var_tv_nsec = tv_nsec;
	__ret = ____actvcapcall_hmcall_signal_timedwait(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigset, __actv_local_var_sigset), __ARCH_ACTV_RPC_PASS_ARG(set_timeout, __actv_local_var_set_timeout), __ARCH_ACTV_RPC_PASS_ARG(tv_sec, __actv_local_var_tv_sec), __ARCH_ACTV_RPC_PASS_ARG(tv_nsec, __actv_local_var_tv_nsec));
	return __ret;
}

static unsigned long __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_signal_restore(unsigned long long rpc_info, void *__buf, ...);


static unsigned long __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_signal_restore(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


unsigned long __opt_noframe __opt_nostkprot __actvcall_hmcall_signal_restore(unsigned long long __rpc_info, void *__buf, unsigned long long sigmask, unsigned long uctx_addr, unsigned int uctx_size)
{
	unsigned long __ret;
	unsigned long long __maybe_unused __actv_local_var_sigmask = sigmask;
	unsigned long __maybe_unused __actv_local_var_uctx_addr = uctx_addr;
	unsigned int __maybe_unused __actv_local_var_uctx_size = uctx_size;
	__ret = ____actvcall_hmcall_signal_restore(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigmask, __actv_local_var_sigmask), __ARCH_ACTV_RPC_PASS_ARG(uctx_addr, __actv_local_var_uctx_addr), __ARCH_ACTV_RPC_PASS_ARG(uctx_size, __actv_local_var_uctx_size));
	return __ret;
}

unsigned long __opt_noframe __opt_nostkprot __actvcapcall_hmcall_signal_restore(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long sigmask, unsigned long uctx_addr, unsigned int uctx_size)
{
	unsigned long __ret;
	unsigned long long __maybe_unused __actv_local_var_sigmask = sigmask;
	unsigned long __maybe_unused __actv_local_var_uctx_addr = uctx_addr;
	unsigned int __maybe_unused __actv_local_var_uctx_size = uctx_size;
	__ret = ____actvcapcall_hmcall_signal_restore(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(sigmask, __actv_local_var_sigmask), __ARCH_ACTV_RPC_PASS_ARG(uctx_addr, __actv_local_var_uctx_addr), __ARCH_ACTV_RPC_PASS_ARG(uctx_size, __actv_local_var_uctx_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_irq_grant_ctrl(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_irq_grant_ctrl(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_irq_grant_ctrl(unsigned long long __rpc_info, void *__buf, struct irqmgr_grant_arg arg)
{
	int __ret;
	struct irqmgr_grant_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcall_hmcall_irq_grant_ctrl(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_irq_grant_ctrl(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct irqmgr_grant_arg arg)
{
	int __ret;
	struct irqmgr_grant_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcapcall_hmcall_irq_grant_ctrl(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_irq_default_phyctrl_id(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_irq_default_phyctrl_id(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_irq_default_phyctrl_id(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_irq_default_phyctrl_id(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_irq_default_phyctrl_id(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_irq_default_phyctrl_id(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_irq_to_logic(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_irq_to_logic(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_irq_to_logic(unsigned long long __rpc_info, void *__buf, int irqctrl_id, struct irqmgr_to_logic_arg arg, unsigned int cpuid)
{
	int __ret;
	int __maybe_unused __actv_local_var_irqctrl_id = irqctrl_id;
	struct irqmgr_to_logic_arg __maybe_unused __actv_local_var_arg = arg;
	unsigned int __maybe_unused __actv_local_var_cpuid = cpuid;
	__ret = ____actvcall_hmcall_irq_to_logic(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(irqctrl_id, __actv_local_var_irqctrl_id), __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg), __ARCH_ACTV_RPC_PASS_ARG(cpuid, __actv_local_var_cpuid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_irq_to_logic(rref_t __rref, unsigned long long __rpc_info, void *__buf, int irqctrl_id, struct irqmgr_to_logic_arg arg, unsigned int cpuid)
{
	int __ret;
	int __maybe_unused __actv_local_var_irqctrl_id = irqctrl_id;
	struct irqmgr_to_logic_arg __maybe_unused __actv_local_var_arg = arg;
	unsigned int __maybe_unused __actv_local_var_cpuid = cpuid;
	__ret = ____actvcapcall_hmcall_irq_to_logic(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(irqctrl_id, __actv_local_var_irqctrl_id), __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg), __ARCH_ACTV_RPC_PASS_ARG(cpuid, __actv_local_var_cpuid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_irq_revoke_ctrl(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_irq_revoke_ctrl(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_irq_revoke_ctrl(unsigned long long __rpc_info, void *__buf, int irqctrl_id, unsigned int logic_irq)
{
	int __ret;
	int __maybe_unused __actv_local_var_irqctrl_id = irqctrl_id;
	unsigned int __maybe_unused __actv_local_var_logic_irq = logic_irq;
	__ret = ____actvcall_hmcall_irq_revoke_ctrl(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(irqctrl_id, __actv_local_var_irqctrl_id), __ARCH_ACTV_RPC_PASS_ARG(logic_irq, __actv_local_var_logic_irq));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_irq_revoke_ctrl(rref_t __rref, unsigned long long __rpc_info, void *__buf, int irqctrl_id, unsigned int logic_irq)
{
	int __ret;
	int __maybe_unused __actv_local_var_irqctrl_id = irqctrl_id;
	unsigned int __maybe_unused __actv_local_var_logic_irq = logic_irq;
	__ret = ____actvcapcall_hmcall_irq_revoke_ctrl(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(irqctrl_id, __actv_local_var_irqctrl_id), __ARCH_ACTV_RPC_PASS_ARG(logic_irq, __actv_local_var_logic_irq));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_irq_version_get(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_irq_version_get(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_irq_version_get(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_irq_version_get(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_irq_version_get(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_irq_version_get(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_irq_version_check(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_irq_version_check(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_irq_version_check(unsigned long long __rpc_info, void *__buf, struct irqmgr_version expected)
{
	int __ret;
	struct irqmgr_version __maybe_unused __actv_local_var_expected = expected;
	__ret = ____actvcall_hmcall_irq_version_check(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(expected, __actv_local_var_expected));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_irq_version_check(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct irqmgr_version expected)
{
	int __ret;
	struct irqmgr_version __maybe_unused __actv_local_var_expected = expected;
	__ret = ____actvcapcall_hmcall_irq_version_check(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(expected, __actv_local_var_expected));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_irq_stat(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_irq_stat(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_irq_stat(unsigned long long __rpc_info, void *__buf, struct irqmgr_stat_arg arg)
{
	int __ret;
	struct irqmgr_stat_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcall_hmcall_irq_stat(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_irq_stat(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct irqmgr_stat_arg arg)
{
	int __ret;
	struct irqmgr_stat_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcapcall_hmcall_irq_stat(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_irq_suspend(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_irq_suspend(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_irq_suspend(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_irq_suspend(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_irq_suspend(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_irq_suspend(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_irq_resume(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_irq_resume(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_irq_resume(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_irq_resume(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_irq_resume(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_irq_resume(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_sec_cred_cfg(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_sec_cred_cfg(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sec_cred_cfg(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_sec_cred_cfg(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sec_cred_cfg(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_sec_cred_cfg(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sec_setexeccon(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sec_setexeccon(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sec_setexeccon(unsigned long long __rpc_info, void *__buf, struct secmgr_sec_context ctx)
{
	int __ret;
	struct secmgr_sec_context __maybe_unused __actv_local_var_ctx = ctx;
	__ret = ____actvcall_hmcall_sec_setexeccon(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(ctx, __actv_local_var_ctx));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sec_setexeccon(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct secmgr_sec_context ctx)
{
	int __ret;
	struct secmgr_sec_context __maybe_unused __actv_local_var_ctx = ctx;
	__ret = ____actvcapcall_hmcall_sec_setexeccon(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(ctx, __actv_local_var_ctx));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sec_shconf_set_field(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sec_shconf_set_field(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sec_shconf_set_field(unsigned long long __rpc_info, void *__buf, unsigned int field, unsigned int value)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_field = field;
	unsigned int __maybe_unused __actv_local_var_value = value;
	__ret = ____actvcall_hmcall_sec_shconf_set_field(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(field, __actv_local_var_field), __ARCH_ACTV_RPC_PASS_ARG(value, __actv_local_var_value));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sec_shconf_set_field(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int field, unsigned int value)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_field = field;
	unsigned int __maybe_unused __actv_local_var_value = value;
	__ret = ____actvcapcall_hmcall_sec_shconf_set_field(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(field, __actv_local_var_field), __ARCH_ACTV_RPC_PASS_ARG(value, __actv_local_var_value));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_sec_crlread(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_sec_crlread(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sec_crlread(unsigned long long __rpc_info, void *__buf, void *buf, unsigned int buf_sz, unsigned int offset)
{
	int __ret;
	__maybe_unused void *__actv_local_var_buf = buf;
	unsigned int __maybe_unused __actv_local_var_buf_sz = buf_sz;
	unsigned int __maybe_unused __actv_local_var_offset = offset;
	__ret = ____actvcall_hmcall_sec_crlread(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(buf, __actv_local_var_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_sz, __actv_local_var_buf_sz), __ARCH_ACTV_RPC_PASS_ARG(offset, __actv_local_var_offset));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sec_crlread(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *buf, unsigned int buf_sz, unsigned int offset)
{
	int __ret;
	__maybe_unused void *__actv_local_var_buf = buf;
	unsigned int __maybe_unused __actv_local_var_buf_sz = buf_sz;
	unsigned int __maybe_unused __actv_local_var_offset = offset;
	__ret = ____actvcapcall_hmcall_sec_crlread(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(buf, __actv_local_var_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_sz, __actv_local_var_buf_sz), __ARCH_ACTV_RPC_PASS_ARG(offset, __actv_local_var_offset));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sec_crlwrite(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sec_crlwrite(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sec_crlwrite(unsigned long long __rpc_info, void *__buf, const void *crl, unsigned long long crl_sz)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_crl = crl;
	unsigned long long __maybe_unused __actv_local_var_crl_sz = crl_sz;
	__ret = ____actvcall_hmcall_sec_crlwrite(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(crl, __actv_local_var_crl), __ARCH_ACTV_RPC_PASS_ARG(crl_sz, __actv_local_var_crl_sz));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sec_crlwrite(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *crl, unsigned long long crl_sz)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_crl = crl;
	unsigned long long __maybe_unused __actv_local_var_crl_sz = crl_sz;
	__ret = ____actvcapcall_hmcall_sec_crlwrite(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(crl, __actv_local_var_crl), __ARCH_ACTV_RPC_PASS_ARG(crl_sz, __actv_local_var_crl_sz));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sec_umask(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sec_umask(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sec_umask(unsigned long long __rpc_info, void *__buf, int mode)
{
	int __ret;
	int __maybe_unused __actv_local_var_mode = mode;
	__ret = ____actvcall_hmcall_sec_umask(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sec_umask(rref_t __rref, unsigned long long __rpc_info, void *__buf, int mode)
{
	int __ret;
	int __maybe_unused __actv_local_var_mode = mode;
	__ret = ____actvcapcall_hmcall_sec_umask(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(mode, __actv_local_var_mode));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_procfs_simple_read(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_procfs_simple_read(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_simple_read(unsigned long long __rpc_info, void *__buf, struct hm_actv_buf name_buf)
{
	int __ret;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcall_hmcall_procfs_simple_read(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_simple_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_actv_buf name_buf)
{
	int __ret;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcapcall_hmcall_procfs_simple_read(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_procfs_simple_pid_read(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_procfs_simple_pid_read(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_simple_pid_read(unsigned long long __rpc_info, void *__buf, int pid, unsigned long long seq, struct hm_actv_buf name_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_pid = pid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcall_hmcall_procfs_simple_pid_read(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_simple_pid_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, int pid, unsigned long long seq, struct hm_actv_buf name_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_pid = pid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcapcall_hmcall_procfs_simple_pid_read(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_procfs_simple_tid_read(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_procfs_simple_tid_read(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_simple_tid_read(unsigned long long __rpc_info, void *__buf, int tid, unsigned long long seq, struct hm_actv_buf name_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcall_hmcall_procfs_simple_tid_read(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_simple_tid_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, unsigned long long seq, struct hm_actv_buf name_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcapcall_hmcall_procfs_simple_tid_read(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_pid_read(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_pid_read(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_pid_read(unsigned long long __rpc_info, void *__buf, int pid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_pid = pid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned long long __maybe_unused __actv_local_var_mpool_size = mpool_size;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcall_hmcall_procfs_pid_read(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(mpool_size, __actv_local_var_mpool_size), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_pid_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, int pid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_pid = pid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned long long __maybe_unused __actv_local_var_mpool_size = mpool_size;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcapcall_hmcall_procfs_pid_read(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(mpool_size, __actv_local_var_mpool_size), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_tid_read(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_tid_read(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_tid_read(unsigned long long __rpc_info, void *__buf, int tid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned long long __maybe_unused __actv_local_var_mpool_size = mpool_size;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcall_hmcall_procfs_tid_read(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(mpool_size, __actv_local_var_mpool_size), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_tid_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, unsigned long long seq, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned long long __maybe_unused __actv_local_var_mpool_size = mpool_size;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcapcall_hmcall_procfs_tid_read(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(mpool_size, __actv_local_var_mpool_size), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_read(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_read(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_read(unsigned long long __rpc_info, void *__buf, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned long long __maybe_unused __actv_local_var_mpool_size = mpool_size;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcall_hmcall_procfs_read(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(mpool_size, __actv_local_var_mpool_size), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, unsigned long long mpool_size, struct hm_actv_buf name_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned long long __maybe_unused __actv_local_var_mpool_size = mpool_size;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcapcall_hmcall_procfs_read(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(mpool_size, __actv_local_var_mpool_size), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_pid_write(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_pid_write(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_pid_write(unsigned long long __rpc_info, void *__buf, struct procfs_tagname name, int pid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf)
{
	int __ret;
	struct procfs_tagname __maybe_unused __actv_local_var_name = name;
	int __maybe_unused __actv_local_var_pid = pid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	unsigned long long __maybe_unused __actv_local_var_pos = pos;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcall_hmcall_procfs_pid_write(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(pos, __actv_local_var_pos), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_pid_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct procfs_tagname name, int pid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf)
{
	int __ret;
	struct procfs_tagname __maybe_unused __actv_local_var_name = name;
	int __maybe_unused __actv_local_var_pid = pid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	unsigned long long __maybe_unused __actv_local_var_pos = pos;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcapcall_hmcall_procfs_pid_write(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(pos, __actv_local_var_pos), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_tid_write(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_tid_write(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_tid_write(unsigned long long __rpc_info, void *__buf, struct procfs_tagname name, int tid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf)
{
	int __ret;
	struct procfs_tagname __maybe_unused __actv_local_var_name = name;
	int __maybe_unused __actv_local_var_tid = tid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	unsigned long long __maybe_unused __actv_local_var_pos = pos;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcall_hmcall_procfs_tid_write(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(pos, __actv_local_var_pos), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_tid_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct procfs_tagname name, int tid, unsigned long long seq, unsigned long long pos, struct hm_actv_buf name_buf)
{
	int __ret;
	struct procfs_tagname __maybe_unused __actv_local_var_name = name;
	int __maybe_unused __actv_local_var_tid = tid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	unsigned long long __maybe_unused __actv_local_var_pos = pos;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcapcall_hmcall_procfs_tid_write(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(pos, __actv_local_var_pos), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_write(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_write(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_write(unsigned long long __rpc_info, void *__buf, struct procfs_tagname name, unsigned long long pos, struct hm_actv_buf name_buf)
{
	int __ret;
	struct procfs_tagname __maybe_unused __actv_local_var_name = name;
	unsigned long long __maybe_unused __actv_local_var_pos = pos;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcall_hmcall_procfs_write(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(pos, __actv_local_var_pos), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct procfs_tagname name, unsigned long long pos, struct hm_actv_buf name_buf)
{
	int __ret;
	struct procfs_tagname __maybe_unused __actv_local_var_name = name;
	unsigned long long __maybe_unused __actv_local_var_pos = pos;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcapcall_hmcall_procfs_write(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(pos, __actv_local_var_pos), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_yama_write(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_yama_write(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_yama_write(unsigned long long __rpc_info, void *__buf, unsigned long long pos, unsigned int cnode_idx, struct procfs_tagname name, const void *send_buf, unsigned long buf_len)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_pos = pos;
	unsigned int __maybe_unused __actv_local_var_cnode_idx = cnode_idx;
	struct procfs_tagname __maybe_unused __actv_local_var_name = name;
	__maybe_unused const void *__actv_local_var_send_buf = send_buf;
	unsigned long __maybe_unused __actv_local_var_buf_len = buf_len;
	__ret = ____actvcall_hmcall_procfs_yama_write(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pos, __actv_local_var_pos), __ARCH_ACTV_RPC_PASS_ARG(cnode_idx, __actv_local_var_cnode_idx), __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(send_buf, __actv_local_var_send_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_len, __actv_local_var_buf_len));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_yama_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long pos, unsigned int cnode_idx, struct procfs_tagname name, const void *send_buf, unsigned long buf_len)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_pos = pos;
	unsigned int __maybe_unused __actv_local_var_cnode_idx = cnode_idx;
	struct procfs_tagname __maybe_unused __actv_local_var_name = name;
	__maybe_unused const void *__actv_local_var_send_buf = send_buf;
	unsigned long __maybe_unused __actv_local_var_buf_len = buf_len;
	__ret = ____actvcapcall_hmcall_procfs_yama_write(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pos, __actv_local_var_pos), __ARCH_ACTV_RPC_PASS_ARG(cnode_idx, __actv_local_var_cnode_idx), __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(send_buf, __actv_local_var_send_buf), __ARCH_ACTV_RPC_PASS_ARG(buf_len, __actv_local_var_buf_len));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_get_allpids(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_get_allpids(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_get_allpids(unsigned long long __rpc_info, void *__buf, int shm_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__ret = ____actvcall_hmcall_procfs_get_allpids(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_get_allpids(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__ret = ____actvcapcall_hmcall_procfs_get_allpids(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_get_alltids(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_get_alltids(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_get_alltids(unsigned long long __rpc_info, void *__buf, int pid, unsigned long long seq, int shm_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_pid = pid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__ret = ____actvcall_hmcall_procfs_get_alltids(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_get_alltids(rref_t __rref, unsigned long long __rpc_info, void *__buf, int pid, unsigned long long seq, int shm_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_pid = pid;
	unsigned long long __maybe_unused __actv_local_var_seq = seq;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__ret = ____actvcapcall_hmcall_procfs_get_alltids(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(seq, __actv_local_var_seq), __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_get_irq_names(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_get_irq_names(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_get_irq_names(unsigned long long __rpc_info, void *__buf, int shm_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__ret = ____actvcall_hmcall_procfs_get_irq_names(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_get_irq_names(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	__ret = ____actvcapcall_hmcall_procfs_get_irq_names(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_simple_irq_read(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_simple_irq_read(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_simple_irq_read(unsigned long long __rpc_info, void *__buf, uint32_t id, struct hm_actv_buf name_buf)
{
	int __ret;
	uint32_t __maybe_unused __actv_local_var_id = id;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcall_hmcall_procfs_simple_irq_read(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(id, __actv_local_var_id), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_simple_irq_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, uint32_t id, struct hm_actv_buf name_buf)
{
	int __ret;
	uint32_t __maybe_unused __actv_local_var_id = id;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcapcall_hmcall_procfs_simple_irq_read(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(id, __actv_local_var_id), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_irq_read(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_irq_read(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_irq_read(unsigned long long __rpc_info, void *__buf, uint32_t irq_id, int shm_id, unsigned long long shm_size, struct hm_actv_buf name_buf)
{
	int __ret;
	uint32_t __maybe_unused __actv_local_var_irq_id = irq_id;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned long long __maybe_unused __actv_local_var_shm_size = shm_size;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcall_hmcall_procfs_irq_read(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(irq_id, __actv_local_var_irq_id), __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(shm_size, __actv_local_var_shm_size), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_irq_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, uint32_t irq_id, int shm_id, unsigned long long shm_size, struct hm_actv_buf name_buf)
{
	int __ret;
	uint32_t __maybe_unused __actv_local_var_irq_id = irq_id;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned long long __maybe_unused __actv_local_var_shm_size = shm_size;
	struct hm_actv_buf __maybe_unused __actv_local_var_name_buf = name_buf;
	__ret = ____actvcapcall_hmcall_procfs_irq_read(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(irq_id, __actv_local_var_irq_id), __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(shm_size, __actv_local_var_shm_size), __ARCH_ACTV_RPC_PASS_ARG(name_buf, __actv_local_var_name_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_procfs_irq_write(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_procfs_irq_write(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_procfs_irq_write(unsigned long long __rpc_info, void *__buf, uint32_t irq_id, struct procfs_tagname tagname, unsigned long long pos, struct hm_actv_buf src_buf)
{
	int __ret;
	uint32_t __maybe_unused __actv_local_var_irq_id = irq_id;
	struct procfs_tagname __maybe_unused __actv_local_var_tagname = tagname;
	unsigned long long __maybe_unused __actv_local_var_pos = pos;
	struct hm_actv_buf __maybe_unused __actv_local_var_src_buf = src_buf;
	__ret = ____actvcall_hmcall_procfs_irq_write(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(irq_id, __actv_local_var_irq_id), __ARCH_ACTV_RPC_PASS_ARG(tagname, __actv_local_var_tagname), __ARCH_ACTV_RPC_PASS_ARG(pos, __actv_local_var_pos), __ARCH_ACTV_RPC_PASS_ARG(src_buf, __actv_local_var_src_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_procfs_irq_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, uint32_t irq_id, struct procfs_tagname tagname, unsigned long long pos, struct hm_actv_buf src_buf)
{
	int __ret;
	uint32_t __maybe_unused __actv_local_var_irq_id = irq_id;
	struct procfs_tagname __maybe_unused __actv_local_var_tagname = tagname;
	unsigned long long __maybe_unused __actv_local_var_pos = pos;
	struct hm_actv_buf __maybe_unused __actv_local_var_src_buf = src_buf;
	__ret = ____actvcapcall_hmcall_procfs_irq_write(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(irq_id, __actv_local_var_irq_id), __ARCH_ACTV_RPC_PASS_ARG(tagname, __actv_local_var_tagname), __ARCH_ACTV_RPC_PASS_ARG(pos, __actv_local_var_pos), __ARCH_ACTV_RPC_PASS_ARG(src_buf, __actv_local_var_src_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_vm_get_region_num(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_vm_get_region_num(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_get_region_num(unsigned long long __rpc_info, void *__buf, xref_t vm, unsigned int type)
{
	int __ret;
	xref_t __maybe_unused __actv_local_var_vm = vm;
	unsigned int __maybe_unused __actv_local_var_type = type;
	__ret = ____actvcall_hmcall_vm_get_region_num(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vm, __actv_local_var_vm), __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_get_region_num(rref_t __rref, unsigned long long __rpc_info, void *__buf, xref_t vm, unsigned int type)
{
	int __ret;
	xref_t __maybe_unused __actv_local_var_vm = vm;
	unsigned int __maybe_unused __actv_local_var_type = type;
	__ret = ____actvcapcall_hmcall_vm_get_region_num(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vm, __actv_local_var_vm), __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_vm_map_iomem(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_vm_map_iomem(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_map_iomem(unsigned long long __rpc_info, void *__buf, cref_t vm, void *vm_regions, unsigned int region_num)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_vm = vm;
	__maybe_unused void *__actv_local_var_vm_regions = vm_regions;
	unsigned int __maybe_unused __actv_local_var_region_num = region_num;
	__ret = ____actvcall_hmcall_vm_map_iomem(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vm, __actv_local_var_vm), __ARCH_ACTV_RPC_PASS_ARG(vm_regions, __actv_local_var_vm_regions), __ARCH_ACTV_RPC_PASS_ARG(region_num, __actv_local_var_region_num));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_map_iomem(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t vm, void *vm_regions, unsigned int region_num)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_vm = vm;
	__maybe_unused void *__actv_local_var_vm_regions = vm_regions;
	unsigned int __maybe_unused __actv_local_var_region_num = region_num;
	__ret = ____actvcapcall_hmcall_vm_map_iomem(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vm, __actv_local_var_vm), __ARCH_ACTV_RPC_PASS_ARG(vm_regions, __actv_local_var_vm_regions), __ARCH_ACTV_RPC_PASS_ARG(region_num, __actv_local_var_region_num));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_vm_map_to_process(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_vm_map_to_process(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_map_to_process(unsigned long long __rpc_info, void *__buf, rref_t vm, void *vm_regions, unsigned int region_num)
{
	int __ret;
	rref_t __maybe_unused __actv_local_var_vm = vm;
	__maybe_unused void *__actv_local_var_vm_regions = vm_regions;
	unsigned int __maybe_unused __actv_local_var_region_num = region_num;
	__ret = ____actvcall_hmcall_vm_map_to_process(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vm, __actv_local_var_vm), __ARCH_ACTV_RPC_PASS_ARG(vm_regions, __actv_local_var_vm_regions), __ARCH_ACTV_RPC_PASS_ARG(region_num, __actv_local_var_region_num));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_map_to_process(rref_t __rref, unsigned long long __rpc_info, void *__buf, rref_t vm, void *vm_regions, unsigned int region_num)
{
	int __ret;
	rref_t __maybe_unused __actv_local_var_vm = vm;
	__maybe_unused void *__actv_local_var_vm_regions = vm_regions;
	unsigned int __maybe_unused __actv_local_var_region_num = region_num;
	__ret = ____actvcapcall_hmcall_vm_map_to_process(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vm, __actv_local_var_vm), __ARCH_ACTV_RPC_PASS_ARG(vm_regions, __actv_local_var_vm_regions), __ARCH_ACTV_RPC_PASS_ARG(region_num, __actv_local_var_region_num));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_vm_map_shmmem(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_vm_map_shmmem(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_map_shmmem(unsigned long long __rpc_info, void *__buf, cref_t vm)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_vm = vm;
	__ret = ____actvcall_hmcall_vm_map_shmmem(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vm, __actv_local_var_vm));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_map_shmmem(rref_t __rref, unsigned long long __rpc_info, void *__buf, cref_t vm)
{
	int __ret;
	cref_t __maybe_unused __actv_local_var_vm = vm;
	__ret = ____actvcapcall_hmcall_vm_map_shmmem(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vm, __actv_local_var_vm));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_vm_populate_map(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_vm_populate_map(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_populate_map(unsigned long long __rpc_info, void *__buf, uintptr_t vm_gpa, uintptr_t uvmm_hva)
{
	int __ret;
	uintptr_t __maybe_unused __actv_local_var_vm_gpa = vm_gpa;
	uintptr_t __maybe_unused __actv_local_var_uvmm_hva = uvmm_hva;
	__ret = ____actvcall_hmcall_vm_populate_map(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vm_gpa, __actv_local_var_vm_gpa), __ARCH_ACTV_RPC_PASS_ARG(uvmm_hva, __actv_local_var_uvmm_hva));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_populate_map(rref_t __rref, unsigned long long __rpc_info, void *__buf, uintptr_t vm_gpa, uintptr_t uvmm_hva)
{
	int __ret;
	uintptr_t __maybe_unused __actv_local_var_vm_gpa = vm_gpa;
	uintptr_t __maybe_unused __actv_local_var_uvmm_hva = uvmm_hva;
	__ret = ____actvcapcall_hmcall_vm_populate_map(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vm_gpa, __actv_local_var_vm_gpa), __ARCH_ACTV_RPC_PASS_ARG(uvmm_hva, __actv_local_var_uvmm_hva));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_vm_create_vm_vspace(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_vm_create_vm_vspace(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_create_vm_vspace(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_vm_create_vm_vspace(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_create_vm_vspace(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_vm_create_vm_vspace(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_vm_destroy_vm_vspace(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_vm_destroy_vm_vspace(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_destroy_vm_vspace(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_vm_destroy_vm_vspace(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_destroy_vm_vspace(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_vm_destroy_vm_vspace(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_vm_map_ipcshm(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_vm_map_ipcshm(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_map_ipcshm(unsigned long long __rpc_info, void *__buf, int shm_id, int shmflg, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	int __maybe_unused __actv_local_var_shmflg = shmflg;
	unsigned int __maybe_unused __actv_local_var_nr_gpa_lists = nr_gpa_lists;
	struct hm_actv_buf __maybe_unused __actv_local_var_gpa_lists_buf = gpa_lists_buf;
	__ret = ____actvcall_hmcall_vm_map_ipcshm(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(shmflg, __actv_local_var_shmflg), __ARCH_ACTV_RPC_PASS_ARG(nr_gpa_lists, __actv_local_var_nr_gpa_lists), __ARCH_ACTV_RPC_PASS_ARG(gpa_lists_buf, __actv_local_var_gpa_lists_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_map_ipcshm(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, int shmflg, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	int __maybe_unused __actv_local_var_shmflg = shmflg;
	unsigned int __maybe_unused __actv_local_var_nr_gpa_lists = nr_gpa_lists;
	struct hm_actv_buf __maybe_unused __actv_local_var_gpa_lists_buf = gpa_lists_buf;
	__ret = ____actvcapcall_hmcall_vm_map_ipcshm(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(shmflg, __actv_local_var_shmflg), __ARCH_ACTV_RPC_PASS_ARG(nr_gpa_lists, __actv_local_var_nr_gpa_lists), __ARCH_ACTV_RPC_PASS_ARG(gpa_lists_buf, __actv_local_var_gpa_lists_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_vm_unmap_ipcshm(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_vm_unmap_ipcshm(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_unmap_ipcshm(unsigned long long __rpc_info, void *__buf, int shm_id, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned int __maybe_unused __actv_local_var_nr_gpa_lists = nr_gpa_lists;
	struct hm_actv_buf __maybe_unused __actv_local_var_gpa_lists_buf = gpa_lists_buf;
	__ret = ____actvcall_hmcall_vm_unmap_ipcshm(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(nr_gpa_lists, __actv_local_var_nr_gpa_lists), __ARCH_ACTV_RPC_PASS_ARG(gpa_lists_buf, __actv_local_var_gpa_lists_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_unmap_ipcshm(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shm_id, unsigned int nr_gpa_lists, struct hm_actv_buf gpa_lists_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_shm_id = shm_id;
	unsigned int __maybe_unused __actv_local_var_nr_gpa_lists = nr_gpa_lists;
	struct hm_actv_buf __maybe_unused __actv_local_var_gpa_lists_buf = gpa_lists_buf;
	__ret = ____actvcapcall_hmcall_vm_unmap_ipcshm(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shm_id, __actv_local_var_shm_id), __ARCH_ACTV_RPC_PASS_ARG(nr_gpa_lists, __actv_local_var_nr_gpa_lists), __ARCH_ACTV_RPC_PASS_ARG(gpa_lists_buf, __actv_local_var_gpa_lists_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_vm_mmap(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_vm_mmap(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_mmap(unsigned long long __rpc_info, void *__buf, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd, struct hm_actv_buf gpa_list_buf)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	unsigned int __maybe_unused __actv_local_var_file_type = file_type;
	struct fs_service_name __maybe_unused __actv_local_var_service_name = service_name;
	long long __maybe_unused __actv_local_var_offset = offset;
	int __maybe_unused __actv_local_var_fd = fd;
	struct hm_actv_buf __maybe_unused __actv_local_var_gpa_list_buf = gpa_list_buf;
	__ret = ____actvcall_hmcall_vm_mmap(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(file_type, __actv_local_var_file_type), __ARCH_ACTV_RPC_PASS_ARG(service_name, __actv_local_var_service_name), __ARCH_ACTV_RPC_PASS_ARG(offset, __actv_local_var_offset), __ARCH_ACTV_RPC_PASS_ARG(fd, __actv_local_var_fd), __ARCH_ACTV_RPC_PASS_ARG(gpa_list_buf, __actv_local_var_gpa_list_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_mmap(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int prot, unsigned int flags, unsigned int file_type, struct fs_service_name service_name, long long offset, int fd, struct hm_actv_buf gpa_list_buf)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	unsigned int __maybe_unused __actv_local_var_file_type = file_type;
	struct fs_service_name __maybe_unused __actv_local_var_service_name = service_name;
	long long __maybe_unused __actv_local_var_offset = offset;
	int __maybe_unused __actv_local_var_fd = fd;
	struct hm_actv_buf __maybe_unused __actv_local_var_gpa_list_buf = gpa_list_buf;
	__ret = ____actvcapcall_hmcall_vm_mmap(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(file_type, __actv_local_var_file_type), __ARCH_ACTV_RPC_PASS_ARG(service_name, __actv_local_var_service_name), __ARCH_ACTV_RPC_PASS_ARG(offset, __actv_local_var_offset), __ARCH_ACTV_RPC_PASS_ARG(fd, __actv_local_var_fd), __ARCH_ACTV_RPC_PASS_ARG(gpa_list_buf, __actv_local_var_gpa_list_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_vm_munmap(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_vm_munmap(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_munmap(unsigned long long __rpc_info, void *__buf, struct hm_actv_buf gpa_list_buf)
{
	int __ret;
	struct hm_actv_buf __maybe_unused __actv_local_var_gpa_list_buf = gpa_list_buf;
	__ret = ____actvcall_hmcall_vm_munmap(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(gpa_list_buf, __actv_local_var_gpa_list_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_munmap(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_actv_buf gpa_list_buf)
{
	int __ret;
	struct hm_actv_buf __maybe_unused __actv_local_var_gpa_list_buf = gpa_list_buf;
	__ret = ____actvcapcall_hmcall_vm_munmap(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(gpa_list_buf, __actv_local_var_gpa_list_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_vm_mmap_vdso(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_vm_mmap_vdso(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_mmap_vdso(unsigned long long __rpc_info, void *__buf, uint64_t gpa, uint64_t size)
{
	int __ret;
	uint64_t __maybe_unused __actv_local_var_gpa = gpa;
	uint64_t __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_vm_mmap_vdso(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(gpa, __actv_local_var_gpa), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_mmap_vdso(rref_t __rref, unsigned long long __rpc_info, void *__buf, uint64_t gpa, uint64_t size)
{
	int __ret;
	uint64_t __maybe_unused __actv_local_var_gpa = gpa;
	uint64_t __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_vm_mmap_vdso(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(gpa, __actv_local_var_gpa), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_vm_gpa_to_hpa(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_vm_gpa_to_hpa(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_gpa_to_hpa(unsigned long long __rpc_info, void *__buf, uintptr_t gpa)
{
	int __ret;
	uintptr_t __maybe_unused __actv_local_var_gpa = gpa;
	__ret = ____actvcall_hmcall_vm_gpa_to_hpa(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(gpa, __actv_local_var_gpa));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_gpa_to_hpa(rref_t __rref, unsigned long long __rpc_info, void *__buf, uintptr_t gpa)
{
	int __ret;
	uintptr_t __maybe_unused __actv_local_var_gpa = gpa;
	__ret = ____actvcapcall_hmcall_vm_gpa_to_hpa(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(gpa, __actv_local_var_gpa));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_vm_madvise(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_vm_madvise(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_madvise(unsigned long long __rpc_info, void *__buf, unsigned long long vm_gpa, unsigned long long uvmm_hva, unsigned long long length, unsigned int flags)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_vm_gpa = vm_gpa;
	unsigned long long __maybe_unused __actv_local_var_uvmm_hva = uvmm_hva;
	unsigned long long __maybe_unused __actv_local_var_length = length;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcall_hmcall_vm_madvise(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vm_gpa, __actv_local_var_vm_gpa), __ARCH_ACTV_RPC_PASS_ARG(uvmm_hva, __actv_local_var_uvmm_hva), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_madvise(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long vm_gpa, unsigned long long uvmm_hva, unsigned long long length, unsigned int flags)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_vm_gpa = vm_gpa;
	unsigned long long __maybe_unused __actv_local_var_uvmm_hva = uvmm_hva;
	unsigned long long __maybe_unused __actv_local_var_length = length;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcapcall_hmcall_vm_madvise(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(vm_gpa, __actv_local_var_vm_gpa), __ARCH_ACTV_RPC_PASS_ARG(uvmm_hva, __actv_local_var_uvmm_hva), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_vm_mclone(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_vm_mclone(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_vm_mclone(unsigned long long __rpc_info, void *__buf, uint64_t src_va, uint64_t tgt_gpa, uint64_t len, uint32_t prot)
{
	int __ret;
	uint64_t __maybe_unused __actv_local_var_src_va = src_va;
	uint64_t __maybe_unused __actv_local_var_tgt_gpa = tgt_gpa;
	uint64_t __maybe_unused __actv_local_var_len = len;
	uint32_t __maybe_unused __actv_local_var_prot = prot;
	__ret = ____actvcall_hmcall_vm_mclone(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(src_va, __actv_local_var_src_va), __ARCH_ACTV_RPC_PASS_ARG(tgt_gpa, __actv_local_var_tgt_gpa), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_vm_mclone(rref_t __rref, unsigned long long __rpc_info, void *__buf, uint64_t src_va, uint64_t tgt_gpa, uint64_t len, uint32_t prot)
{
	int __ret;
	uint64_t __maybe_unused __actv_local_var_src_va = src_va;
	uint64_t __maybe_unused __actv_local_var_tgt_gpa = tgt_gpa;
	uint64_t __maybe_unused __actv_local_var_len = len;
	uint32_t __maybe_unused __actv_local_var_prot = prot;
	__ret = ____actvcapcall_hmcall_vm_mclone(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(src_va, __actv_local_var_src_va), __ARCH_ACTV_RPC_PASS_ARG(tgt_gpa, __actv_local_var_tgt_gpa), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_ns_unshare(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_ns_unshare(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ns_unshare(unsigned long long __rpc_info, void *__buf, int flags)
{
	int __ret;
	int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcall_hmcall_ns_unshare(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ns_unshare(rref_t __rref, unsigned long long __rpc_info, void *__buf, int flags)
{
	int __ret;
	int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcapcall_hmcall_ns_unshare(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_ns_setns(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_ns_setns(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ns_setns(unsigned long long __rpc_info, void *__buf, int fd, int flags)
{
	int __ret;
	int __maybe_unused __actv_local_var_fd = fd;
	int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcall_hmcall_ns_setns(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(fd, __actv_local_var_fd), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ns_setns(rref_t __rref, unsigned long long __rpc_info, void *__buf, int fd, int flags)
{
	int __ret;
	int __maybe_unused __actv_local_var_fd = fd;
	int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcapcall_hmcall_ns_setns(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(fd, __actv_local_var_fd), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_ns_get(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_ns_get(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ns_get(unsigned long long __rpc_info, void *__buf, unsigned int nsid, int flags)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_nsid = nsid;
	int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcall_hmcall_ns_get(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(nsid, __actv_local_var_nsid), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ns_get(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int nsid, int flags)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_nsid = nsid;
	int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcapcall_hmcall_ns_get(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(nsid, __actv_local_var_nsid), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_ns_put(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_ns_put(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ns_put(unsigned long long __rpc_info, void *__buf, unsigned int nsid, int flags)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_nsid = nsid;
	int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcall_hmcall_ns_put(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(nsid, __actv_local_var_nsid), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ns_put(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int nsid, int flags)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_nsid = nsid;
	int __maybe_unused __actv_local_var_flags = flags;
	__ret = ____actvcapcall_hmcall_ns_put(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(nsid, __actv_local_var_nsid), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_guard_action(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_guard_action(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_guard_action(unsigned long long __rpc_info, void *__buf, unsigned int cmd, union guard_action_args args)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_cmd = cmd;
	union guard_action_args __maybe_unused __actv_local_var_args = args;
	__ret = ____actvcall_hmcall_guard_action(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_guard_action(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int cmd, union guard_action_args args)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_cmd = cmd;
	union guard_action_args __maybe_unused __actv_local_var_args = args;
	__ret = ____actvcapcall_hmcall_guard_action(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_guard_sysrq(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_guard_sysrq(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_guard_sysrq(unsigned long long __rpc_info, void *__buf, int key, int lock_free)
{
	int __ret;
	int __maybe_unused __actv_local_var_key = key;
	int __maybe_unused __actv_local_var_lock_free = lock_free;
	__ret = ____actvcall_hmcall_guard_sysrq(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(lock_free, __actv_local_var_lock_free));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_guard_sysrq(rref_t __rref, unsigned long long __rpc_info, void *__buf, int key, int lock_free)
{
	int __ret;
	int __maybe_unused __actv_local_var_key = key;
	int __maybe_unused __actv_local_var_lock_free = lock_free;
	__ret = ____actvcapcall_hmcall_guard_sysrq(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(lock_free, __actv_local_var_lock_free));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_guard_alive(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_guard_alive(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_guard_alive(unsigned long long __rpc_info, void *__buf, pid_t pid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__ret = ____actvcall_hmcall_guard_alive(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_guard_alive(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__ret = ____actvcapcall_hmcall_guard_alive(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_iov_add_device(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_iov_add_device(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_iov_add_device(unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg)
{
	int __ret;
	struct iovmgr_ops_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcall_hmcall_iov_add_device(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_iov_add_device(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg)
{
	int __ret;
	struct iovmgr_ops_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcapcall_hmcall_iov_add_device(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_iov_attach_device(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_iov_attach_device(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_iov_attach_device(unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg)
{
	int __ret;
	struct iovmgr_ops_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcall_hmcall_iov_attach_device(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_iov_attach_device(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg)
{
	int __ret;
	struct iovmgr_ops_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcapcall_hmcall_iov_attach_device(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_iov_vspace_bind(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_iov_vspace_bind(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_iov_vspace_bind(unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg)
{
	int __ret;
	struct iovmgr_ops_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcall_hmcall_iov_vspace_bind(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_iov_vspace_bind(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg)
{
	int __ret;
	struct iovmgr_ops_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcapcall_hmcall_iov_vspace_bind(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_iov_vspace_unbind(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_iov_vspace_unbind(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_iov_vspace_unbind(unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg)
{
	int __ret;
	struct iovmgr_ops_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcall_hmcall_iov_vspace_unbind(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_iov_vspace_unbind(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct iovmgr_ops_arg arg)
{
	int __ret;
	struct iovmgr_ops_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcapcall_hmcall_iov_vspace_unbind(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_resmgr_mount(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_resmgr_mount(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_resmgr_mount(unsigned long long __rpc_info, void *__buf, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	int __ret;
	__maybe_unused char *__actv_local_var_fsbuf = fsbuf;
	size_t __maybe_unused __actv_local_var_size = size;
	struct hm_actv_buf __maybe_unused __actv_local_var_path_buf = path_buf;
	__ret = ____actvcall_hmcall_resmgr_mount(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(fsbuf, __actv_local_var_fsbuf), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size), __ARCH_ACTV_RPC_PASS_ARG(path_buf, __actv_local_var_path_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_resmgr_mount(rref_t __rref, unsigned long long __rpc_info, void *__buf, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	int __ret;
	__maybe_unused char *__actv_local_var_fsbuf = fsbuf;
	size_t __maybe_unused __actv_local_var_size = size;
	struct hm_actv_buf __maybe_unused __actv_local_var_path_buf = path_buf;
	__ret = ____actvcapcall_hmcall_resmgr_mount(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(fsbuf, __actv_local_var_fsbuf), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size), __ARCH_ACTV_RPC_PASS_ARG(path_buf, __actv_local_var_path_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_resmgr_umount(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_resmgr_umount(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_resmgr_umount(unsigned long long __rpc_info, void *__buf, struct hm_actv_buf path_buf)
{
	int __ret;
	struct hm_actv_buf __maybe_unused __actv_local_var_path_buf = path_buf;
	__ret = ____actvcall_hmcall_resmgr_umount(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(path_buf, __actv_local_var_path_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_resmgr_umount(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_actv_buf path_buf)
{
	int __ret;
	struct hm_actv_buf __maybe_unused __actv_local_var_path_buf = path_buf;
	__ret = ____actvcapcall_hmcall_resmgr_umount(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(path_buf, __actv_local_var_path_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_resmgr_create(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_resmgr_create(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_resmgr_create(unsigned long long __rpc_info, void *__buf, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	int __ret;
	__maybe_unused char *__actv_local_var_fsbuf = fsbuf;
	size_t __maybe_unused __actv_local_var_size = size;
	struct hm_actv_buf __maybe_unused __actv_local_var_path_buf = path_buf;
	__ret = ____actvcall_hmcall_resmgr_create(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(fsbuf, __actv_local_var_fsbuf), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size), __ARCH_ACTV_RPC_PASS_ARG(path_buf, __actv_local_var_path_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_resmgr_create(rref_t __rref, unsigned long long __rpc_info, void *__buf, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	int __ret;
	__maybe_unused char *__actv_local_var_fsbuf = fsbuf;
	size_t __maybe_unused __actv_local_var_size = size;
	struct hm_actv_buf __maybe_unused __actv_local_var_path_buf = path_buf;
	__ret = ____actvcapcall_hmcall_resmgr_create(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(fsbuf, __actv_local_var_fsbuf), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size), __ARCH_ACTV_RPC_PASS_ARG(path_buf, __actv_local_var_path_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_resmgr_remove(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_resmgr_remove(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_resmgr_remove(unsigned long long __rpc_info, void *__buf, struct hm_actv_buf path_buf)
{
	int __ret;
	struct hm_actv_buf __maybe_unused __actv_local_var_path_buf = path_buf;
	__ret = ____actvcall_hmcall_resmgr_remove(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(path_buf, __actv_local_var_path_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_resmgr_remove(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_actv_buf path_buf)
{
	int __ret;
	struct hm_actv_buf __maybe_unused __actv_local_var_path_buf = path_buf;
	__ret = ____actvcapcall_hmcall_resmgr_remove(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(path_buf, __actv_local_var_path_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_resmgr_read(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_resmgr_read(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_resmgr_read(unsigned long long __rpc_info, void *__buf, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	int __ret;
	__maybe_unused char *__actv_local_var_fsbuf = fsbuf;
	size_t __maybe_unused __actv_local_var_size = size;
	struct hm_actv_buf __maybe_unused __actv_local_var_path_buf = path_buf;
	__ret = ____actvcall_hmcall_resmgr_read(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(fsbuf, __actv_local_var_fsbuf), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size), __ARCH_ACTV_RPC_PASS_ARG(path_buf, __actv_local_var_path_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_resmgr_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	int __ret;
	__maybe_unused char *__actv_local_var_fsbuf = fsbuf;
	size_t __maybe_unused __actv_local_var_size = size;
	struct hm_actv_buf __maybe_unused __actv_local_var_path_buf = path_buf;
	__ret = ____actvcapcall_hmcall_resmgr_read(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(fsbuf, __actv_local_var_fsbuf), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size), __ARCH_ACTV_RPC_PASS_ARG(path_buf, __actv_local_var_path_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_resmgr_write(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_resmgr_write(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_resmgr_write(unsigned long long __rpc_info, void *__buf, const char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	int __ret;
	__maybe_unused const char *__actv_local_var_fsbuf = fsbuf;
	size_t __maybe_unused __actv_local_var_size = size;
	struct hm_actv_buf __maybe_unused __actv_local_var_path_buf = path_buf;
	__ret = ____actvcall_hmcall_resmgr_write(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(fsbuf, __actv_local_var_fsbuf), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size), __ARCH_ACTV_RPC_PASS_ARG(path_buf, __actv_local_var_path_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_resmgr_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, const char *fsbuf, size_t size, struct hm_actv_buf path_buf)
{
	int __ret;
	__maybe_unused const char *__actv_local_var_fsbuf = fsbuf;
	size_t __maybe_unused __actv_local_var_size = size;
	struct hm_actv_buf __maybe_unused __actv_local_var_path_buf = path_buf;
	__ret = ____actvcapcall_hmcall_resmgr_write(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(fsbuf, __actv_local_var_fsbuf), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size), __ARCH_ACTV_RPC_PASS_ARG(path_buf, __actv_local_var_path_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_resmgr_mem_mapping(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_resmgr_mem_mapping(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_resmgr_mem_mapping(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_resmgr_mem_mapping(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_resmgr_mem_mapping(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_resmgr_mem_mapping(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_resmgr_mem_fs_charge(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_resmgr_mem_fs_charge(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_resmgr_mem_fs_charge(unsigned long long __rpc_info, void *__buf, unsigned int memcg_id, unsigned int nr_pages)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_memcg_id = memcg_id;
	unsigned int __maybe_unused __actv_local_var_nr_pages = nr_pages;
	__ret = ____actvcall_hmcall_resmgr_mem_fs_charge(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(memcg_id, __actv_local_var_memcg_id), __ARCH_ACTV_RPC_PASS_ARG(nr_pages, __actv_local_var_nr_pages));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_resmgr_mem_fs_charge(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int memcg_id, unsigned int nr_pages)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_memcg_id = memcg_id;
	unsigned int __maybe_unused __actv_local_var_nr_pages = nr_pages;
	__ret = ____actvcapcall_hmcall_resmgr_mem_fs_charge(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(memcg_id, __actv_local_var_memcg_id), __ARCH_ACTV_RPC_PASS_ARG(nr_pages, __actv_local_var_nr_pages));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_resmgr_mem_fs_uncharge(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_resmgr_mem_fs_uncharge(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_resmgr_mem_fs_uncharge(unsigned long long __rpc_info, void *__buf, unsigned int memcg_id, unsigned int nr_pages)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_memcg_id = memcg_id;
	unsigned int __maybe_unused __actv_local_var_nr_pages = nr_pages;
	__ret = ____actvcall_hmcall_resmgr_mem_fs_uncharge(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(memcg_id, __actv_local_var_memcg_id), __ARCH_ACTV_RPC_PASS_ARG(nr_pages, __actv_local_var_nr_pages));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_resmgr_mem_fs_uncharge(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int memcg_id, unsigned int nr_pages)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_memcg_id = memcg_id;
	unsigned int __maybe_unused __actv_local_var_nr_pages = nr_pages;
	__ret = ____actvcapcall_hmcall_resmgr_mem_fs_uncharge(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(memcg_id, __actv_local_var_memcg_id), __ARCH_ACTV_RPC_PASS_ARG(nr_pages, __actv_local_var_nr_pages));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_module_grant_ctrl(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_module_grant_ctrl(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_module_grant_ctrl(unsigned long long __rpc_info, void *__buf, struct module_grant_arg arg)
{
	int __ret;
	struct module_grant_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcall_hmcall_module_grant_ctrl(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_module_grant_ctrl(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct module_grant_arg arg)
{
	int __ret;
	struct module_grant_arg __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcapcall_hmcall_module_grant_ctrl(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_entropy_read(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_entropy_read(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_entropy_read(unsigned long long __rpc_info, void *__buf, unsigned int num)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_num = num;
	__ret = ____actvcall_hmcall_entropy_read(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(num, __actv_local_var_num));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_entropy_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int num)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_num = num;
	__ret = ____actvcapcall_hmcall_entropy_read(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(num, __actv_local_var_num));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_kbox_query_device(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_kbox_query_device(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_kbox_query_device(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_kbox_query_device(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_kbox_query_device(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_kbox_query_device(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_kbox_query_region(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_kbox_query_region(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_kbox_query_region(unsigned long long __rpc_info, void *__buf, unsigned int index)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_index = index;
	__ret = ____actvcall_hmcall_kbox_query_region(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(index, __actv_local_var_index));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_kbox_query_region(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int index)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_index = index;
	__ret = ____actvcapcall_hmcall_kbox_query_region(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(index, __actv_local_var_index));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_kbox_open_region(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_kbox_open_region(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_kbox_open_region(unsigned long long __rpc_info, void *__buf, struct kbox_region_name name)
{
	int __ret;
	struct kbox_region_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcall_hmcall_kbox_open_region(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_kbox_open_region(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct kbox_region_name name)
{
	int __ret;
	struct kbox_region_name __maybe_unused __actv_local_var_name = name;
	__ret = ____actvcapcall_hmcall_kbox_open_region(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_kbox_close_region(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_kbox_close_region(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_kbox_close_region(unsigned long long __rpc_info, void *__buf, struct kbox_region_name name, unsigned long long vaddr, unsigned long long size)
{
	int __ret;
	struct kbox_region_name __maybe_unused __actv_local_var_name = name;
	unsigned long long __maybe_unused __actv_local_var_vaddr = vaddr;
	unsigned long long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_kbox_close_region(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(vaddr, __actv_local_var_vaddr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_kbox_close_region(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct kbox_region_name name, unsigned long long vaddr, unsigned long long size)
{
	int __ret;
	struct kbox_region_name __maybe_unused __actv_local_var_name = name;
	unsigned long long __maybe_unused __actv_local_var_vaddr = vaddr;
	unsigned long long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_kbox_close_region(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(vaddr, __actv_local_var_vaddr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_kbox_create_region(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_kbox_create_region(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_kbox_create_region(unsigned long long __rpc_info, void *__buf, struct kbox_region_name name, unsigned long long size)
{
	int __ret;
	struct kbox_region_name __maybe_unused __actv_local_var_name = name;
	unsigned long long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_kbox_create_region(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_kbox_create_region(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct kbox_region_name name, unsigned long long size)
{
	int __ret;
	struct kbox_region_name __maybe_unused __actv_local_var_name = name;
	unsigned long long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_kbox_create_region(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(name, __actv_local_var_name), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_kbox_delete_dynamic_regions(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_kbox_delete_dynamic_regions(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_kbox_delete_dynamic_regions(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_kbox_delete_dynamic_regions(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_kbox_delete_dynamic_regions(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_kbox_delete_dynamic_regions(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_dump_thread(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_dump_thread(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_dump_thread(unsigned long long __rpc_info, void *__buf, pid_t tid, unsigned int flags, enum dump_output_type output_type, struct bunch_ipc_attr attr)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_tid = tid;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	enum dump_output_type __maybe_unused __actv_local_var_output_type = output_type;
	struct bunch_ipc_attr __maybe_unused __actv_local_var_attr = attr;
	__ret = ____actvcall_hmcall_dump_thread(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(output_type, __actv_local_var_output_type), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_dump_thread(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t tid, unsigned int flags, enum dump_output_type output_type, struct bunch_ipc_attr attr)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_tid = tid;
	unsigned int __maybe_unused __actv_local_var_flags = flags;
	enum dump_output_type __maybe_unused __actv_local_var_output_type = output_type;
	struct bunch_ipc_attr __maybe_unused __actv_local_var_attr = attr;
	__ret = ____actvcapcall_hmcall_dump_thread(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(flags, __actv_local_var_flags), __ARCH_ACTV_RPC_PASS_ARG(output_type, __actv_local_var_output_type), __ARCH_ACTV_RPC_PASS_ARG(attr, __actv_local_var_attr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_linuxemu_install_handler(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_linuxemu_install_handler(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_linuxemu_install_handler(unsigned long long __rpc_info, void *__buf, unsigned long pc, unsigned long sp)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_pc = pc;
	unsigned long __maybe_unused __actv_local_var_sp = sp;
	__ret = ____actvcall_hmcall_linuxemu_install_handler(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pc, __actv_local_var_pc), __ARCH_ACTV_RPC_PASS_ARG(sp, __actv_local_var_sp));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_linuxemu_install_handler(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long pc, unsigned long sp)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_pc = pc;
	unsigned long __maybe_unused __actv_local_var_sp = sp;
	__ret = ____actvcapcall_hmcall_linuxemu_install_handler(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pc, __actv_local_var_pc), __ARCH_ACTV_RPC_PASS_ARG(sp, __actv_local_var_sp));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_linuxemu_set_callsite(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_linuxemu_set_callsite(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_linuxemu_set_callsite(unsigned long long __rpc_info, void *__buf, unsigned long pc, unsigned long sp)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_pc = pc;
	unsigned long __maybe_unused __actv_local_var_sp = sp;
	__ret = ____actvcall_hmcall_linuxemu_set_callsite(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pc, __actv_local_var_pc), __ARCH_ACTV_RPC_PASS_ARG(sp, __actv_local_var_sp));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_linuxemu_set_callsite(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long pc, unsigned long sp)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_pc = pc;
	unsigned long __maybe_unused __actv_local_var_sp = sp;
	__ret = ____actvcapcall_hmcall_linuxemu_set_callsite(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pc, __actv_local_var_pc), __ARCH_ACTV_RPC_PASS_ARG(sp, __actv_local_var_sp));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_livepatch_register_target(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_livepatch_register_target(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_livepatch_register_target(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_livepatch_register_target(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_livepatch_register_target(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_livepatch_register_target(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_livepatch_unregister_target(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_livepatch_unregister_target(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_livepatch_unregister_target(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_livepatch_unregister_target(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_livepatch_unregister_target(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_livepatch_unregister_target(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_livepatch_load(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_livepatch_load(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_livepatch_load(unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch, unsigned long long content, unsigned long long content_sz, unsigned long long signature, unsigned long long signature_sz)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct livepatch_string __maybe_unused __actv_local_var_patch = patch;
	unsigned long long __maybe_unused __actv_local_var_content = content;
	unsigned long long __maybe_unused __actv_local_var_content_sz = content_sz;
	unsigned long long __maybe_unused __actv_local_var_signature = signature;
	unsigned long long __maybe_unused __actv_local_var_signature_sz = signature_sz;
	__ret = ____actvcall_hmcall_livepatch_load(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(patch, __actv_local_var_patch), __ARCH_ACTV_RPC_PASS_ARG(content, __actv_local_var_content), __ARCH_ACTV_RPC_PASS_ARG(content_sz, __actv_local_var_content_sz), __ARCH_ACTV_RPC_PASS_ARG(signature, __actv_local_var_signature), __ARCH_ACTV_RPC_PASS_ARG(signature_sz, __actv_local_var_signature_sz));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_livepatch_load(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch, unsigned long long content, unsigned long long content_sz, unsigned long long signature, unsigned long long signature_sz)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct livepatch_string __maybe_unused __actv_local_var_patch = patch;
	unsigned long long __maybe_unused __actv_local_var_content = content;
	unsigned long long __maybe_unused __actv_local_var_content_sz = content_sz;
	unsigned long long __maybe_unused __actv_local_var_signature = signature;
	unsigned long long __maybe_unused __actv_local_var_signature_sz = signature_sz;
	__ret = ____actvcapcall_hmcall_livepatch_load(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(patch, __actv_local_var_patch), __ARCH_ACTV_RPC_PASS_ARG(content, __actv_local_var_content), __ARCH_ACTV_RPC_PASS_ARG(content_sz, __actv_local_var_content_sz), __ARCH_ACTV_RPC_PASS_ARG(signature, __actv_local_var_signature), __ARCH_ACTV_RPC_PASS_ARG(signature_sz, __actv_local_var_signature_sz));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_livepatch_unload(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_livepatch_unload(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_livepatch_unload(unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct livepatch_string __maybe_unused __actv_local_var_patch = patch;
	__ret = ____actvcall_hmcall_livepatch_unload(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(patch, __actv_local_var_patch));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_livepatch_unload(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct livepatch_string __maybe_unused __actv_local_var_patch = patch;
	__ret = ____actvcapcall_hmcall_livepatch_unload(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(patch, __actv_local_var_patch));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_livepatch_enable(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_livepatch_enable(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_livepatch_enable(unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct livepatch_string __maybe_unused __actv_local_var_patch = patch;
	__ret = ____actvcall_hmcall_livepatch_enable(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(patch, __actv_local_var_patch));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_livepatch_enable(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct livepatch_string __maybe_unused __actv_local_var_patch = patch;
	__ret = ____actvcapcall_hmcall_livepatch_enable(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(patch, __actv_local_var_patch));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_livepatch_disable(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_livepatch_disable(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_livepatch_disable(unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct livepatch_string __maybe_unused __actv_local_var_patch = patch;
	__ret = ____actvcall_hmcall_livepatch_disable(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(patch, __actv_local_var_patch));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_livepatch_disable(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct livepatch_string __maybe_unused __actv_local_var_patch = patch;
	__ret = ____actvcapcall_hmcall_livepatch_disable(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(patch, __actv_local_var_patch));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_livepatch_list(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_livepatch_list(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_livepatch_list(unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct livepatch_string __maybe_unused __actv_local_var_patch = patch;
	__ret = ____actvcall_hmcall_livepatch_list(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(patch, __actv_local_var_patch));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_livepatch_list(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct livepatch_string __maybe_unused __actv_local_var_patch = patch;
	__ret = ____actvcapcall_hmcall_livepatch_list(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(patch, __actv_local_var_patch));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_livepatch_reserved(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_livepatch_reserved(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_livepatch_reserved(unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct livepatch_string __maybe_unused __actv_local_var_patch = patch;
	__ret = ____actvcall_hmcall_livepatch_reserved(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(patch, __actv_local_var_patch));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_livepatch_reserved(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, struct livepatch_string patch)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	struct livepatch_string __maybe_unused __actv_local_var_patch = patch;
	__ret = ____actvcapcall_hmcall_livepatch_reserved(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(patch, __actv_local_var_patch));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_perf_create_session(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_perf_create_session(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_perf_create_session(unsigned long long __rpc_info, void *__buf, unsigned int buffer_page_nr)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_buffer_page_nr = buffer_page_nr;
	__ret = ____actvcall_hmcall_perf_create_session(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(buffer_page_nr, __actv_local_var_buffer_page_nr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_perf_create_session(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int buffer_page_nr)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_buffer_page_nr = buffer_page_nr;
	__ret = ____actvcapcall_hmcall_perf_create_session(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(buffer_page_nr, __actv_local_var_buffer_page_nr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_perf_config_event(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_perf_config_event(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_perf_config_event(unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long size)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_perf_config_event(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_perf_config_event(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr, unsigned long size)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_perf_config_event(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_perf_start_session(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_perf_start_session(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_perf_start_session(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_perf_start_session(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_perf_start_session(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_perf_start_session(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_perf_stop_session(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_perf_stop_session(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_perf_stop_session(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_perf_stop_session(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_perf_stop_session(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_perf_stop_session(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_perf_release_session(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_perf_release_session(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_perf_release_session(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_perf_release_session(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_perf_release_session(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_perf_release_session(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_perf_read_data(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_perf_read_data(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_perf_read_data(unsigned long long __rpc_info, void *__buf, void *dst, unsigned int size)
{
	int __ret;
	__maybe_unused void *__actv_local_var_dst = dst;
	unsigned int __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_perf_read_data(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(dst, __actv_local_var_dst), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_perf_read_data(rref_t __rref, unsigned long long __rpc_info, void *__buf, void *dst, unsigned int size)
{
	int __ret;
	__maybe_unused void *__actv_local_var_dst = dst;
	unsigned int __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_perf_read_data(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(dst, __actv_local_var_dst), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_hmspif_ksus_user_start_session(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_hmspif_ksus_user_start_session(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_hmspif_ksus_user_start_session(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_hmspif_ksus_user_start_session(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_hmspif_ksus_user_start_session(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_hmspif_ksus_user_start_session(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_hmspif_ksus_user_create_region(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_hmspif_ksus_user_create_region(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_hmspif_ksus_user_create_region(unsigned long long __rpc_info, void *__buf, unsigned int chunkid, unsigned int prot, unsigned int page_order, bool percpu)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_chunkid = chunkid;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	unsigned int __maybe_unused __actv_local_var_page_order = page_order;
	bool __maybe_unused __actv_local_var_percpu = percpu;
	__ret = ____actvcall_hmcall_hmspif_ksus_user_create_region(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(chunkid, __actv_local_var_chunkid), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(page_order, __actv_local_var_page_order), __ARCH_ACTV_RPC_PASS_ARG(percpu, __actv_local_var_percpu));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_hmspif_ksus_user_create_region(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned int chunkid, unsigned int prot, unsigned int page_order, bool percpu)
{
	int __ret;
	unsigned int __maybe_unused __actv_local_var_chunkid = chunkid;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	unsigned int __maybe_unused __actv_local_var_page_order = page_order;
	bool __maybe_unused __actv_local_var_percpu = percpu;
	__ret = ____actvcapcall_hmcall_hmspif_ksus_user_create_region(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(chunkid, __actv_local_var_chunkid), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(page_order, __actv_local_var_page_order), __ARCH_ACTV_RPC_PASS_ARG(percpu, __actv_local_var_percpu));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_hmspif_ksus_user_attach_process(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_hmspif_ksus_user_attach_process(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_hmspif_ksus_user_attach_process(unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int chunkid, unsigned int prot, unsigned int inherit)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_chunkid = chunkid;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	unsigned int __maybe_unused __actv_local_var_inherit = inherit;
	__ret = ____actvcall_hmcall_hmspif_ksus_user_attach_process(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(chunkid, __actv_local_var_chunkid), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(inherit, __actv_local_var_inherit));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_hmspif_ksus_user_attach_process(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, unsigned int chunkid, unsigned int prot, unsigned int inherit)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_chunkid = chunkid;
	unsigned int __maybe_unused __actv_local_var_prot = prot;
	unsigned int __maybe_unused __actv_local_var_inherit = inherit;
	__ret = ____actvcapcall_hmcall_hmspif_ksus_user_attach_process(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(chunkid, __actv_local_var_chunkid), __ARCH_ACTV_RPC_PASS_ARG(prot, __actv_local_var_prot), __ARCH_ACTV_RPC_PASS_ARG(inherit, __actv_local_var_inherit));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_hmspif_ksus_user_finish_session(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_hmspif_ksus_user_finish_session(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_hmspif_ksus_user_finish_session(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_hmspif_ksus_user_finish_session(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_hmspif_ksus_user_finish_session(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_hmspif_ksus_user_finish_session(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_hmspif_paju_user_cmd(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_hmspif_paju_user_cmd(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_hmspif_paju_user_cmd(unsigned long long __rpc_info, void *__buf, pid_t pid, const char *dso_name, unsigned int dso_namesize, const char *section_name, unsigned int seciton_namesize, unsigned int paju_index, unsigned int cmd, unsigned int *status)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__maybe_unused const char *__actv_local_var_dso_name = dso_name;
	unsigned int __maybe_unused __actv_local_var_dso_namesize = dso_namesize;
	__maybe_unused const char *__actv_local_var_section_name = section_name;
	unsigned int __maybe_unused __actv_local_var_seciton_namesize = seciton_namesize;
	unsigned int __maybe_unused __actv_local_var_paju_index = paju_index;
	unsigned int __maybe_unused __actv_local_var_cmd = cmd;
	__maybe_unused unsigned int *__actv_local_var_status = status;
	__ret = ____actvcall_hmcall_hmspif_paju_user_cmd(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(dso_name, __actv_local_var_dso_name), __ARCH_ACTV_RPC_PASS_ARG(dso_namesize, __actv_local_var_dso_namesize), __ARCH_ACTV_RPC_PASS_ARG(section_name, __actv_local_var_section_name), __ARCH_ACTV_RPC_PASS_ARG(seciton_namesize, __actv_local_var_seciton_namesize), __ARCH_ACTV_RPC_PASS_ARG(paju_index, __actv_local_var_paju_index), __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(status, __actv_local_var_status));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_hmspif_paju_user_cmd(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid, const char *dso_name, unsigned int dso_namesize, const char *section_name, unsigned int seciton_namesize, unsigned int paju_index, unsigned int cmd, unsigned int *status)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__maybe_unused const char *__actv_local_var_dso_name = dso_name;
	unsigned int __maybe_unused __actv_local_var_dso_namesize = dso_namesize;
	__maybe_unused const char *__actv_local_var_section_name = section_name;
	unsigned int __maybe_unused __actv_local_var_seciton_namesize = seciton_namesize;
	unsigned int __maybe_unused __actv_local_var_paju_index = paju_index;
	unsigned int __maybe_unused __actv_local_var_cmd = cmd;
	__maybe_unused unsigned int *__actv_local_var_status = status;
	__ret = ____actvcapcall_hmcall_hmspif_paju_user_cmd(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(dso_name, __actv_local_var_dso_name), __ARCH_ACTV_RPC_PASS_ARG(dso_namesize, __actv_local_var_dso_namesize), __ARCH_ACTV_RPC_PASS_ARG(section_name, __actv_local_var_section_name), __ARCH_ACTV_RPC_PASS_ARG(seciton_namesize, __actv_local_var_seciton_namesize), __ARCH_ACTV_RPC_PASS_ARG(paju_index, __actv_local_var_paju_index), __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(status, __actv_local_var_status));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_dynlog_query_by_tid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_dynlog_query_by_tid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_dynlog_query_by_tid(unsigned long long __rpc_info, void *__buf, pid_t tid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcall_hmcall_dynlog_query_by_tid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_dynlog_query_by_tid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t tid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_tid = tid;
	__ret = ____actvcapcall_hmcall_dynlog_query_by_tid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_dynlog_read_by_tid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_dynlog_read_by_tid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_dynlog_read_by_tid(unsigned long long __rpc_info, void *__buf, pid_t tid, unsigned long long rentry, int num)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_tid = tid;
	unsigned long long __maybe_unused __actv_local_var_rentry = rentry;
	int __maybe_unused __actv_local_var_num = num;
	__ret = ____actvcall_hmcall_dynlog_read_by_tid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(rentry, __actv_local_var_rentry), __ARCH_ACTV_RPC_PASS_ARG(num, __actv_local_var_num));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_dynlog_read_by_tid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t tid, unsigned long long rentry, int num)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_tid = tid;
	unsigned long long __maybe_unused __actv_local_var_rentry = rentry;
	int __maybe_unused __actv_local_var_num = num;
	__ret = ____actvcapcall_hmcall_dynlog_read_by_tid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(rentry, __actv_local_var_rentry), __ARCH_ACTV_RPC_PASS_ARG(num, __actv_local_var_num));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_dynlog_update_by_tid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_dynlog_update_by_tid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_dynlog_update_by_tid(unsigned long long __rpc_info, void *__buf, pid_t tid, int index, int freq)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_index = index;
	int __maybe_unused __actv_local_var_freq = freq;
	__ret = ____actvcall_hmcall_dynlog_update_by_tid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(index, __actv_local_var_index), __ARCH_ACTV_RPC_PASS_ARG(freq, __actv_local_var_freq));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_dynlog_update_by_tid(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t tid, int index, int freq)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_tid = tid;
	int __maybe_unused __actv_local_var_index = index;
	int __maybe_unused __actv_local_var_freq = freq;
	__ret = ____actvcapcall_hmcall_dynlog_update_by_tid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(index, __actv_local_var_index), __ARCH_ACTV_RPC_PASS_ARG(freq, __actv_local_var_freq));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_dynlog_query_by_lspace(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_dynlog_query_by_lspace(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_dynlog_query_by_lspace(unsigned long long __rpc_info, void *__buf, struct dynlog_logspace lspace)
{
	int __ret;
	struct dynlog_logspace __maybe_unused __actv_local_var_lspace = lspace;
	__ret = ____actvcall_hmcall_dynlog_query_by_lspace(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(lspace, __actv_local_var_lspace));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_dynlog_query_by_lspace(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct dynlog_logspace lspace)
{
	int __ret;
	struct dynlog_logspace __maybe_unused __actv_local_var_lspace = lspace;
	__ret = ____actvcapcall_hmcall_dynlog_query_by_lspace(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(lspace, __actv_local_var_lspace));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_dynlog_read_by_lspace(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_dynlog_read_by_lspace(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_dynlog_read_by_lspace(unsigned long long __rpc_info, void *__buf, struct dynlog_logspace lspace, unsigned long long rentry, int num)
{
	int __ret;
	struct dynlog_logspace __maybe_unused __actv_local_var_lspace = lspace;
	unsigned long long __maybe_unused __actv_local_var_rentry = rentry;
	int __maybe_unused __actv_local_var_num = num;
	__ret = ____actvcall_hmcall_dynlog_read_by_lspace(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(lspace, __actv_local_var_lspace), __ARCH_ACTV_RPC_PASS_ARG(rentry, __actv_local_var_rentry), __ARCH_ACTV_RPC_PASS_ARG(num, __actv_local_var_num));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_dynlog_read_by_lspace(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct dynlog_logspace lspace, unsigned long long rentry, int num)
{
	int __ret;
	struct dynlog_logspace __maybe_unused __actv_local_var_lspace = lspace;
	unsigned long long __maybe_unused __actv_local_var_rentry = rentry;
	int __maybe_unused __actv_local_var_num = num;
	__ret = ____actvcapcall_hmcall_dynlog_read_by_lspace(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(lspace, __actv_local_var_lspace), __ARCH_ACTV_RPC_PASS_ARG(rentry, __actv_local_var_rentry), __ARCH_ACTV_RPC_PASS_ARG(num, __actv_local_var_num));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_dynlog_update_by_lspace(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_dynlog_update_by_lspace(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_dynlog_update_by_lspace(unsigned long long __rpc_info, void *__buf, struct dynlog_logspace lspace, int index, int freq)
{
	int __ret;
	struct dynlog_logspace __maybe_unused __actv_local_var_lspace = lspace;
	int __maybe_unused __actv_local_var_index = index;
	int __maybe_unused __actv_local_var_freq = freq;
	__ret = ____actvcall_hmcall_dynlog_update_by_lspace(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(lspace, __actv_local_var_lspace), __ARCH_ACTV_RPC_PASS_ARG(index, __actv_local_var_index), __ARCH_ACTV_RPC_PASS_ARG(freq, __actv_local_var_freq));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_dynlog_update_by_lspace(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct dynlog_logspace lspace, int index, int freq)
{
	int __ret;
	struct dynlog_logspace __maybe_unused __actv_local_var_lspace = lspace;
	int __maybe_unused __actv_local_var_index = index;
	int __maybe_unused __actv_local_var_freq = freq;
	__ret = ____actvcapcall_hmcall_dynlog_update_by_lspace(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(lspace, __actv_local_var_lspace), __ARCH_ACTV_RPC_PASS_ARG(index, __actv_local_var_index), __ARCH_ACTV_RPC_PASS_ARG(freq, __actv_local_var_freq));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysfs_read(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysfs_read(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysfs_read(unsigned long long __rpc_info, void *__buf, struct hm_actv_buf actv_buf)
{
	int __ret;
	struct hm_actv_buf __maybe_unused __actv_local_var_actv_buf = actv_buf;
	__ret = ____actvcall_hmcall_sysfs_read(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(actv_buf, __actv_local_var_actv_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysfs_read(rref_t __rref, unsigned long long __rpc_info, void *__buf, struct hm_actv_buf actv_buf)
{
	int __ret;
	struct hm_actv_buf __maybe_unused __actv_local_var_actv_buf = actv_buf;
	__ret = ____actvcapcall_hmcall_sysfs_read(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(actv_buf, __actv_local_var_actv_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_sysfs_write(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_sysfs_write(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_sysfs_write(unsigned long long __rpc_info, void *__buf, int tagid, unsigned long long ctx, unsigned long long pos, struct hm_actv_buf actv_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_tagid = tagid;
	unsigned long long __maybe_unused __actv_local_var_ctx = ctx;
	unsigned long long __maybe_unused __actv_local_var_pos = pos;
	struct hm_actv_buf __maybe_unused __actv_local_var_actv_buf = actv_buf;
	__ret = ____actvcall_hmcall_sysfs_write(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tagid, __actv_local_var_tagid), __ARCH_ACTV_RPC_PASS_ARG(ctx, __actv_local_var_ctx), __ARCH_ACTV_RPC_PASS_ARG(pos, __actv_local_var_pos), __ARCH_ACTV_RPC_PASS_ARG(actv_buf, __actv_local_var_actv_buf));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_sysfs_write(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tagid, unsigned long long ctx, unsigned long long pos, struct hm_actv_buf actv_buf)
{
	int __ret;
	int __maybe_unused __actv_local_var_tagid = tagid;
	unsigned long long __maybe_unused __actv_local_var_ctx = ctx;
	unsigned long long __maybe_unused __actv_local_var_pos = pos;
	struct hm_actv_buf __maybe_unused __actv_local_var_actv_buf = actv_buf;
	__ret = ____actvcapcall_hmcall_sysfs_write(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tagid, __actv_local_var_tagid), __ARCH_ACTV_RPC_PASS_ARG(ctx, __actv_local_var_ctx), __ARCH_ACTV_RPC_PASS_ARG(pos, __actv_local_var_pos), __ARCH_ACTV_RPC_PASS_ARG(actv_buf, __actv_local_var_actv_buf));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_ftrace_modify_code(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_ftrace_modify_code(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ftrace_modify_code(unsigned long long __rpc_info, void *__buf, uintptr_t addr, unsigned int insn)
{
	int __ret;
	uintptr_t __maybe_unused __actv_local_var_addr = addr;
	unsigned int __maybe_unused __actv_local_var_insn = insn;
	__ret = ____actvcall_hmcall_ftrace_modify_code(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(insn, __actv_local_var_insn));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ftrace_modify_code(rref_t __rref, unsigned long long __rpc_info, void *__buf, uintptr_t addr, unsigned int insn)
{
	int __ret;
	uintptr_t __maybe_unused __actv_local_var_addr = addr;
	unsigned int __maybe_unused __actv_local_var_insn = insn;
	__ret = ____actvcapcall_hmcall_ftrace_modify_code(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr), __ARCH_ACTV_RPC_PASS_ARG(insn, __actv_local_var_insn));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_hmtrace_alloc_eid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_hmtrace_alloc_eid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_hmtrace_alloc_eid(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_hmtrace_alloc_eid(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_hmtrace_alloc_eid(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_hmtrace_alloc_eid(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_hmtrace_free_eid(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_hmtrace_free_eid(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_hmtrace_free_eid(unsigned long long __rpc_info, void *__buf, int eid)
{
	int __ret;
	int __maybe_unused __actv_local_var_eid = eid;
	__ret = ____actvcall_hmcall_hmtrace_free_eid(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(eid, __actv_local_var_eid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_hmtrace_free_eid(rref_t __rref, unsigned long long __rpc_info, void *__buf, int eid)
{
	int __ret;
	int __maybe_unused __actv_local_var_eid = eid;
	__ret = ____actvcapcall_hmcall_hmtrace_free_eid(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(eid, __actv_local_var_eid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_inject_fault(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_inject_fault(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_inject_fault(unsigned long long __rpc_info, void *__buf, int type, int sub_type, const void *args, unsigned int length)
{
	int __ret;
	int __maybe_unused __actv_local_var_type = type;
	int __maybe_unused __actv_local_var_sub_type = sub_type;
	__maybe_unused const void *__actv_local_var_args = args;
	unsigned int __maybe_unused __actv_local_var_length = length;
	__ret = ____actvcall_hmcall_inject_fault(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type), __ARCH_ACTV_RPC_PASS_ARG(sub_type, __actv_local_var_sub_type), __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_inject_fault(rref_t __rref, unsigned long long __rpc_info, void *__buf, int type, int sub_type, const void *args, unsigned int length)
{
	int __ret;
	int __maybe_unused __actv_local_var_type = type;
	int __maybe_unused __actv_local_var_sub_type = sub_type;
	__maybe_unused const void *__actv_local_var_args = args;
	unsigned int __maybe_unused __actv_local_var_length = length;
	__ret = ____actvcapcall_hmcall_inject_fault(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type), __ARCH_ACTV_RPC_PASS_ARG(sub_type, __actv_local_var_sub_type), __ARCH_ACTV_RPC_PASS_ARG(args, __actv_local_var_args), __ARCH_ACTV_RPC_PASS_ARG(length, __actv_local_var_length));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_proc_capget(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_proc_capget(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_capget(unsigned long long __rpc_info, void *__buf, int tid, unsigned int version)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	unsigned int __maybe_unused __actv_local_var_version = version;
	__ret = ____actvcall_hmcall_proc_capget(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(version, __actv_local_var_version));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_capget(rref_t __rref, unsigned long long __rpc_info, void *__buf, int tid, unsigned int version)
{
	int __ret;
	int __maybe_unused __actv_local_var_tid = tid;
	unsigned int __maybe_unused __actv_local_var_version = version;
	__ret = ____actvcapcall_hmcall_proc_capget(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(tid, __actv_local_var_tid), __ARCH_ACTV_RPC_PASS_ARG(version, __actv_local_var_version));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_capset(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_capset(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_capset(unsigned long long __rpc_info, void *__buf, int pid, unsigned int version, unsigned long long effective, unsigned long long permitted, unsigned long long inheritable)
{
	int __ret;
	int __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_version = version;
	unsigned long long __maybe_unused __actv_local_var_effective = effective;
	unsigned long long __maybe_unused __actv_local_var_permitted = permitted;
	unsigned long long __maybe_unused __actv_local_var_inheritable = inheritable;
	__ret = ____actvcall_hmcall_proc_capset(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(version, __actv_local_var_version), __ARCH_ACTV_RPC_PASS_ARG(effective, __actv_local_var_effective), __ARCH_ACTV_RPC_PASS_ARG(permitted, __actv_local_var_permitted), __ARCH_ACTV_RPC_PASS_ARG(inheritable, __actv_local_var_inheritable));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_capset(rref_t __rref, unsigned long long __rpc_info, void *__buf, int pid, unsigned int version, unsigned long long effective, unsigned long long permitted, unsigned long long inheritable)
{
	int __ret;
	int __maybe_unused __actv_local_var_pid = pid;
	unsigned int __maybe_unused __actv_local_var_version = version;
	unsigned long long __maybe_unused __actv_local_var_effective = effective;
	unsigned long long __maybe_unused __actv_local_var_permitted = permitted;
	unsigned long long __maybe_unused __actv_local_var_inheritable = inheritable;
	__ret = ____actvcapcall_hmcall_proc_capset(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid), __ARCH_ACTV_RPC_PASS_ARG(version, __actv_local_var_version), __ARCH_ACTV_RPC_PASS_ARG(effective, __actv_local_var_effective), __ARCH_ACTV_RPC_PASS_ARG(permitted, __actv_local_var_permitted), __ARCH_ACTV_RPC_PASS_ARG(inheritable, __actv_local_var_inheritable));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_cap_bset_drop(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_cap_bset_drop(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_cap_bset_drop(unsigned long long __rpc_info, void *__buf, unsigned long cap)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_cap = cap;
	__ret = ____actvcall_hmcall_proc_cap_bset_drop(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cap, __actv_local_var_cap));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_cap_bset_drop(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long cap)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_cap = cap;
	__ret = ____actvcapcall_hmcall_proc_cap_bset_drop(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cap, __actv_local_var_cap));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_cap_ambient_clear(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_cap_ambient_clear(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_cap_ambient_clear(unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcall_hmcall_proc_cap_ambient_clear(__rpc_info, __buf);
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_cap_ambient_clear(rref_t __rref, unsigned long long __rpc_info, void *__buf)
{
	int __ret;
	__ret = ____actvcapcall_hmcall_proc_cap_ambient_clear(__rref, __rpc_info, __buf);
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_cap_ambient_add(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_cap_ambient_add(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_cap_ambient_add(unsigned long long __rpc_info, void *__buf, unsigned long cap)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_cap = cap;
	__ret = ____actvcall_hmcall_proc_cap_ambient_add(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cap, __actv_local_var_cap));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_cap_ambient_add(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long cap)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_cap = cap;
	__ret = ____actvcapcall_hmcall_proc_cap_ambient_add(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cap, __actv_local_var_cap));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_cap_ambient_cut(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_cap_ambient_cut(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_cap_ambient_cut(unsigned long long __rpc_info, void *__buf, unsigned long cap)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_cap = cap;
	__ret = ____actvcall_hmcall_proc_cap_ambient_cut(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cap, __actv_local_var_cap));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_cap_ambient_cut(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long cap)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_cap = cap;
	__ret = ____actvcapcall_hmcall_proc_cap_ambient_cut(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(cap, __actv_local_var_cap));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_cap_sbits(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_cap_sbits(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_cap_sbits(unsigned long long __rpc_info, void *__buf, unsigned long bit)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_bit = bit;
	__ret = ____actvcall_hmcall_proc_cap_sbits(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(bit, __actv_local_var_bit));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_cap_sbits(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long bit)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_bit = bit;
	__ret = ____actvcapcall_hmcall_proc_cap_sbits(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(bit, __actv_local_var_bit));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_proc_cap_keep(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_proc_cap_keep(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_proc_cap_keep(unsigned long long __rpc_info, void *__buf, unsigned long bit)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_bit = bit;
	__ret = ____actvcall_hmcall_proc_cap_keep(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(bit, __actv_local_var_bit));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_proc_cap_keep(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long bit)
{
	int __ret;
	unsigned long __maybe_unused __actv_local_var_bit = bit;
	__ret = ____actvcapcall_hmcall_proc_cap_keep(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(bit, __actv_local_var_bit));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_ipc_shmget(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_ipc_shmget(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ipc_shmget(unsigned long long __rpc_info, void *__buf, int key, unsigned long size, int shmflg)
{
	int __ret;
	int __maybe_unused __actv_local_var_key = key;
	unsigned long __maybe_unused __actv_local_var_size = size;
	int __maybe_unused __actv_local_var_shmflg = shmflg;
	__ret = ____actvcall_hmcall_ipc_shmget(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size), __ARCH_ACTV_RPC_PASS_ARG(shmflg, __actv_local_var_shmflg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ipc_shmget(rref_t __rref, unsigned long long __rpc_info, void *__buf, int key, unsigned long size, int shmflg)
{
	int __ret;
	int __maybe_unused __actv_local_var_key = key;
	unsigned long __maybe_unused __actv_local_var_size = size;
	int __maybe_unused __actv_local_var_shmflg = shmflg;
	__ret = ____actvcapcall_hmcall_ipc_shmget(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size), __ARCH_ACTV_RPC_PASS_ARG(shmflg, __actv_local_var_shmflg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_ipc_shmat(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_ipc_shmat(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ipc_shmat(unsigned long long __rpc_info, void *__buf, int shmid, const void *shmaddr, int shmflg)
{
	int __ret;
	int __maybe_unused __actv_local_var_shmid = shmid;
	__maybe_unused const void *__actv_local_var_shmaddr = shmaddr;
	int __maybe_unused __actv_local_var_shmflg = shmflg;
	__ret = ____actvcall_hmcall_ipc_shmat(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shmid, __actv_local_var_shmid), __ARCH_ACTV_RPC_PASS_ARG(shmaddr, __actv_local_var_shmaddr), __ARCH_ACTV_RPC_PASS_ARG(shmflg, __actv_local_var_shmflg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ipc_shmat(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shmid, const void *shmaddr, int shmflg)
{
	int __ret;
	int __maybe_unused __actv_local_var_shmid = shmid;
	__maybe_unused const void *__actv_local_var_shmaddr = shmaddr;
	int __maybe_unused __actv_local_var_shmflg = shmflg;
	__ret = ____actvcapcall_hmcall_ipc_shmat(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shmid, __actv_local_var_shmid), __ARCH_ACTV_RPC_PASS_ARG(shmaddr, __actv_local_var_shmaddr), __ARCH_ACTV_RPC_PASS_ARG(shmflg, __actv_local_var_shmflg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_ipc_shmdt(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_ipc_shmdt(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ipc_shmdt(unsigned long long __rpc_info, void *__buf, const void *addr)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	__ret = ____actvcall_hmcall_ipc_shmdt(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ipc_shmdt(rref_t __rref, unsigned long long __rpc_info, void *__buf, const void *addr)
{
	int __ret;
	__maybe_unused const void *__actv_local_var_addr = addr;
	__ret = ____actvcapcall_hmcall_ipc_shmdt(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(addr, __actv_local_var_addr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_ipc_shmctl(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_ipc_shmctl(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ipc_shmctl(unsigned long long __rpc_info, void *__buf, int shmid, int cmd, void *ds_ptr, unsigned long len)
{
	int __ret;
	int __maybe_unused __actv_local_var_shmid = shmid;
	int __maybe_unused __actv_local_var_cmd = cmd;
	__maybe_unused void *__actv_local_var_ds_ptr = ds_ptr;
	unsigned long __maybe_unused __actv_local_var_len = len;
	__ret = ____actvcall_hmcall_ipc_shmctl(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shmid, __actv_local_var_shmid), __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(ds_ptr, __actv_local_var_ds_ptr), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ipc_shmctl(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shmid, int cmd, void *ds_ptr, unsigned long len)
{
	int __ret;
	int __maybe_unused __actv_local_var_shmid = shmid;
	int __maybe_unused __actv_local_var_cmd = cmd;
	__maybe_unused void *__actv_local_var_ds_ptr = ds_ptr;
	unsigned long __maybe_unused __actv_local_var_len = len;
	__ret = ____actvcapcall_hmcall_ipc_shmctl(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shmid, __actv_local_var_shmid), __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(ds_ptr, __actv_local_var_ds_ptr), __ARCH_ACTV_RPC_PASS_ARG(len, __actv_local_var_len));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_ipc_shmctl_get(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_ipc_shmctl_get(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ipc_shmctl_get(unsigned long long __rpc_info, void *__buf, int shmid, int cmd, void *recv_addr, unsigned long size)
{
	int __ret;
	int __maybe_unused __actv_local_var_shmid = shmid;
	int __maybe_unused __actv_local_var_cmd = cmd;
	__maybe_unused void *__actv_local_var_recv_addr = recv_addr;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_ipc_shmctl_get(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shmid, __actv_local_var_shmid), __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(recv_addr, __actv_local_var_recv_addr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ipc_shmctl_get(rref_t __rref, unsigned long long __rpc_info, void *__buf, int shmid, int cmd, void *recv_addr, unsigned long size)
{
	int __ret;
	int __maybe_unused __actv_local_var_shmid = shmid;
	int __maybe_unused __actv_local_var_cmd = cmd;
	__maybe_unused void *__actv_local_var_recv_addr = recv_addr;
	unsigned long __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_ipc_shmctl_get(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(shmid, __actv_local_var_shmid), __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(recv_addr, __actv_local_var_recv_addr), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_ipc_msgget(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_ipc_msgget(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ipc_msgget(unsigned long long __rpc_info, void *__buf, int key, int msgflg)
{
	int __ret;
	int __maybe_unused __actv_local_var_key = key;
	int __maybe_unused __actv_local_var_msgflg = msgflg;
	__ret = ____actvcall_hmcall_ipc_msgget(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(msgflg, __actv_local_var_msgflg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ipc_msgget(rref_t __rref, unsigned long long __rpc_info, void *__buf, int key, int msgflg)
{
	int __ret;
	int __maybe_unused __actv_local_var_key = key;
	int __maybe_unused __actv_local_var_msgflg = msgflg;
	__ret = ____actvcapcall_hmcall_ipc_msgget(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(msgflg, __actv_local_var_msgflg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_ipc_msgsnd(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_ipc_msgsnd(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ipc_msgsnd(unsigned long long __rpc_info, void *__buf, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg)
{
	int __ret;
	int __maybe_unused __actv_local_var_msqid = msqid;
	unsigned long __maybe_unused __actv_local_var_msg = msg;
	unsigned long __maybe_unused __actv_local_var_msgsz = msgsz;
	long __maybe_unused __actv_local_var_msgtyp = msgtyp;
	int __maybe_unused __actv_local_var_msgflg = msgflg;
	__ret = ____actvcall_hmcall_ipc_msgsnd(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(msqid, __actv_local_var_msqid), __ARCH_ACTV_RPC_PASS_ARG(msg, __actv_local_var_msg), __ARCH_ACTV_RPC_PASS_ARG(msgsz, __actv_local_var_msgsz), __ARCH_ACTV_RPC_PASS_ARG(msgtyp, __actv_local_var_msgtyp), __ARCH_ACTV_RPC_PASS_ARG(msgflg, __actv_local_var_msgflg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ipc_msgsnd(rref_t __rref, unsigned long long __rpc_info, void *__buf, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg)
{
	int __ret;
	int __maybe_unused __actv_local_var_msqid = msqid;
	unsigned long __maybe_unused __actv_local_var_msg = msg;
	unsigned long __maybe_unused __actv_local_var_msgsz = msgsz;
	long __maybe_unused __actv_local_var_msgtyp = msgtyp;
	int __maybe_unused __actv_local_var_msgflg = msgflg;
	__ret = ____actvcapcall_hmcall_ipc_msgsnd(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(msqid, __actv_local_var_msqid), __ARCH_ACTV_RPC_PASS_ARG(msg, __actv_local_var_msg), __ARCH_ACTV_RPC_PASS_ARG(msgsz, __actv_local_var_msgsz), __ARCH_ACTV_RPC_PASS_ARG(msgtyp, __actv_local_var_msgtyp), __ARCH_ACTV_RPC_PASS_ARG(msgflg, __actv_local_var_msgflg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_ipc_msgrcv(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_ipc_msgrcv(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ipc_msgrcv(unsigned long long __rpc_info, void *__buf, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg)
{
	int __ret;
	int __maybe_unused __actv_local_var_msqid = msqid;
	unsigned long __maybe_unused __actv_local_var_msg = msg;
	unsigned long __maybe_unused __actv_local_var_msgsz = msgsz;
	long __maybe_unused __actv_local_var_msgtyp = msgtyp;
	int __maybe_unused __actv_local_var_msgflg = msgflg;
	__ret = ____actvcall_hmcall_ipc_msgrcv(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(msqid, __actv_local_var_msqid), __ARCH_ACTV_RPC_PASS_ARG(msg, __actv_local_var_msg), __ARCH_ACTV_RPC_PASS_ARG(msgsz, __actv_local_var_msgsz), __ARCH_ACTV_RPC_PASS_ARG(msgtyp, __actv_local_var_msgtyp), __ARCH_ACTV_RPC_PASS_ARG(msgflg, __actv_local_var_msgflg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ipc_msgrcv(rref_t __rref, unsigned long long __rpc_info, void *__buf, int msqid, unsigned long msg, unsigned long msgsz, long msgtyp, int msgflg)
{
	int __ret;
	int __maybe_unused __actv_local_var_msqid = msqid;
	unsigned long __maybe_unused __actv_local_var_msg = msg;
	unsigned long __maybe_unused __actv_local_var_msgsz = msgsz;
	long __maybe_unused __actv_local_var_msgtyp = msgtyp;
	int __maybe_unused __actv_local_var_msgflg = msgflg;
	__ret = ____actvcapcall_hmcall_ipc_msgrcv(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(msqid, __actv_local_var_msqid), __ARCH_ACTV_RPC_PASS_ARG(msg, __actv_local_var_msg), __ARCH_ACTV_RPC_PASS_ARG(msgsz, __actv_local_var_msgsz), __ARCH_ACTV_RPC_PASS_ARG(msgtyp, __actv_local_var_msgtyp), __ARCH_ACTV_RPC_PASS_ARG(msgflg, __actv_local_var_msgflg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_ipc_msgctl(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_ipc_msgctl(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ipc_msgctl(unsigned long long __rpc_info, void *__buf, int msqid, int cmd, unsigned long send_buf, unsigned long send_sz, unsigned long recv_buf, unsigned long recv_sz)
{
	int __ret;
	int __maybe_unused __actv_local_var_msqid = msqid;
	int __maybe_unused __actv_local_var_cmd = cmd;
	unsigned long __maybe_unused __actv_local_var_send_buf = send_buf;
	unsigned long __maybe_unused __actv_local_var_send_sz = send_sz;
	unsigned long __maybe_unused __actv_local_var_recv_buf = recv_buf;
	unsigned long __maybe_unused __actv_local_var_recv_sz = recv_sz;
	__ret = ____actvcall_hmcall_ipc_msgctl(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(msqid, __actv_local_var_msqid), __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(send_buf, __actv_local_var_send_buf), __ARCH_ACTV_RPC_PASS_ARG(send_sz, __actv_local_var_send_sz), __ARCH_ACTV_RPC_PASS_ARG(recv_buf, __actv_local_var_recv_buf), __ARCH_ACTV_RPC_PASS_ARG(recv_sz, __actv_local_var_recv_sz));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ipc_msgctl(rref_t __rref, unsigned long long __rpc_info, void *__buf, int msqid, int cmd, unsigned long send_buf, unsigned long send_sz, unsigned long recv_buf, unsigned long recv_sz)
{
	int __ret;
	int __maybe_unused __actv_local_var_msqid = msqid;
	int __maybe_unused __actv_local_var_cmd = cmd;
	unsigned long __maybe_unused __actv_local_var_send_buf = send_buf;
	unsigned long __maybe_unused __actv_local_var_send_sz = send_sz;
	unsigned long __maybe_unused __actv_local_var_recv_buf = recv_buf;
	unsigned long __maybe_unused __actv_local_var_recv_sz = recv_sz;
	__ret = ____actvcapcall_hmcall_ipc_msgctl(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(msqid, __actv_local_var_msqid), __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(send_buf, __actv_local_var_send_buf), __ARCH_ACTV_RPC_PASS_ARG(send_sz, __actv_local_var_send_sz), __ARCH_ACTV_RPC_PASS_ARG(recv_buf, __actv_local_var_recv_buf), __ARCH_ACTV_RPC_PASS_ARG(recv_sz, __actv_local_var_recv_sz));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_ipc_semget(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_ipc_semget(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ipc_semget(unsigned long long __rpc_info, void *__buf, int key, int nsems, int semflg)
{
	int __ret;
	int __maybe_unused __actv_local_var_key = key;
	int __maybe_unused __actv_local_var_nsems = nsems;
	int __maybe_unused __actv_local_var_semflg = semflg;
	__ret = ____actvcall_hmcall_ipc_semget(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(nsems, __actv_local_var_nsems), __ARCH_ACTV_RPC_PASS_ARG(semflg, __actv_local_var_semflg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ipc_semget(rref_t __rref, unsigned long long __rpc_info, void *__buf, int key, int nsems, int semflg)
{
	int __ret;
	int __maybe_unused __actv_local_var_key = key;
	int __maybe_unused __actv_local_var_nsems = nsems;
	int __maybe_unused __actv_local_var_semflg = semflg;
	__ret = ____actvcapcall_hmcall_ipc_semget(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(key, __actv_local_var_key), __ARCH_ACTV_RPC_PASS_ARG(nsems, __actv_local_var_nsems), __ARCH_ACTV_RPC_PASS_ARG(semflg, __actv_local_var_semflg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_ipc_semop(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_ipc_semop(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ipc_semop(unsigned long long __rpc_info, void *__buf, int semid, unsigned long sops, unsigned long nsops)
{
	int __ret;
	int __maybe_unused __actv_local_var_semid = semid;
	unsigned long __maybe_unused __actv_local_var_sops = sops;
	unsigned long __maybe_unused __actv_local_var_nsops = nsops;
	__ret = ____actvcall_hmcall_ipc_semop(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(semid, __actv_local_var_semid), __ARCH_ACTV_RPC_PASS_ARG(sops, __actv_local_var_sops), __ARCH_ACTV_RPC_PASS_ARG(nsops, __actv_local_var_nsops));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ipc_semop(rref_t __rref, unsigned long long __rpc_info, void *__buf, int semid, unsigned long sops, unsigned long nsops)
{
	int __ret;
	int __maybe_unused __actv_local_var_semid = semid;
	unsigned long __maybe_unused __actv_local_var_sops = sops;
	unsigned long __maybe_unused __actv_local_var_nsops = nsops;
	__ret = ____actvcapcall_hmcall_ipc_semop(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(semid, __actv_local_var_semid), __ARCH_ACTV_RPC_PASS_ARG(sops, __actv_local_var_sops), __ARCH_ACTV_RPC_PASS_ARG(nsops, __actv_local_var_nsops));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_ipc_semctl(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_ipc_semctl(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_ipc_semctl(unsigned long long __rpc_info, void *__buf, int semid, int semnum, int cmd, unsigned long arg)
{
	int __ret;
	int __maybe_unused __actv_local_var_semid = semid;
	int __maybe_unused __actv_local_var_semnum = semnum;
	int __maybe_unused __actv_local_var_cmd = cmd;
	unsigned long __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcall_hmcall_ipc_semctl(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(semid, __actv_local_var_semid), __ARCH_ACTV_RPC_PASS_ARG(semnum, __actv_local_var_semnum), __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_ipc_semctl(rref_t __rref, unsigned long long __rpc_info, void *__buf, int semid, int semnum, int cmd, unsigned long arg)
{
	int __ret;
	int __maybe_unused __actv_local_var_semid = semid;
	int __maybe_unused __actv_local_var_semnum = semnum;
	int __maybe_unused __actv_local_var_cmd = cmd;
	unsigned long __maybe_unused __actv_local_var_arg = arg;
	__ret = ____actvcapcall_hmcall_ipc_semctl(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(semid, __actv_local_var_semid), __ARCH_ACTV_RPC_PASS_ARG(semnum, __actv_local_var_semnum), __ARCH_ACTV_RPC_PASS_ARG(cmd, __actv_local_var_cmd), __ARCH_ACTV_RPC_PASS_ARG(arg, __actv_local_var_arg));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_hack_procfs_status(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_hack_procfs_status(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_hack_procfs_status(unsigned long long __rpc_info, void *__buf, pid_t pid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__ret = ____actvcall_hmcall_hack_procfs_status(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_hack_procfs_status(rref_t __rref, unsigned long long __rpc_info, void *__buf, pid_t pid)
{
	int __ret;
	pid_t __maybe_unused __actv_local_var_pid = pid;
	__ret = ____actvcapcall_hmcall_hack_procfs_status(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(pid, __actv_local_var_pid));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_audit_notify_rule_update(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_audit_notify_rule_update(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_audit_notify_rule_update(unsigned long long __rpc_info, void *__buf, unsigned long long ruleid, unsigned int list_num, enum RULE_APPEND_TYPE type, enum RULE_NOTIFY_OPERATION operat)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_ruleid = ruleid;
	unsigned int __maybe_unused __actv_local_var_list_num = list_num;
	enum RULE_APPEND_TYPE __maybe_unused __actv_local_var_type = type;
	enum RULE_NOTIFY_OPERATION __maybe_unused __actv_local_var_operat = operat;
	__ret = ____actvcall_hmcall_audit_notify_rule_update(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(ruleid, __actv_local_var_ruleid), __ARCH_ACTV_RPC_PASS_ARG(list_num, __actv_local_var_list_num), __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type), __ARCH_ACTV_RPC_PASS_ARG(operat, __actv_local_var_operat));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_audit_notify_rule_update(rref_t __rref, unsigned long long __rpc_info, void *__buf, unsigned long long ruleid, unsigned int list_num, enum RULE_APPEND_TYPE type, enum RULE_NOTIFY_OPERATION operat)
{
	int __ret;
	unsigned long long __maybe_unused __actv_local_var_ruleid = ruleid;
	unsigned int __maybe_unused __actv_local_var_list_num = list_num;
	enum RULE_APPEND_TYPE __maybe_unused __actv_local_var_type = type;
	enum RULE_NOTIFY_OPERATION __maybe_unused __actv_local_var_operat = operat;
	__ret = ____actvcapcall_hmcall_audit_notify_rule_update(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(ruleid, __actv_local_var_ruleid), __ARCH_ACTV_RPC_PASS_ARG(list_num, __actv_local_var_list_num), __ARCH_ACTV_RPC_PASS_ARG(type, __actv_local_var_type), __ARCH_ACTV_RPC_PASS_ARG(operat, __actv_local_var_operat));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_key_install_keyring(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_key_install_keyring(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_key_install_keyring(unsigned long long __rpc_info, void *__buf, int short_key_id, void *key_addr)
{
	int __ret;
	int __maybe_unused __actv_local_var_short_key_id = short_key_id;
	__maybe_unused void *__actv_local_var_key_addr = key_addr;
	__ret = ____actvcall_hmcall_key_install_keyring(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(short_key_id, __actv_local_var_short_key_id), __ARCH_ACTV_RPC_PASS_ARG(key_addr, __actv_local_var_key_addr));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_key_install_keyring(rref_t __rref, unsigned long long __rpc_info, void *__buf, int short_key_id, void *key_addr)
{
	int __ret;
	int __maybe_unused __actv_local_var_short_key_id = short_key_id;
	__maybe_unused void *__actv_local_var_key_addr = key_addr;
	__ret = ____actvcapcall_hmcall_key_install_keyring(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(short_key_id, __actv_local_var_short_key_id), __ARCH_ACTV_RPC_PASS_ARG(key_addr, __actv_local_var_key_addr));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_retbuf"))) ____actvcall_hmcall_key_lookup_keyring(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_retbuf"))) ____actvcapcall_hmcall_key_lookup_keyring(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_key_lookup_keyring(unsigned long long __rpc_info, void *__buf, int short_key_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_short_key_id = short_key_id;
	__ret = ____actvcall_hmcall_key_lookup_keyring(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(short_key_id, __actv_local_var_short_key_id));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_key_lookup_keyring(rref_t __rref, unsigned long long __rpc_info, void *__buf, int short_key_id)
{
	int __ret;
	int __maybe_unused __actv_local_var_short_key_id = short_key_id;
	__ret = ____actvcapcall_hmcall_key_lookup_keyring(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(short_key_id, __actv_local_var_short_key_id));
	return __ret;
}

static int __attribute__((alias("__internal_rpccall_nobuf"))) ____actvcall_hmcall_cert_verify_path_and_chksum(unsigned long long rpc_info, void *__buf, ...);


static int __attribute__((alias("__internal_rpccapcall_nobuf"))) ____actvcapcall_hmcall_cert_verify_path_and_chksum(rref_t __rref, unsigned long long rpc_info, void *__buf, ...);


int __opt_noframe __opt_nostkprot __actvcall_hmcall_cert_verify_path_and_chksum(unsigned long long __rpc_info, void *__buf, const char *path_and_chksum, size_t size)
{
	int __ret;
	__maybe_unused const char *__actv_local_var_path_and_chksum = path_and_chksum;
	size_t __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcall_hmcall_cert_verify_path_and_chksum(__rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(path_and_chksum, __actv_local_var_path_and_chksum), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

int __opt_noframe __opt_nostkprot __actvcapcall_hmcall_cert_verify_path_and_chksum(rref_t __rref, unsigned long long __rpc_info, void *__buf, const char *path_and_chksum, size_t size)
{
	int __ret;
	__maybe_unused const char *__actv_local_var_path_and_chksum = path_and_chksum;
	size_t __maybe_unused __actv_local_var_size = size;
	__ret = ____actvcapcall_hmcall_cert_verify_path_and_chksum(__rref, __rpc_info, __buf, __ARCH_ACTV_RPC_PASS_ARG(path_and_chksum, __actv_local_var_path_and_chksum), __ARCH_ACTV_RPC_PASS_ARG(size, __actv_local_var_size));
	return __ret;
}

#endif
#endif

/*
 * Copyright (C) Huawei Technologies Co., Ltd. 2018-2020. All rights reserved.
 * Description: Sysmgr sysctrl function declaration
 * Author: Huawei OS Kernel Lab
 * Create: Fri Nov 16 10:27:57 2018
 */

/*
 * To support the mixed data model which means the client and the server
 * may use different data model. See the comment for limitation of data type
 * used in the sysif interfaces in <libsysif/base/api.h>.
 */
#ifdef SYSIF_EXPORT_API

#include <hmkernel/capability.h>

struct uname {
	char sysname[__SYSCONF_STR_LEN_MAX];
	char nodename[__SYSCONF_STR_LEN_MAX];
	char release[__SYSCONF_STR_LEN_MAX];
	char version[__SYSCONF_STR_LEN_MAX];
	char machine[__SYSCONF_STR_LEN_MAX];
	char domainname[__SYSCONF_STR_LEN_MAX];
};

/* This struct is compact for `struct sysinfo` in libc */
struct sys_info {
	uint64_t uptime;
	uint64_t loads_1;
	uint64_t loads_5;
	uint64_t loads_15;
	uint64_t total_ram;
	uint64_t avail_ram;
	uint64_t shared_ram;
	uint64_t buffer_ram;
	uint64_t total_swap;
	uint64_t avail_swap;
	uint64_t procs;
	uint64_t total_high;
	uint64_t free_high;

	/*
	 * ram start address, which is required by devhost to build
	 * "kernel" mapping for liblinux properly.
	 */
	uint64_t ramstart;
};

struct nodename {
	char nodename[__SYSCONF_STR_LEN_MAX];
};

enum {
	CPU_FLAGS_WITH_STATE,
	CPU_FLAGS_WITH_TIME,
};

struct trace_event {
	char name[KEV_EVENT_NAME_SIZE];
	char filter[KEV_EVENT_FILTER_SIZE];
	unsigned int enable;
};

#endif

DEFINE_MANAGER(sysctrl, 32,
	DEFINE_SIMPLE_METHOD(sysctrl, shutdown,
			     ARG_NO,
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(sysctrl, reboot,
			     ARG_NO,
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(sysctrl, sysconf_ulong,
			     ARG(1, unsigned int, type),
			     RET(1, unsigned long long, val),
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(sysctrl, sysconf_string,
			     ARG(3, unsigned int, type, char *, buf, unsigned int, buflen),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, uname,
		      ARG_NO,
		      RET(1, struct uname, name),
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, require,
		      ARG(3, rref_t, rref,
			  unsigned int, _mandatory_permission,
			  unsigned int, _avail_permission),
		      RET_NO,
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, sysinfo,
		      ARG_NO,
		      RET(1, struct sys_info, info),
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, cpustat,
		      ARG(2, unsigned int, flags,
			  struct bunch_ipc_attr, attr),
		      RET_NO,
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, attach_cpuctx,
		      ARG_NO,
		      RET_NO,
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, detach_cpuctx,
		      ARG_NO,
		      RET_NO,
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, check_cpuctx,
		      ARG_NO,
		      RET(1, unsigned int, is_attached),
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, set_hostname,
		      ARG(1, struct nodename, name),
		      RET_NO,
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, set_klogport_level,
		      ARG(2, unsigned long, type_flag, unsigned int, level),
		      RET_NO,
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, enable_klogport,
		      ARG(1, unsigned long, type_flag),
		      RET_NO,
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, disable_klogport,
		      ARG(1, unsigned long, type_flag),
		      RET_NO,
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, kev_read_event_number,
		      ARG_NO,
		      RET(1, unsigned int, event_number),
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, kev_read_event_config,
		      ARG(1, unsigned int, event_type),
		      RET(1, struct __sysctrl_kev_config, event_config),
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, kev_set_enable,
		      ARG(1, struct trace_event, event),
		      RET_NO,
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, kev_set_filter,
		      ARG(1, struct trace_event, event),
		      RET_NO,
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, kev_print,
		      ARG_NO,
		      RET_NO,
		      SLOWDATA_NO)
	DEFINE_METHOD(sysctrl, kev_klog,
		      ARG(3, unsigned long, level, const char *, str, unsigned long, size),
		      RET_NO,
		      SLOWDATA_NO)
)

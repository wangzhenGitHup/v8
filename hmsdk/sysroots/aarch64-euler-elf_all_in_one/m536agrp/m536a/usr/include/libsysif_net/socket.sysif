/*
 * Copyright (C) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.
 * Description: Header file for socket sysif api
 * Author: Huawei OS Kernel Lab
 * Create: Sat Oct 05 08:54:19 2019
 */

#ifdef SYSIF_EXPORT_API

#define NETTEST_BUF_LEN		64
struct sysif_nettest {
	char buf[NETTEST_BUF_LEN];
};
#endif

/*
 * To support the mixed data model which means the client and the server
 * may use different data model. See the comment for limitation of data type
 * used in the sysif interfaces in <libsysif/base/api.h>.
 */
/* please make sure revoke is 1st, and fork is 2nd */
DEFINE_MANAGER(socket, 32,
	DEFINE_SIMPLE_METHOD(socket, revoke,
			     ARG_NO,
			     RET_NO,
			     SLOWDATA)
	DEFINE_SIMPLE_METHOD(socket, fork,
			     ARG_NO,
			     RET_NO,
			     SLOWDATA)
	DEFINE_SIMPLE_METHOD(socket, socket,
			     ARG(4, int, domain, int, type, int, protocol, int, fd),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, socketpair,
			     ARG(5,
				 int, domain,
				 int, type,
				 int, protocol,
				 int, fd,
				 int, fd2),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, close,
			     ARG(1, int, fd),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, shutdown,
			     ARG(2, int, fd, int, how),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, bind,
			     ARG(3, int, fd, const void *, addr, socklen_t, len),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, listen,
			     ARG(2, int, fd, int, backlog),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, accept,
			     ARG(5, int, sockfd, void *, addr, void *, addrlen, int, flags, int, fd),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, connect,
			     ARG(3, int, fd, const void *, addr, socklen_t, addrlen),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, send,
			     ARG(4, int, fd, const void *, buf, size_t, len, int, flags),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, sendmsg,
			     ARG(3, int, fd, const void *, msg, int, flags),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, recvmsg,
			     ARG(3, int, fd, void *, msg, int, flags),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, sendto,
			     ARG(6, int, fd, const void *, buf, size_t, len, int, flags, const void *, addr, socklen_t, addrlen),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, recvfrom,
			     ARG(6, int, fd, void *, buf, size_t, len, int, flags, void *, addr, void *, addrlen),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, getsockopt,
			     ARG(5, int, fd, int, level, int, optname,
				    void *, optval, socklen_t *, optlen),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, setsockopt,
			     ARG(5, int, fd, int, level, int, optname,
				    const void *, optval, socklen_t, optlen),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, getsockname,
			     ARG(3, int, fd, void *, addr, void *, addrlen),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, getpeername,
			     ARG(3, int, fd, void *, addr, void *, addrlen),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, fcntl,
			     ARG(3, int, fd, int, cmd, int, val),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, ioctl,
			     ARG(3, int, fd, int, request, unsigned long, args),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, dup,
			     ARG(2, int, oldfd, int, newfd),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, send_fd,
			     ARG(1, unsigned long, argu_info),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, recv_fd,
			     ARG(1, unsigned long, argu_info),
			     RET_NO,
			     SLOWDATA_NO)
	DEFINE_SIMPLE_METHOD(socket, put_send_fd,
			     ARG(1, uintptr_t, argu_info),
			     RET_NO,
			     SLOWDATA_NO)
)
